{
  "Widget Test": {
    "prefix": "flt-widget-test",
    "description": "Complete widget test with pump and verify",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_test/flutter_test.dart';",
      "",
      "import 'package:${1:app_name}/widgets/${2:my_widget}.dart';",
      "",
      "void main() {",
      "  group('${3:MyWidget} Tests', () {",
      "    testWidgets('${4:should display initial state correctly}', (WidgetTester tester) async {",
      "      // Arrange",
      "      const testWidget = ${3:MyWidget}(",
      "        ${5:initialValue: 0},",
      "      );",
      "",
      "      // Act",
      "      await tester.pumpWidget(",
      "        MaterialApp(",
      "          home: Scaffold(",
      "            body: testWidget,",
      "          ),",
      "        ),",
      "      );",
      "",
      "      // Assert",
      "      expect(find.text('${6:0}'), findsOneWidget);",
      "      expect(find.byType(${3:MyWidget}), findsOneWidget);",
      "    });",
      "",
      "    testWidgets('${7:should respond to user interaction}', (WidgetTester tester) async {",
      "      // Arrange",
      "      await tester.pumpWidget(",
      "        MaterialApp(",
      "          home: Scaffold(",
      "            body: ${3:MyWidget}(),",
      "          ),",
      "        ),",
      "      );",
      "",
      "      // Act",
      "      await tester.tap(find.byIcon(Icons.${8:add}));",
      "      await tester.pump();",
      "",
      "      // Assert",
      "      expect(find.text('${9:1}'), findsOneWidget);",
      "    });",
      "",
      "    testWidgets('${10:should handle error states}', (WidgetTester tester) async {",
      "      // Test error handling",
      "      ${11:// Add error scenario test}",
      "    });",
      "  });",
      "}",
      "$0"
    ]
  },

  "BLoC Test": {
    "prefix": "flt-bloc-test",
    "description": "Complete BLoC test with bloc_test package",
    "body": [
      "import 'package:bloc_test/bloc_test.dart';",
      "import 'package:flutter_test/flutter_test.dart';",
      "import 'package:mocktail/mocktail.dart';",
      "",
      "import 'package:${1:app_name}/bloc/${2:counter}_bloc.dart';",
      "",
      "class Mock${3:Repository} extends Mock implements ${3:Repository} {}",
      "",
      "void main() {",
      "  group('${4:Counter}Bloc Tests', () {",
      "    late ${4:Counter}Bloc ${5:counterBloc};",
      "    late Mock${3:Repository} mock${3:Repository};",
      "",
      "    setUp(() {",
      "      mock${3:Repository} = Mock${3:Repository}();",
      "      ${5:counterBloc} = ${4:Counter}Bloc(repository: mock${3:Repository});",
      "    });",
      "",
      "    tearDown(() {",
      "      ${5:counterBloc}.close();",
      "    });",
      "",
      "    test('${6:initial state should be correct}', () {",
      "      expect(${5:counterBloc}.state, equals(const ${4:Counter}State()));",
      "    });",
      "",
      "    blocTest<${4:Counter}Bloc, ${4:Counter}State>(",
      "      '${7:should emit loading and loaded states when successful}',",
      "      build: () {",
      "        when(() => mock${3:Repository}.${8:getData}())",
      "            .thenAnswer((_) async => ${9:'success'});",
      "        return ${5:counterBloc};",
      "      },",
      "      act: (bloc) => bloc.add(const ${4:Counter}${10:LoadData}()),",
      "      expect: () => [",
      "        const ${4:Counter}State(isLoading: true),",
      "        const ${4:Counter}State(isLoading: false, ${11:data: 'success'}),",
      "      ],",
      "      verify: (_) {",
      "        verify(() => mock${3:Repository}.${8:getData}()).called(1);",
      "      },",
      "    );",
      "",
      "    blocTest<${4:Counter}Bloc, ${4:Counter}State>(",
      "      '${12:should emit error state when fails}',",
      "      build: () {",
      "        when(() => mock${3:Repository}.${8:getData}())",
      "            .thenThrow(Exception('${13:Error message}'));",
      "        return ${5:counterBloc};",
      "      },",
      "      act: (bloc) => bloc.add(const ${4:Counter}${10:LoadData}()),",
      "      expect: () => [",
      "        const ${4:Counter}State(isLoading: true),",
      "        const ${4:Counter}State(",
      "          isLoading: false,",
      "          error: 'Exception: ${13:Error message}',",
      "        ),",
      "      ],",
      "    );",
      "  });",
      "}",
      "$0"
    ]
  },

  "Integration Test": {
    "prefix": "flt-integration-test",
    "description": "Complete integration test setup",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_test/flutter_test.dart';",
      "import 'package:integration_test/integration_test.dart';",
      "",
      "import 'package:${1:app_name}/main.dart' as app;",
      "",
      "void main() {",
      "  IntegrationTestWidgetsFlutterBinding.ensureInitialized();",
      "",
      "  group('${2:App Integration Tests}', () {",
      "    testWidgets('${3:complete user flow test}', (WidgetTester tester) async {",
      "      // Start the app",
      "      app.main();",
      "      await tester.pumpAndSettle();",
      "",
      "      // Verify initial screen",
      "      expect(find.text('${4:Welcome}'), findsOneWidget);",
      "",
      "      // Navigate to next screen",
      "      await tester.tap(find.byKey(const Key('${5:next_button}')));",
      "      await tester.pumpAndSettle();",
      "",
      "      // Verify navigation worked",
      "      expect(find.text('${6:Next Screen}'), findsOneWidget);",
      "",
      "      // Test form input",
      "      await tester.enterText(",
      "        find.byKey(const Key('${7:email_field}')),",
      "        '${8:test@example.com}',",
      "      );",
      "",
      "      await tester.enterText(",
      "        find.byKey(const Key('${9:password_field}')),",
      "        '${10:password123}',",
      "      );",
      "",
      "      // Submit form",
      "      await tester.tap(find.byKey(const Key('${11:submit_button}')));",
      "      await tester.pumpAndSettle();",
      "",
      "      // Verify result",
      "      expect(find.text('${12:Success}'), findsOneWidget);",
      "    });",
      "",
      "    testWidgets('${13:error handling flow}', (WidgetTester tester) async {",
      "      // Test error scenarios",
      "      ${14:// Add error flow test}",
      "    });",
      "  });",
      "}",
      "$0"
    ]
  },

  "Mock Setup": {
    "prefix": "flt-mock-setup",
    "description": "Complete mock setup with mocktail",
    "body": [
      "import 'package:flutter_test/flutter_test.dart';",
      "import 'package:mocktail/mocktail.dart';",
      "",
      "import 'package:${1:app_name}/data/repositories/${2:user}_repository.dart';",
      "import 'package:${1:app_name}/data/datasources/${2:user}_remote_datasource.dart';",
      "import 'package:${1:app_name}/domain/entities/${2:user}.dart';",
      "",
      "// Mock classes",
      "class Mock${3:User}Repository extends Mock implements ${3:User}Repository {}",
      "class Mock${3:User}RemoteDataSource extends Mock implements ${3:User}RemoteDataSource {}",
      "",
      "class Fake${3:User} extends Fake implements ${3:User} {}",
      "",
      "void main() {",
      "  setUpAll(() {",
      "    // Register fallback values",
      "    registerFallbackValue(Fake${3:User}());",
      "  });",
      "",
      "  group('${4:Repository} Tests', () {",
      "    late Mock${3:User}Repository mock${3:User}Repository;",
      "    late Mock${3:User}RemoteDataSource mockRemoteDataSource;",
      "",
      "    setUp(() {",
      "      mock${3:User}Repository = Mock${3:User}Repository();",
      "      mockRemoteDataSource = Mock${3:User}RemoteDataSource();",
      "    });",
      "",
      "    test('${5:should return success when remote call succeeds}', () async {",
      "      // Arrange",
      "      const testUser = ${3:User}(",
      "        id: '${6:1}',",
      "        name: '${7:Test User}',",
      "        email: '${8:test@example.com}',",
      "      );",
      "",
      "      when(() => mockRemoteDataSource.${9:getUser}(any()))",
      "          .thenAnswer((_) async => testUser);",
      "",
      "      // Act",
      "      final result = await mock${3:User}Repository.${9:getUser}('${6:1}');",
      "",
      "      // Assert",
      "      expect(result.isRight(), true);",
      "      result.fold(",
      "        (failure) => fail('Should not return failure'),",
      "        (user) => expect(user, testUser),",
      "      );",
      "",
      "      verify(() => mockRemoteDataSource.${9:getUser}('${6:1}')).called(1);",
      "    });",
      "",
      "    test('${10:should return failure when remote call fails}', () async {",
      "      // Arrange",
      "      when(() => mockRemoteDataSource.${9:getUser}(any()))",
      "          .thenThrow(Exception('${11:Network error}'));",
      "",
      "      // Act",
      "      final result = await mock${3:User}Repository.${9:getUser}('${6:1}');",
      "",
      "      // Assert",
      "      expect(result.isLeft(), true);",
      "    });",
      "  });",
      "}",
      "$0"
    ]
  },

  "Golden Test": {
    "prefix": "flt-golden-test",
    "description": "Golden test for widget screenshots",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_test/flutter_test.dart';",
      "import 'package:golden_toolkit/golden_toolkit.dart';",
      "",
      "import 'package:${1:app_name}/widgets/${2:my_widget}.dart';",
      "",
      "void main() {",
      "  group('${3:MyWidget} Golden Tests', () {",
      "    testGoldens('${4:should match golden file}', (WidgetTester tester) async {",
      "      await loadAppFonts();",
      "",
      "      const widget = ${3:MyWidget}(",
      "        ${5:title: 'Test Title'},",
      "      );",
      "",
      "      await tester.pumpWidgetBuilder(",
      "        widget,",
      "        wrapper: materialAppWrapper(",
      "          theme: ThemeData.light(),",
      "        ),",
      "      );",
      "",
      "      await screenMatchesGolden(tester, '${6:my_widget_light_theme}');",
      "    });",
      "",
      "    testGoldens('${7:should match golden file dark theme}', (WidgetTester tester) async {",
      "      await loadAppFonts();",
      "",
      "      const widget = ${3:MyWidget}(",
      "        ${5:title: 'Test Title'},",
      "      );",
      "",
      "      await tester.pumpWidgetBuilder(",
      "        widget,",
      "        wrapper: materialAppWrapper(",
      "          theme: ThemeData.dark(),",
      "        ),",
      "      );",
      "",
      "      await screenMatchesGolden(tester, '${8:my_widget_dark_theme}');",
      "    });",
      "",
      "    testGoldens('${9:should match different screen sizes}', (WidgetTester tester) async {",
      "      await loadAppFonts();",
      "",
      "      const widget = ${3:MyWidget}();",
      "",
      "      await tester.pumpWidgetBuilder(",
      "        widget,",
      "        wrapper: materialAppWrapper(),",
      "        surfaceSize: const Size(${10:320}, ${11:568}), // iPhone SE",
      "      );",
      "",
      "      await screenMatchesGolden(tester, '${12:my_widget_iphone_se}');",
      "    });",
      "  });",
      "}",
      "$0"
    ]
  }
}
