{
  "CRUD Use Case - Create": {
    "prefix": "clean-usecase-create",
    "description": "Complete Create Use Case with validation",
    "body": [
      "import 'package:dartz/dartz.dart';",
      "import 'package:equatable/equatable.dart';",
      "",
      "import '../entities/${1:user}.dart';",
      "import '../failures/${2:domain}_failure.dart';",
      "import '../repositories/${1:user}_repository.dart';",
      "import 'base/use_case.dart';",
      "",
      "class Create${3:User}UseCase implements UseCase<${1:User}, Create${3:User}Params> {",
      "  final ${3:User}Repository _repository;",
      "",
      "  const Create${3:User}UseCase(this._repository);",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, ${1:User}>> call(",
      "    Create${3:User}Params params,",
      "  ) async {",
      "    // Pre-validation business rules",
      "    final validationResult = _validateBusinessRules(params);",
      "    if (validationResult.isLeft()) {",
      "      return validationResult.fold(",
      "        (failure) => left(failure),",
      "        (_) => throw Exception('Unexpected state'),",
      "      );",
      "    }",
      "",
      "    // Check if entity already exists",
      "    final existsResult = await _repository.existsByEmail(params.email);",
      "    return existsResult.fold(",
      "      (failure) => left(failure),",
      "      (exists) async {",
      "        if (exists) {",
      "          return left(const ${2:Domain}Failure.conflictError(",
      "            '${3:User} with this email already exists',",
      "          ));",
      "        }",
      "",
      "        // Create entity",
      "        final ${4:user} = ${1:User}(",
      "          id: params.id ?? _generateId(),",
      "          name: params.name,",
      "          email: params.email,",
      "          createdAt: DateTime.now(),",
      "        );",
      "",
      "        // Apply additional business logic",
      "        final processedUser = _applyBusinessLogic(${4:user}, params);",
      "",
      "        // Persist entity",
      "        return await _repository.create(processedUser);",
      "      },",
      "    );",
      "  }",
      "",
      "  Either<${2:Domain}Failure, Unit> _validateBusinessRules(",
      "    Create${3:User}Params params,",
      "  ) {",
      "    // Name validation",
      "    if (params.name.trim().length < 2) {",
      "      return left(const ${2:Domain}Failure.validationError(",
      "        field: 'name',",
      "        message: 'Name must be at least 2 characters long',",
      "      ));",
      "    }",
      "",
      "    if (params.name.trim().length > 100) {",
      "      return left(const ${2:Domain}Failure.validationError(",
      "        field: 'name',",
      "        message: 'Name cannot exceed 100 characters',",
      "      ));",
      "    }",
      "",
      "    // Email validation",
      "    final emailRegex = RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$');",
      "    if (!emailRegex.hasMatch(params.email)) {",
      "      return left(const ${2:Domain}Failure.validationError(",
      "        field: 'email',",
      "        message: 'Invalid email format',",
      "      ));",
      "    }",
      "",
      "    // Custom business rules",
      "    if (params.email.endsWith('@temp.com')) {",
      "      return left(const ${2:Domain}Failure.businessRuleViolation(",
      "        'Temporary email addresses are not allowed',",
      "      ));",
      "    }",
      "",
      "    return right(unit);",
      "  }",
      "",
      "  ${1:User} _applyBusinessLogic(${1:User} ${4:user}, Create${3:User}Params params) {",
      "    // Apply any additional business logic here",
      "    // e.g., set default values, normalize data, etc.",
      "    return ${4:user};",
      "  }",
      "",
      "  String _generateId() {",
      "    // Generate unique ID (could use UUID package)",
      "    return DateTime.now().millisecondsSinceEpoch.toString();",
      "  }",
      "}",
      "",
      "class Create${3:User}Params extends Equatable {",
      "  final String? id;",
      "  final String name;",
      "  final String email;",
      "  final Map<String, dynamic>? metadata;",
      "",
      "  const Create${3:User}Params({",
      "    this.id,",
      "    required this.name,",
      "    required this.email,",
      "    this.metadata,",
      "  });",
      "",
      "  @override",
      "  List<Object?> get props => [id, name, email, metadata];",
      "",
      "  @override",
      "  String toString() => 'Create${3:User}Params('",
      "      'id: \\$id, '",
      "      'name: \\$name, '",
      "      'email: \\$email, '",
      "      'metadata: \\$metadata'",
      "      ')';",
      "}",
      "$0"
    ]
  },

  "CRUD Use Case - Get By ID": {
    "prefix": "clean-usecase-get",
    "description": "Get entity by ID with caching and validation",
    "body": [
      "import 'package:dartz/dartz.dart';",
      "import 'package:equatable/equatable.dart';",
      "",
      "import '../entities/${1:user}.dart';",
      "import '../failures/${2:domain}_failure.dart';",
      "import '../repositories/${1:user}_repository.dart';",
      "import 'base/use_case.dart';",
      "",
      "class Get${3:User}ByIdUseCase implements UseCase<${1:User}, Get${3:User}ByIdParams> {",
      "  final ${3:User}Repository _repository;",
      "",
      "  const Get${3:User}ByIdUseCase(this._repository);",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, ${1:User}>> call(",
      "    Get${3:User}ByIdParams params,",
      "  ) async {",
      "    // Validate input parameters",
      "    final validationResult = _validateParams(params);",
      "    if (validationResult.isLeft()) {",
      "      return validationResult.fold(",
      "        (failure) => left(failure),",
      "        (_) => throw Exception('Unexpected state'),",
      "      );",
      "    }",
      "",
      "    // Get entity from repository",
      "    final result = await _repository.getById(params.id);",
      "",
      "    return result.fold(",
      "      (failure) => left(failure),",
      "      (${4:user}) {",
      "        // Apply post-retrieval business logic",
      "        final processedUser = _applyPostRetrievalLogic(${4:user}, params);",
      "        return right(processedUser);",
      "      },",
      "    );",
      "  }",
      "",
      "  Either<${2:Domain}Failure, Unit> _validateParams(Get${3:User}ByIdParams params) {",
      "    if (params.id.trim().isEmpty) {",
      "      return left(const ${2:Domain}Failure.validationError(",
      "        field: 'id',",
      "        message: 'ID cannot be empty',",
      "      ));",
      "    }",
      "",
      "    // Add more validation rules as needed",
      "    if (params.id.length > 255) {",
      "      return left(const ${2:Domain}Failure.validationError(",
      "        field: 'id',",
      "        message: 'ID is too long',",
      "      ));",
      "    }",
      "",
      "    return right(unit);",
      "  }",
      "",
      "  ${1:User} _applyPostRetrievalLogic(",
      "    ${1:User} ${4:user},",
      "    Get${3:User}ByIdParams params,",
      "  ) {",
      "    // Apply any post-retrieval business logic",
      "    // e.g., update last accessed timestamp, log access, etc.",
      "    ",
      "    if (params.markAsAccessed) {",
      "      // Could update last accessed timestamp",
      "      return ${4:user}.markAsUpdated();",
      "    }",
      "",
      "    return ${4:user};",
      "  }",
      "}",
      "",
      "class Get${3:User}ByIdParams extends Equatable {",
      "  final String id;",
      "  final bool markAsAccessed;",
      "  final bool includeMetadata;",
      "",
      "  const Get${3:User}ByIdParams({",
      "    required this.id,",
      "    this.markAsAccessed = false,",
      "    this.includeMetadata = true,",
      "  });",
      "",
      "  @override",
      "  List<Object> get props => [id, markAsAccessed, includeMetadata];",
      "",
      "  @override",
      "  String toString() => 'Get${3:User}ByIdParams('",
      "      'id: \\$id, '",
      "      'markAsAccessed: \\$markAsAccessed, '",
      "      'includeMetadata: \\$includeMetadata'",
      "      ')';",
      "}",
      "$0"
    ]
  },

  "CRUD Use Case - Update": {
    "prefix": "clean-usecase-update",
    "description": "Update entity with validation and business rules",
    "body": [
      "import 'package:dartz/dartz.dart';",
      "import 'package:equatable/equatable.dart';",
      "",
      "import '../entities/${1:user}.dart';",
      "import '../failures/${2:domain}_failure.dart';",
      "import '../repositories/${1:user}_repository.dart';",
      "import 'base/use_case.dart';",
      "",
      "class Update${3:User}UseCase implements UseCase<${1:User}, Update${3:User}Params> {",
      "  final ${3:User}Repository _repository;",
      "",
      "  const Update${3:User}UseCase(this._repository);",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, ${1:User}>> call(",
      "    Update${3:User}Params params,",
      "  ) async {",
      "    // Validate input parameters",
      "    final validationResult = _validateParams(params);",
      "    if (validationResult.isLeft()) {",
      "      return validationResult.fold(",
      "        (failure) => left(failure),",
      "        (_) => throw Exception('Unexpected state'),",
      "      );",
      "    }",
      "",
      "    // Get existing entity",
      "    final existingResult = await _repository.getById(params.id);",
      "    return existingResult.fold(",
      "      (failure) => left(failure),",
      "      (existing${3:User}) async {",
      "        // Apply business rules for updates",
      "        final businessRulesResult = await _applyBusinessRules(",
      "          existing${3:User},",
      "          params,",
      "        );",
      "",
      "        return businessRulesResult.fold(",
      "          (failure) => left(failure),",
      "          (validatedUser) async {",
      "            // Update entity",
      "            final updated${3:User} = _createUpdatedEntity(",
      "              existing${3:User},",
      "              validatedUser,",
      "              params,",
      "            );",
      "",
      "            // Persist changes",
      "            return await _repository.update(updated${3:User});",
      "          },",
      "        );",
      "      },",
      "    );",
      "  }",
      "",
      "  Either<${2:Domain}Failure, Unit> _validateParams(Update${3:User}Params params) {",
      "    if (params.id.trim().isEmpty) {",
      "      return left(const ${2:Domain}Failure.validationError(",
      "        field: 'id',",
      "        message: 'ID cannot be empty',",
      "      ));",
      "    }",
      "",
      "    // Validate name if provided",
      "    if (params.name != null) {",
      "      if (params.name!.trim().length < 2) {",
      "        return left(const ${2:Domain}Failure.validationError(",
      "          field: 'name',",
      "          message: 'Name must be at least 2 characters long',",
      "        ));",
      "      }",
      "",
      "      if (params.name!.trim().length > 100) {",
      "        return left(const ${2:Domain}Failure.validationError(",
      "          field: 'name',",
      "          message: 'Name cannot exceed 100 characters',",
      "        ));",
      "      }",
      "    }",
      "",
      "    // Validate email if provided",
      "    if (params.email != null) {",
      "      final emailRegex = RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$');",
      "      if (!emailRegex.hasMatch(params.email!)) {",
      "        return left(const ${2:Domain}Failure.validationError(",
      "          field: 'email',",
      "          message: 'Invalid email format',",
      "        ));",
      "      }",
      "    }",
      "",
      "    return right(unit);",
      "  }",
      "",
      "  Future<Either<${2:Domain}Failure, Unit>> _applyBusinessRules(",
      "    ${1:User} existing${3:User},",
      "    Update${3:User}Params params,",
      "  ) async {",
      "    // Check if email change is allowed",
      "    if (params.email != null && params.email != existing${3:User}.email) {",
      "      final emailExistsResult = await _repository.existsByEmail(params.email!);",
      "      return emailExistsResult.fold(",
      "        (failure) => left(failure),",
      "        (exists) {",
      "          if (exists) {",
      "            return left(const ${2:Domain}Failure.conflictError(",
      "              'Another user with this email already exists',",
      "            ));",
      "          }",
      "          return right(unit);",
      "        },",
      "      );",
      "    }",
      "",
      "    // Additional business rules can be added here",
      "    return right(unit);",
      "  }",
      "",
      "  ${1:User} _createUpdatedEntity(",
      "    ${1:User} existing,",
      "    Unit _,",
      "    Update${3:User}Params params,",
      "  ) {",
      "    return existing.updateProfile(",
      "      name: params.name,",
      "      email: params.email,",
      "    );",
      "  }",
      "}",
      "",
      "class Update${3:User}Params extends Equatable {",
      "  final String id;",
      "  final String? name;",
      "  final String? email;",
      "  final Map<String, dynamic>? metadata;",
      "",
      "  const Update${3:User}Params({",
      "    required this.id,",
      "    this.name,",
      "    this.email,",
      "    this.metadata,",
      "  });",
      "",
      "  @override",
      "  List<Object?> get props => [id, name, email, metadata];",
      "",
      "  @override",
      "  String toString() => 'Update${3:User}Params('",
      "      'id: \\$id, '",
      "      'name: \\$name, '",
      "      'email: \\$email, '",
      "      'metadata: \\$metadata'",
      "      ')';",
      "}",
      "$0"
    ]
  },

  "Search Use Case": {
    "prefix": "clean-usecase-search",
    "description": "Advanced search use case with filters and pagination",
    "body": [
      "import 'package:dartz/dartz.dart';",
      "import 'package:equatable/equatable.dart';",
      "",
      "import '../entities/${1:user}.dart';",
      "import '../failures/${2:domain}_failure.dart';",
      "import '../repositories/${1:user}_repository.dart';",
      "import 'base/use_case.dart';",
      "",
      "class Search${3:Users}UseCase implements UseCase<SearchResult<${1:User}>, Search${3:Users}Params> {",
      "  final ${3:User}Repository _repository;",
      "",
      "  const Search${3:Users}UseCase(this._repository);",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, SearchResult<${1:User}>>> call(",
      "    Search${3:Users}Params params,",
      "  ) async {",
      "    // Validate search parameters",
      "    final validationResult = _validateParams(params);",
      "    if (validationResult.isLeft()) {",
      "      return validationResult.fold(",
      "        (failure) => left(failure),",
      "        (_) => throw Exception('Unexpected state'),",
      "      );",
      "    }",
      "",
      "    // Prepare search filters",
      "    final filters = _buildFilters(params);",
      "",
      "    // Execute search",
      "    if (params.paginated) {",
      "      return await _performPaginatedSearch(params, filters);",
      "    } else {",
      "      return await _performSimpleSearch(params, filters);",
      "    }",
      "  }",
      "",
      "  Either<${2:Domain}Failure, Unit> _validateParams(Search${3:Users}Params params) {",
      "    // Validate query length",
      "    if (params.query != null && params.query!.trim().length < 2) {",
      "      return left(const ${2:Domain}Failure.validationError(",
      "        field: 'query',",
      "        message: 'Search query must be at least 2 characters long',",
      "      ));",
      "    }",
      "",
      "    // Validate pagination parameters",
      "    if (params.paginated) {",
      "      if (params.page < 1) {",
      "        return left(const ${2:Domain}Failure.validationError(",
      "          field: 'page',",
      "          message: 'Page must be greater than 0',",
      "        ));",
      "      }",
      "",
      "      if (params.pageSize < 1 || params.pageSize > 100) {",
      "        return left(const ${2:Domain}Failure.validationError(",
      "          field: 'pageSize',",
      "          message: 'Page size must be between 1 and 100',",
      "        ));",
      "      }",
      "    }",
      "",
      "    // Validate limit",
      "    if (params.limit != null && (params.limit! < 1 || params.limit! > 1000)) {",
      "      return left(const ${2:Domain}Failure.validationError(",
      "        field: 'limit',",
      "        message: 'Limit must be between 1 and 1000',",
      "      ));",
      "    }",
      "",
      "    return right(unit);",
      "  }",
      "",
      "  Map<String, dynamic> _buildFilters(Search${3:Users}Params params) {",
      "    final filters = <String, dynamic>{...?params.filters};",
      "",
      "    // Add active filter if specified",
      "    if (params.activeOnly) {",
      "      filters['active'] = true;",
      "    }",
      "",
      "    // Add date range filters",
      "    if (params.createdAfter != null) {",
      "      filters['created_after'] = params.createdAfter!.toIso8601String();",
      "    }",
      "",
      "    if (params.createdBefore != null) {",
      "      filters['created_before'] = params.createdBefore!.toIso8601String();",
      "    }",
      "",
      "    return filters;",
      "  }",
      "",
      "  Future<Either<${2:Domain}Failure, SearchResult<${1:User}>>> _performPaginatedSearch(",
      "    Search${3:Users}Params params,",
      "    Map<String, dynamic> filters,",
      "  ) async {",
      "    final result = await _repository.getPaginated(",
      "      page: params.page,",
      "      pageSize: params.pageSize,",
      "      sortBy: params.sortBy,",
      "      ascending: params.ascending,",
      "      filters: filters,",
      "    );",
      "",
      "    return result.fold(",
      "      (failure) => left(failure),",
      "      (paginatedResult) => right(SearchResult(",
      "        items: paginatedResult.items,",
      "        totalCount: paginatedResult.totalCount,",
      "        hasMore: paginatedResult.hasNextPage,",
      "        page: paginatedResult.page,",
      "        pageSize: paginatedResult.pageSize,",
      "      )),",
      "    );",
      "  }",
      "",
      "  Future<Either<${2:Domain}Failure, SearchResult<${1:User}>>> _performSimpleSearch(",
      "    Search${3:Users}Params params,",
      "    Map<String, dynamic> filters,",
      "  ) async {",
      "    final result = await _repository.search(",
      "      query: params.query,",
      "      filters: filters,",
      "      sortBy: params.sortBy,",
      "      ascending: params.ascending,",
      "      limit: params.limit,",
      "      offset: params.offset,",
      "    );",
      "",
      "    return result.fold(",
      "      (failure) => left(failure),",
      "      (items) => right(SearchResult(",
      "        items: items,",
      "        totalCount: items.length,",
      "        hasMore: params.limit != null && items.length == params.limit,",
      "      )),",
      "    );",
      "  }",
      "}",
      "",
      "class Search${3:Users}Params extends SearchParams {",
      "  final bool paginated;",
      "  final int page;",
      "  final int pageSize;",
      "  final bool activeOnly;",
      "  final DateTime? createdAfter;",
      "  final DateTime? createdBefore;",
      "",
      "  const Search${3:Users}Params({",
      "    String? query,",
      "    Map<String, dynamic>? filters,",
      "    String? sortBy,",
      "    bool ascending = true,",
      "    int? limit,",
      "    int? offset,",
      "    this.paginated = false,",
      "    this.page = 1,",
      "    this.pageSize = 20,",
      "    this.activeOnly = false,",
      "    this.createdAfter,",
      "    this.createdBefore,",
      "  }) : super(",
      "          query: query,",
      "          filters: filters,",
      "          sortBy: sortBy,",
      "          ascending: ascending,",
      "          limit: limit,",
      "          offset: offset,",
      "        );",
      "",
      "  @override",
      "  List<Object?> get props => [",
      "        ...super.props,",
      "        paginated,",
      "        page,",
      "        pageSize,",
      "        activeOnly,",
      "        createdAfter,",
      "        createdBefore,",
      "      ];",
      "}",
      "",
      "class SearchResult<T> {",
      "  final List<T> items;",
      "  final int totalCount;",
      "  final bool hasMore;",
      "  final int? page;",
      "  final int? pageSize;",
      "",
      "  const SearchResult({",
      "    required this.items,",
      "    required this.totalCount,",
      "    required this.hasMore,",
      "    this.page,",
      "    this.pageSize,",
      "  });",
      "}",
      "$0"
    ]
  }
}
