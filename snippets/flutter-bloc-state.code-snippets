{
  "Complete BLoC Pattern": {
    "prefix": "flb-bloc-complete",
    "description": "Complete BLoC pattern with events, states, and widget integration",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_bloc/flutter_bloc.dart';",
      "import 'package:equatable/equatable.dart';",
      "",
      "// Events",
      "abstract class ${1:Counter}Event extends Equatable {",
      "  const ${1:Counter}Event();",
      "",
      "  @override",
      "  List<Object?> get props => [];",
      "}",
      "",
      "class ${1:Counter}Increment extends ${1:Counter}Event {",
      "  final int value;",
      "  const ${1:Counter}Increment({this.value = 1});",
      "",
      "  @override",
      "  List<Object?> get props => [value];",
      "}",
      "",
      "class ${1:Counter}Decrement extends ${1:Counter}Event {",
      "  final int value;",
      "  const ${1:Counter}Decrement({this.value = 1});",
      "",
      "  @override",
      "  List<Object?> get props => [value];",
      "}",
      "",
      "class ${1:Counter}Reset extends ${1:Counter}Event {}",
      "",
      "class ${1:Counter}LoadData extends ${1:Counter}Event {",
      "  final String? filter;",
      "  const ${1:Counter}LoadData({this.filter});",
      "",
      "  @override",
      "  List<Object?> get props => [filter];",
      "}",
      "",
      "// States",
      "abstract class ${1:Counter}State extends Equatable {",
      "  const ${1:Counter}State();",
      "",
      "  @override",
      "  List<Object?> get props => [];",
      "}",
      "",
      "class ${1:Counter}Initial extends ${1:Counter}State {}",
      "",
      "class ${1:Counter}Loading extends ${1:Counter}State {}",
      "",
      "class ${1:Counter}Loaded extends ${1:Counter}State {",
      "  final int count;",
      "  final List<${2:String}> data;",
      "  final bool hasReachedMax;",
      "",
      "  const ${1:Counter}Loaded({",
      "    required this.count,",
      "    this.data = const [],",
      "    this.hasReachedMax = false,",
      "  });",
      "",
      "  ${1:Counter}Loaded copyWith({",
      "    int? count,",
      "    List<${2:String}>? data,",
      "    bool? hasReachedMax,",
      "  }) {",
      "    return ${1:Counter}Loaded(",
      "      count: count ?? this.count,",
      "      data: data ?? this.data,",
      "      hasReachedMax: hasReachedMax ?? this.hasReachedMax,",
      "    );",
      "  }",
      "",
      "  @override",
      "  List<Object?> get props => [count, data, hasReachedMax];",
      "}",
      "",
      "class ${1:Counter}Error extends ${1:Counter}State {",
      "  final String message;",
      "  final String? errorCode;",
      "",
      "  const ${1:Counter}Error({",
      "    required this.message,",
      "    this.errorCode,",
      "  });",
      "",
      "  @override",
      "  List<Object?> get props => [message, errorCode];",
      "}",
      "",
      "// BLoC",
      "class ${1:Counter}Bloc extends Bloc<${1:Counter}Event, ${1:Counter}State> {",
      "  final ${3:Repository}? _repository;",
      "",
      "  ${1:Counter}Bloc({${3:Repository}? repository})",
      "      : _repository = repository,",
      "        super(${1:Counter}Initial()) {",
      "    on<${1:Counter}Increment>(_onIncrement);",
      "    on<${1:Counter}Decrement>(_onDecrement);",
      "    on<${1:Counter}Reset>(_onReset);",
      "    on<${1:Counter}LoadData>(_onLoadData);",
      "  }",
      "",
      "  Future<void> _onIncrement(",
      "    ${1:Counter}Increment event,",
      "    Emitter<${1:Counter}State> emit,",
      "  ) async {",
      "    final currentState = state;",
      "    if (currentState is ${1:Counter}Loaded) {",
      "      emit(currentState.copyWith(",
      "        count: currentState.count + event.value,",
      "      ));",
      "    } else {",
      "      emit(${1:Counter}Loaded(count: event.value));",
      "    }",
      "  }",
      "",
      "  Future<void> _onDecrement(",
      "    ${1:Counter}Decrement event,",
      "    Emitter<${1:Counter}State> emit,",
      "  ) async {",
      "    final currentState = state;",
      "    if (currentState is ${1:Counter}Loaded) {",
      "      final newCount = currentState.count - event.value;",
      "      emit(currentState.copyWith(",
      "        count: newCount < 0 ? 0 : newCount,",
      "      ));",
      "    }",
      "  }",
      "",
      "  Future<void> _onReset(",
      "    ${1:Counter}Reset event,",
      "    Emitter<${1:Counter}State> emit,",
      "  ) async {",
      "    emit(const ${1:Counter}Loaded(count: 0));",
      "  }",
      "",
      "  Future<void> _onLoadData(",
      "    ${1:Counter}LoadData event,",
      "    Emitter<${1:Counter}State> emit,",
      "  ) async {",
      "    try {",
      "      emit(${1:Counter}Loading());",
      "",
      "      // Simulate API call",
      "      await Future.delayed(const Duration(seconds: 1));",
      "",
      "      if (_repository != null) {",
      "        // final result = await _repository!.getData(event.filter);",
      "        // Handle result...",
      "      }",
      "",
      "      emit(const ${1:Counter}Loaded(",
      "        count: 0,",
      "        data: ['Sample', 'Data'],",
      "      ));",
      "    } catch (e) {",
      "      emit(${1:Counter}Error(",
      "        message: 'Failed to load data: \\$e',",
      "        errorCode: 'LOAD_ERROR',",
      "      ));",
      "    }",
      "  }",
      "}",
      "",
      "// Widget Integration",
      "class ${1:Counter}Page extends StatelessWidget {",
      "  const ${1:Counter}Page({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return BlocProvider(",
      "      create: (context) => ${1:Counter}Bloc()..add(${1:Counter}LoadData()),",
      "      child: const ${1:Counter}View(),",
      "    );",
      "  }",
      "}",
      "",
      "class ${1:Counter}View extends StatelessWidget {",
      "  const ${1:Counter}View({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('${4:Counter App}'),",
      "        actions: [",
      "          IconButton(",
      "            icon: const Icon(Icons.refresh),",
      "            onPressed: () => context.read<${1:Counter}Bloc>().add(${1:Counter}Reset()),",
      "          ),",
      "        ],",
      "      ),",
      "      body: BlocBuilder<${1:Counter}Bloc, ${1:Counter}State>(",
      "        builder: (context, state) {",
      "          return switch (state) {",
      "            ${1:Counter}Initial() => const Center(",
      "                child: Text('Press + to start counting'),",
      "              ),",
      "            ${1:Counter}Loading() => const Center(",
      "                child: CircularProgressIndicator(),",
      "              ),",
      "            ${1:Counter}Loaded() => Center(",
      "                child: Column(",
      "                  mainAxisAlignment: MainAxisAlignment.center,",
      "                  children: [",
      "                    Text(",
      "                      'Count: \\${state.count}',",
      "                      style: Theme.of(context).textTheme.headlineLarge,",
      "                    ),",
      "                    const SizedBox(height: 16),",
      "                    if (state.data.isNotEmpty) ...[",
      "                      const Text('Data:'),",
      "                      ...state.data.map((item) => Text('â€¢ \\$item')),",
      "                    ],",
      "                  ],",
      "                ),",
      "              ),",
      "            ${1:Counter}Error() => Center(",
      "                child: Column(",
      "                  mainAxisAlignment: MainAxisAlignment.center,",
      "                  children: [",
      "                    Icon(",
      "                      Icons.error_outline,",
      "                      size: 64,",
      "                      color: Theme.of(context).colorScheme.error,",
      "                    ),",
      "                    const SizedBox(height: 16),",
      "                    Text(",
      "                      'Error: \\${state.message}',",
      "                      style: TextStyle(",
      "                        color: Theme.of(context).colorScheme.error,",
      "                      ),",
      "                    ),",
      "                    const SizedBox(height: 16),",
      "                    ElevatedButton(",
      "                      onPressed: () => context.read<${1:Counter}Bloc>().add(${1:Counter}LoadData()),",
      "                      child: const Text('Retry'),",
      "                    ),",
      "                  ],",
      "                ),",
      "              ),",
      "          };",
      "        },",
      "      ),",
      "      floatingActionButton: BlocBuilder<${1:Counter}Bloc, ${1:Counter}State>(",
      "        builder: (context, state) {",
      "          if (state is ${1:Counter}Loading) {",
      "            return const SizedBox.shrink();",
      "          }",
      "",
      "          return Row(",
      "            mainAxisAlignment: MainAxisAlignment.end,",
      "            children: [",
      "              FloatingActionButton(",
      "                heroTag: 'decrement',",
      "                onPressed: () => context.read<${1:Counter}Bloc>().add(const ${1:Counter}Decrement()),",
      "                child: const Icon(Icons.remove),",
      "              ),",
      "              const SizedBox(width: 16),",
      "              FloatingActionButton(",
      "                heroTag: 'increment',",
      "                onPressed: () => context.read<${1:Counter}Bloc>().add(const ${1:Counter}Increment()),",
      "                child: const Icon(Icons.add),",
      "              ),",
      "            ],",
      "          );",
      "        },",
      "      ),",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "Simple Cubit": {
    "prefix": "flb-cubit",
    "description": "Simple Cubit for straightforward state management",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_bloc/flutter_bloc.dart';",
      "import 'package:equatable/equatable.dart';",
      "",
      "// State",
      "class ${1:Counter}State extends Equatable {",
      "  final int count;",
      "  final bool isLoading;",
      "  final String? error;",
      "",
      "  const ${1:Counter}State({",
      "    this.count = 0,",
      "    this.isLoading = false,",
      "    this.error,",
      "  });",
      "",
      "  ${1:Counter}State copyWith({",
      "    int? count,",
      "    bool? isLoading,",
      "    String? error,",
      "    bool clearError = false,",
      "  }) {",
      "    return ${1:Counter}State(",
      "      count: count ?? this.count,",
      "      isLoading: isLoading ?? this.isLoading,",
      "      error: clearError ? null : error ?? this.error,",
      "    );",
      "  }",
      "",
      "  @override",
      "  List<Object?> get props => [count, isLoading, error];",
      "}",
      "",
      "// Cubit",
      "class ${1:Counter}Cubit extends Cubit<${1:Counter}State> {",
      "  ${1:Counter}Cubit() : super(const ${1:Counter}State());",
      "",
      "  void increment([int value = 1]) {",
      "    emit(state.copyWith(",
      "      count: state.count + value,",
      "      clearError: true,",
      "    ));",
      "  }",
      "",
      "  void decrement([int value = 1]) {",
      "    final newCount = state.count - value;",
      "    emit(state.copyWith(",
      "      count: newCount < 0 ? 0 : newCount,",
      "      clearError: true,",
      "    ));",
      "  }",
      "",
      "  void reset() {",
      "    emit(state.copyWith(",
      "      count: 0,",
      "      clearError: true,",
      "    ));",
      "  }",
      "",
      "  Future<void> incrementAsync() async {",
      "    try {",
      "      emit(state.copyWith(isLoading: true, clearError: true));",
      "",
      "      // Simulate async operation",
      "      await Future.delayed(const Duration(seconds: 1));",
      "",
      "      emit(state.copyWith(",
      "        count: state.count + 1,",
      "        isLoading: false,",
      "      ));",
      "    } catch (e) {",
      "      emit(state.copyWith(",
      "        isLoading: false,",
      "        error: 'Failed to increment: \\$e',",
      "      ));",
      "    }",
      "  }",
      "",
      "  Future<void> loadData() async {",
      "    try {",
      "      emit(state.copyWith(isLoading: true, clearError: true));",
      "",
      "      // Simulate data loading",
      "      await Future.delayed(const Duration(seconds: 2));",
      "",
      "      // Simulate potential error",
      "      if (DateTime.now().millisecond % 2 == 0) {",
      "        throw Exception('Random error occurred');",
      "      }",
      "",
      "      emit(state.copyWith(",
      "        count: 42, // Loaded value",
      "        isLoading: false,",
      "      ));",
      "    } catch (e) {",
      "      emit(state.copyWith(",
      "        isLoading: false,",
      "        error: e.toString(),",
      "      ));",
      "    }",
      "  }",
      "}",
      "",
      "// Widget Integration",
      "class ${1:Counter}CubitPage extends StatelessWidget {",
      "  const ${1:Counter}CubitPage({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return BlocProvider(",
      "      create: (context) => ${1:Counter}Cubit(),",
      "      child: const ${1:Counter}CubitView(),",
      "    );",
      "  }",
      "}",
      "",
      "class ${1:Counter}CubitView extends StatelessWidget {",
      "  const ${1:Counter}CubitView({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('${2:Cubit Counter}'),",
      "        actions: [",
      "          BlocBuilder<${1:Counter}Cubit, ${1:Counter}State>(",
      "            builder: (context, state) {",
      "              return IconButton(",
      "                icon: Icon(",
      "                  state.isLoading ? Icons.hourglass_empty : Icons.refresh,",
      "                ),",
      "                onPressed: state.isLoading",
      "                    ? null",
      "                    : () => context.read<${1:Counter}Cubit>().loadData(),",
      "              );",
      "            },",
      "          ),",
      "        ],",
      "      ),",
      "      body: BlocConsumer<${1:Counter}Cubit, ${1:Counter}State>(",
      "        listener: (context, state) {",
      "          if (state.error != null) {",
      "            ScaffoldMessenger.of(context).showSnackBar(",
      "              SnackBar(",
      "                content: Text(state.error!),",
      "                backgroundColor: Theme.of(context).colorScheme.error,",
      "                action: SnackBarAction(",
      "                  label: 'Retry',",
      "                  onPressed: () => context.read<${1:Counter}Cubit>().loadData(),",
      "                ),",
      "              ),",
      "            );",
      "          }",
      "        },",
      "        builder: (context, state) {",
      "          return Center(",
      "            child: Column(",
      "              mainAxisAlignment: MainAxisAlignment.center,",
      "              children: [",
      "                if (state.isLoading)",
      "                  const CircularProgressIndicator()",
      "                else",
      "                  Text(",
      "                    'Count: \\${state.count}',",
      "                    style: Theme.of(context).textTheme.headlineLarge,",
      "                  ),",
      "                const SizedBox(height: 32),",
      "                Row(",
      "                  mainAxisAlignment: MainAxisAlignment.center,",
      "                  children: [",
      "                    ElevatedButton(",
      "                      onPressed: state.isLoading",
      "                          ? null",
      "                          : () => context.read<${1:Counter}Cubit>().decrement(),",
      "                      child: const Icon(Icons.remove),",
      "                    ),",
      "                    const SizedBox(width: 16),",
      "                    ElevatedButton(",
      "                      onPressed: state.isLoading",
      "                          ? null",
      "                          : () => context.read<${1:Counter}Cubit>().increment(),",
      "                      child: const Icon(Icons.add),",
      "                    ),",
      "                  ],",
      "                ),",
      "                const SizedBox(height: 16),",
      "                ElevatedButton(",
      "                  onPressed: state.isLoading",
      "                      ? null",
      "                      : () => context.read<${1:Counter}Cubit>().incrementAsync(),",
      "                  child: const Text('Async Increment'),",
      "                ),",
      "                const SizedBox(height: 16),",
      "                TextButton(",
      "                  onPressed: state.isLoading",
      "                      ? null",
      "                      : () => context.read<${1:Counter}Cubit>().reset(),",
      "                  child: const Text('Reset'),",
      "                ),",
      "              ],",
      "            ),",
      "          );",
      "        },",
      "      ),",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "BLoC Consumer Widget": {
    "prefix": "flb-consumer",
    "description": "BLoC Consumer with listener and builder",
    "body": [
      "BlocConsumer<${1:Counter}Bloc, ${1:Counter}State>(",
      "  listener: (context, state) {",
      "    if (state is ${1:Counter}Error) {",
      "      ScaffoldMessenger.of(context).showSnackBar(",
      "        SnackBar(",
      "          content: Text(state.message),",
      "          backgroundColor: Theme.of(context).colorScheme.error,",
      "          action: SnackBarAction(",
      "            label: '${2:Retry}',",
      "            onPressed: () {",
      "              ${3:// Add retry logic}",
      "            },",
      "          ),",
      "        ),",
      "      );",
      "    } else if (state is ${1:Counter}Loaded) {",
      "      ${4:// Handle success state}",
      "    }",
      "  },",
      "  builder: (context, state) {",
      "    return switch (state) {",
      "      ${1:Counter}Initial() => const Center(",
      "          child: Text('${5:Initial state}'),",
      "        ),",
      "      ${1:Counter}Loading() => const Center(",
      "          child: CircularProgressIndicator(),",
      "        ),",
      "      ${1:Counter}Loaded() => ${6:Widget}(",
      "          ${7:// Your loaded state widget}",
      "        ),",
      "      ${1:Counter}Error() => Center(",
      "          child: Column(",
      "            mainAxisAlignment: MainAxisAlignment.center,",
      "            children: [",
      "              Icon(",
      "                Icons.error_outline,",
      "                size: 64,",
      "                color: Theme.of(context).colorScheme.error,",
      "              ),",
      "              const SizedBox(height: 16),",
      "              Text(",
      "                state.message,",
      "                textAlign: TextAlign.center,",
      "                style: TextStyle(",
      "                  color: Theme.of(context).colorScheme.error,",
      "                ),",
      "              ),",
      "              const SizedBox(height: 16),",
      "              ElevatedButton(",
      "                onPressed: () {",
      "                  ${8:// Retry action}",
      "                },",
      "                child: const Text('${9:Retry}'),",
      "              ),",
      "            ],",
      "          ),",
      "        ),",
      "    };",
      "  },",
      ")$0"
    ]
  },

  "BLoC Builder Widget": {
    "prefix": "flb-builder",
    "description": "Simple BLoC Builder for state-based UI",
    "body": [
      "BlocBuilder<${1:Counter}Bloc, ${1:Counter}State>(",
      "  buildWhen: (previous, current) {",
      "    ${2:// Optional: control when to rebuild}",
      "    return ${3:true};",
      "  },",
      "  builder: (context, state) {",
      "    ${4:// Build UI based on state}",
      "    return ${5:Container}(",
      "      ${6:// Your widget content}",
      "    );",
      "  },",
      ")$0"
    ]
  },

  "BLoC Listener Widget": {
    "prefix": "flb-listener",
    "description": "BLoC Listener for side effects",
    "body": [
      "BlocListener<${1:Counter}Bloc, ${1:Counter}State>(",
      "  listenWhen: (previous, current) {",
      "    ${2:// Optional: control when to listen}",
      "    return ${3:true};",
      "  },",
      "  listener: (context, state) {",
      "    if (state is ${1:Counter}Error) {",
      "      ${4:// Handle error state}",
      "      ScaffoldMessenger.of(context).showSnackBar(",
      "        SnackBar(",
      "          content: Text(state.message),",
      "          backgroundColor: Theme.of(context).colorScheme.error,",
      "        ),",
      "      );",
      "    } else if (state is ${1:Counter}Loaded) {",
      "      ${5:// Handle loaded state}",
      "    }",
      "  },",
      "  child: ${6:Widget}(",
      "    ${7:// Your child widget}",
      "  ),",
      ")$0"
    ]
  },

  "Multi BLoC Provider": {
    "prefix": "flb-multi-provider",
    "description": "Multiple BLoC providers for complex state management",
    "body": [
      "MultiBlocProvider(",
      "  providers: [",
      "    BlocProvider(",
      "      create: (context) => ${1:Auth}Bloc(",
      "        ${2:authRepository}: context.read<${3:AuthRepository}>(),",
      "      ),",
      "    ),",
      "    BlocProvider(",
      "      create: (context) => ${4:User}Cubit(",
      "        ${5:userRepository}: context.read<${6:UserRepository}>(),",
      "      ),",
      "    ),",
      "    BlocProvider(",
      "      create: (context) => ${7:Theme}Cubit(),",
      "    ),",
      "    ${8:// Add more providers as needed}",
      "  ],",
      "  child: ${9:MaterialApp}(",
      "    ${10:// Your app content}",
      "  ),",
      ")$0"
    ]
  }
}
