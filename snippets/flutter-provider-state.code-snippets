{
  "Provider ChangeNotifier": {
    "prefix": "flp-provider",
    "description": "Complete Provider pattern with ChangeNotifier",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:provider/provider.dart';",
      "",
      "// Model with ChangeNotifier",
      "class ${1:Counter}Provider extends ChangeNotifier {",
      "  int _count = 0;",
      "  bool _isLoading = false;",
      "  String? _error;",
      "  List<${2:String}> _data = [];",
      "",
      "  // Getters",
      "  int get count => _count;",
      "  bool get isLoading => _isLoading;",
      "  String? get error => _error;",
      "  List<${2:String}> get data => List.unmodifiable(_data);",
      "  bool get hasError => _error != null;",
      "  bool get hasData => _data.isNotEmpty;",
      "",
      "  // Private setters with notification",
      "  set _setCount(int value) {",
      "    _count = value;",
      "    notifyListeners();",
      "  }",
      "",
      "  set _setLoading(bool value) {",
      "    _isLoading = value;",
      "    notifyListeners();",
      "  }",
      "",
      "  set _setError(String? value) {",
      "    _error = value;",
      "    notifyListeners();",
      "  }",
      "",
      "  set _setData(List<${2:String}> value) {",
      "    _data = value;",
      "    notifyListeners();",
      "  }",
      "",
      "  // Public methods",
      "  void increment([int value = 1]) {",
      "    _setCount = _count + value;",
      "    _clearError();",
      "  }",
      "",
      "  void decrement([int value = 1]) {",
      "    final newCount = _count - value;",
      "    _setCount = newCount < 0 ? 0 : newCount;",
      "    _clearError();",
      "  }",
      "",
      "  void reset() {",
      "    _setCount = 0;",
      "    _setData = [];",
      "    _clearError();",
      "  }",
      "",
      "  void _clearError() {",
      "    if (_error != null) {",
      "      _setError = null;",
      "    }",
      "  }",
      "",
      "  // Async operations",
      "  Future<void> incrementAsync([int value = 1]) async {",
      "    try {",
      "      _setLoading = true;",
      "      _clearError();",
      "",
      "      // Simulate API call",
      "      await Future.delayed(const Duration(seconds: 1));",
      "",
      "      _setCount = _count + value;",
      "    } catch (e) {",
      "      _setError = 'Failed to increment: \\$e';",
      "    } finally {",
      "      _setLoading = false;",
      "    }",
      "  }",
      "",
      "  Future<void> loadData() async {",
      "    try {",
      "      _setLoading = true;",
      "      _clearError();",
      "",
      "      // Simulate data loading",
      "      await Future.delayed(const Duration(seconds: 2));",
      "",
      "      // Simulate potential error",
      "      if (DateTime.now().millisecond % 3 == 0) {",
      "        throw Exception('Random network error');",
      "      }",
      "",
      "      _setData = ['Item 1', 'Item 2', 'Item 3'];",
      "      _setCount = _data.length;",
      "    } catch (e) {",
      "      _setError = 'Failed to load data: \\$e';",
      "    } finally {",
      "      _setLoading = false;",
      "    }",
      "  }",
      "",
      "  Future<void> addItem(${2:String} item) async {",
      "    try {",
      "      _setLoading = true;",
      "      _clearError();",
      "",
      "      // Simulate API call",
      "      await Future.delayed(const Duration(milliseconds: 500));",
      "",
      "      final newData = [..._data, item];",
      "      _setData = newData;",
      "      _setCount = newData.length;",
      "    } catch (e) {",
      "      _setError = 'Failed to add item: \\$e';",
      "    } finally {",
      "      _setLoading = false;",
      "    }",
      "  }",
      "",
      "  void removeItem(${2:String} item) {",
      "    final newData = _data.where((d) => d != item).toList();",
      "    _setData = newData;",
      "    _setCount = newData.length;",
      "    _clearError();",
      "  }",
      "}",
      "",
      "// Widget Integration",
      "class ${1:Counter}ProviderPage extends StatelessWidget {",
      "  const ${1:Counter}ProviderPage({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ChangeNotifierProvider(",
      "      create: (context) => ${1:Counter}Provider()..loadData(),",
      "      child: const ${1:Counter}ProviderView(),",
      "    );",
      "  }",
      "}",
      "",
      "class ${1:Counter}ProviderView extends StatelessWidget {",
      "  const ${1:Counter}ProviderView({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('${3:Provider Counter}'),",
      "        actions: [",
      "          Consumer<${1:Counter}Provider>(",
      "            builder: (context, provider, child) {",
      "              return IconButton(",
      "                icon: Icon(",
      "                  provider.isLoading ? Icons.hourglass_empty : Icons.refresh,",
      "                ),",
      "                onPressed: provider.isLoading ? null : () => provider.loadData(),",
      "              );",
      "            },",
      "          ),",
      "        ],",
      "      ),",
      "      body: Consumer<${1:Counter}Provider>(",
      "        builder: (context, provider, child) {",
      "          // Show error snackbar when error occurs",
      "          if (provider.hasError) {",
      "            WidgetsBinding.instance.addPostFrameCallback((_) {",
      "              ScaffoldMessenger.of(context).showSnackBar(",
      "                SnackBar(",
      "                  content: Text(provider.error!),",
      "                  backgroundColor: Theme.of(context).colorScheme.error,",
      "                  action: SnackBarAction(",
      "                    label: 'Retry',",
      "                    onPressed: () => provider.loadData(),",
      "                  ),",
      "                ),",
      "              );",
      "            });",
      "          }",
      "",
      "          return SingleChildScrollView(",
      "            padding: const EdgeInsets.all(16),",
      "            child: Column(",
      "              crossAxisAlignment: CrossAxisAlignment.stretch,",
      "              children: [",
      "                // Counter Display",
      "                Card(",
      "                  child: Padding(",
      "                    padding: const EdgeInsets.all(16),",
      "                    child: Column(",
      "                      children: [",
      "                        Text(",
      "                          'Count',",
      "                          style: Theme.of(context).textTheme.titleMedium,",
      "                        ),",
      "                        const SizedBox(height: 8),",
      "                        if (provider.isLoading)",
      "                          const CircularProgressIndicator()",
      "                        else",
      "                          Text(",
      "                            '\\${provider.count}',",
      "                            style: Theme.of(context).textTheme.headlineLarge,",
      "                          ),",
      "                      ],",
      "                    ),",
      "                  ),",
      "                ),",
      "                const SizedBox(height: 16),",
      "",
      "                // Action Buttons",
      "                Row(",
      "                  children: [",
      "                    Expanded(",
      "                      child: ElevatedButton(",
      "                        onPressed: provider.isLoading ? null : () => provider.decrement(),",
      "                        child: const Icon(Icons.remove),",
      "                      ),",
      "                    ),",
      "                    const SizedBox(width: 16),",
      "                    Expanded(",
      "                      child: ElevatedButton(",
      "                        onPressed: provider.isLoading ? null : () => provider.increment(),",
      "                        child: const Icon(Icons.add),",
      "                      ),",
      "                    ),",
      "                  ],",
      "                ),",
      "                const SizedBox(height: 16),",
      "",
      "                // Async Actions",
      "                Row(",
      "                  children: [",
      "                    Expanded(",
      "                      child: ElevatedButton(",
      "                        onPressed: provider.isLoading ? null : () => provider.incrementAsync(5),",
      "                        child: const Text('Async +5'),",
      "                      ),",
      "                    ),",
      "                    const SizedBox(width: 16),",
      "                    Expanded(",
      "                      child: OutlinedButton(",
      "                        onPressed: provider.isLoading ? null : () => provider.reset(),",
      "                        child: const Text('Reset'),",
      "                      ),",
      "                    ),",
      "                  ],",
      "                ),",
      "                const SizedBox(height: 24),",
      "",
      "                // Data List",
      "                if (provider.hasData) ...[",
      "                  Text(",
      "                    'Data Items',",
      "                    style: Theme.of(context).textTheme.titleLarge,",
      "                  ),",
      "                  const SizedBox(height: 8),",
      "                  ...provider.data.map(",
      "                    (item) => Card(",
      "                      child: ListTile(",
      "                        title: Text(item),",
      "                        trailing: IconButton(",
      "                          icon: const Icon(Icons.delete),",
      "                          onPressed: provider.isLoading",
      "                              ? null",
      "                              : () => provider.removeItem(item),",
      "                        ),",
      "                      ),",
      "                    ),",
      "                  ),",
      "                  const SizedBox(height: 16),",
      "                  ElevatedButton(",
      "                    onPressed: provider.isLoading",
      "                        ? null",
      "                        : () => provider.addItem('New Item \\${provider.data.length + 1}'),",
      "                    child: const Text('Add Item'),",
      "                  ),",
      "                ],",
      "              ],",
      "            ),",
      "          );",
      "        },",
      "      ),",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "Multi Provider Setup": {
    "prefix": "flp-multi-provider",
    "description": "Multiple providers setup for complex state management",
    "body": [
      "MultiProvider(",
      "  providers: [",
      "    ChangeNotifierProvider(",
      "      create: (context) => ${1:Auth}Provider(),",
      "    ),",
      "    ChangeNotifierProvider(",
      "      create: (context) => ${2:Theme}Provider(),",
      "    ),",
      "    ChangeNotifierProxyProvider<${1:Auth}Provider, ${3:User}Provider>(",
      "      create: (context) => ${3:User}Provider(),",
      "      update: (context, auth, user) => user!..updateAuth(auth),",
      "    ),",
      "    Provider<${4:ApiService}>(",
      "      create: (context) => ${4:ApiService}(),",
      "    ),",
      "    ${5:// Add more providers as needed}",
      "  ],",
      "  child: ${6:MaterialApp}(",
      "    ${7:// Your app content}",
      "  ),",
      ")$0"
    ]
  },

  "Provider Consumer Widget": {
    "prefix": "flp-consumer",
    "description": "Provider Consumer for listening to state changes",
    "body": [
      "Consumer<${1:Counter}Provider>(",
      "  builder: (context, ${2:provider}, child) {",
      "    return ${3:Widget}(",
      "      ${4:// Use provider data here}",
      "      ${5:// Example: provider.count, provider.isLoading, etc.}",
      "    );",
      "  },",
      ")$0"
    ]
  },

  "Provider Selector Widget": {
    "prefix": "flp-selector",
    "description": "Provider Selector for optimized rebuilds",
    "body": [
      "Selector<${1:Counter}Provider, ${2:int}>(",
      "  selector: (context, provider) => provider.${3:count},",
      "  builder: (context, ${4:value}, child) {",
      "    return ${5:Text}(",
      "      '${6:Count: \\$${4:value}}',",
      "      ${7:// Additional properties}",
      "    );",
      "  },",
      ")$0"
    ]
  },

  "Provider Context Extension": {
    "prefix": "flp-extension",
    "description": "Context extension for easier Provider access",
    "body": [
      "extension ${1:Counter}ProviderExtension on BuildContext {",
      "  ${1:Counter}Provider get ${2:counter}Provider => read<${1:Counter}Provider>();",
      "  ${1:Counter}Provider get ${2:counter}ProviderWatch => watch<${1:Counter}Provider>();",
      "",
      "  // Quick access methods",
      "  int get ${2:counter}Count => watch<${1:Counter}Provider>().count;",
      "  bool get ${2:counter}IsLoading => watch<${1:Counter}Provider>().isLoading;",
      "  String? get ${2:counter}Error => watch<${1:Counter}Provider>().error;",
      "",
      "  // Action methods",
      "  void ${2:counter}Increment([int value = 1]) => read<${1:Counter}Provider>().increment(value);",
      "  void ${2:counter}Decrement([int value = 1]) => read<${1:Counter}Provider>().decrement(value);",
      "  void ${2:counter}Reset() => read<${1:Counter}Provider>().reset();",
      "  Future<void> ${2:counter}LoadData() => read<${1:Counter}Provider>().loadData();",
      "}",
      "",
      "// Usage example:",
      "// context.${2:counter}Increment();",
      "// Text('\\${context.${2:counter}Count}');",
      "$0"
    ]
  }
}
