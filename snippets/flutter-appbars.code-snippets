{
  "Search AppBar": {
    "prefix": "flap-search",
    "description": "AppBar with search functionality",
    "body": [
      "class ${1:Search}AppBar extends StatefulWidget implements PreferredSizeWidget {",
      "  const ${1:Search}AppBar({",
      "    super.key,",
      "    required this.onSearch,",
      "    this.title = 'Search',",
      "    this.hintText = 'Search...',",
      "    this.actions,",
      "  });",
      "",
      "  final Function(String) onSearch;",
      "  final String title;",
      "  final String hintText;",
      "  final List<Widget>? actions;",
      "",
      "  @override",
      "  Size get preferredSize => const Size.fromHeight(kToolbarHeight);",
      "",
      "  @override",
      "  State<${1:Search}AppBar> createState() => _${1:Search}AppBarState();",
      "}",
      "",
      "class _${1:Search}AppBarState extends State<${1:Search}AppBar> {",
      "  bool _isSearching = false;",
      "  final TextEditingController _searchController = TextEditingController();",
      "  final FocusNode _searchFocusNode = FocusNode();",
      "",
      "  @override",
      "  void dispose() {",
      "    _searchController.dispose();",
      "    _searchFocusNode.dispose();",
      "    super.dispose();",
      "  }",
      "",
      "  void _startSearch() {",
      "    setState(() {",
      "      _isSearching = true;",
      "    });",
      "    _searchFocusNode.requestFocus();",
      "  }",
      "",
      "  void _stopSearch() {",
      "    setState(() {",
      "      _isSearching = false;",
      "    });",
      "    _searchController.clear();",
      "    widget.onSearch('');",
      "    _searchFocusNode.unfocus();",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return AppBar(",
      "      backgroundColor: Theme.of(context).colorScheme.inversePrimary,",
      "      elevation: 0,",
      "      title: _isSearching",
      "          ? TextField(",
      "              controller: _searchController,",
      "              focusNode: _searchFocusNode,",
      "              onChanged: widget.onSearch,",
      "              style: Theme.of(context).textTheme.titleMedium,",
      "              decoration: InputDecoration(",
      "                hintText: widget.hintText,",
      "                border: InputBorder.none,",
      "                hintStyle: Theme.of(context).textTheme.titleMedium?.copyWith(",
      "                  color: Theme.of(context).colorScheme.onSurface.withOpacity(0.6),",
      "                ),",
      "              ),",
      "            )",
      "          : Text(widget.title),",
      "      leading: _isSearching",
      "          ? IconButton(",
      "              icon: const Icon(Icons.arrow_back),",
      "              onPressed: _stopSearch,",
      "            )",
      "          : null,",
      "      actions: _isSearching",
      "          ? [",
      "              IconButton(",
      "                icon: const Icon(Icons.clear),",
      "                onPressed: () {",
      "                  _searchController.clear();",
      "                  widget.onSearch('');",
      "                },",
      "              ),",
      "            ]",
      "          : [",
      "              IconButton(",
      "                icon: const Icon(Icons.search),",
      "                onPressed: _startSearch,",
      "              ),",
      "              if (widget.actions != null) ...widget.actions!,",
      "            ],",
      "    );",
      "  }",
      "}$0"
    ]
  },

  "Profile AppBar": {
    "prefix": "flap-profile",
    "description": "AppBar with profile avatar and actions",
    "body": [
      "AppBar(",
      "  backgroundColor: Theme.of(context).colorScheme.surface,",
      "  elevation: 0,",
      "  scrolledUnderElevation: 1,",
      "  title: Column(",
      "    crossAxisAlignment: CrossAxisAlignment.start,",
      "    children: [",
      "      Text(",
      "        '${1:Welcome back}',",
      "        style: Theme.of(context).textTheme.bodySmall?.copyWith(",
      "          color: Theme.of(context).colorScheme.onSurface.withOpacity(0.7),",
      "        ),",
      "      ),",
      "      Text(",
      "        '${2:User Name}',",
      "        style: Theme.of(context).textTheme.titleMedium?.copyWith(",
      "          fontWeight: FontWeight.bold,",
      "        ),",
      "      ),",
      "    ],",
      "  ),",
      "  leading: Padding(",
      "    padding: const EdgeInsets.all(8.0),",
      "    child: GestureDetector(",
      "      onTap: () {",
      "        ${3:// Handle profile tap}",
      "        Navigator.of(context).push(",
      "          MaterialPageRoute(",
      "            builder: (context) => ${4:ProfilePage}(),",
      "          ),",
      "        );",
      "      },",
      "      child: CircleAvatar(",
      "        backgroundColor: Theme.of(context).colorScheme.primaryContainer,",
      "        backgroundImage: ${5:const NetworkImage('https://example.com/avatar.jpg'),}",
      "        child: ${6:Text(",
      "          'UN',",
      "          style: TextStyle(",
      "            color: Theme.of(context).colorScheme.onPrimaryContainer,",
      "            fontWeight: FontWeight.bold,",
      "          ),",
      "        ),}",
      "      ),",
      "    ),",
      "  ),",
      "  actions: [",
      "    IconButton(",
      "      icon: Badge(",
      "        label: const Text('${7:3}'),",
      "        backgroundColor: Theme.of(context).colorScheme.error,",
      "        child: const Icon(Icons.notifications_outlined),",
      "      ),",
      "      onPressed: () {",
      "        ${8:// Handle notifications}",
      "      },",
      "    ),",
      "    PopupMenuButton<String>(",
      "      icon: const Icon(Icons.more_vert),",
      "      onSelected: (value) {",
      "        ${9:// Handle menu selection}",
      "      },",
      "      itemBuilder: (context) => [",
      "        const PopupMenuItem(",
      "          value: 'settings',",
      "          child: ListTile(",
      "            leading: Icon(Icons.settings),",
      "            title: Text('Settings'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'help',",
      "          child: ListTile(",
      "            leading: Icon(Icons.help),",
      "            title: Text('Help'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'logout',",
      "          child: ListTile(",
      "            leading: Icon(Icons.logout),",
      "            title: Text('Logout'),",
      "          ),",
      "        ),",
      "      ],",
      "    ),",
      "  ],",
      ")$0"
    ]
  },

  "Shopping AppBar": {
    "prefix": "flap-shopping",
    "description": "AppBar for e-commerce with cart and search",
    "body": [
      "AppBar(",
      "  backgroundColor: Theme.of(context).colorScheme.surface,",
      "  elevation: 0,",
      "  scrolledUnderElevation: 2,",
      "  title: Text(",
      "    '${1:Shop Name}',",
      "    style: Theme.of(context).textTheme.headlineSmall?.copyWith(",
      "      fontWeight: FontWeight.bold,",
      "      color: Theme.of(context).colorScheme.primary,",
      "    ),",
      "  ),",
      "  centerTitle: true,",
      "  actions: [",
      "    IconButton(",
      "      icon: const Icon(Icons.search_outlined),",
      "      onPressed: () {",
      "        ${2:// Handle search}",
      "        showSearch(",
      "          context: context,",
      "          delegate: ${3:ProductSearchDelegate}(),",
      "        );",
      "      },",
      "    ),",
      "    IconButton(",
      "      icon: Badge(",
      "        label: const Text('${4:2}'),",
      "        backgroundColor: Theme.of(context).colorScheme.error,",
      "        textColor: Theme.of(context).colorScheme.onError,",
      "        child: const Icon(Icons.favorite_outline),",
      "      ),",
      "      onPressed: () {",
      "        ${5:// Handle favorites}",
      "        Navigator.of(context).push(",
      "          MaterialPageRoute(",
      "            builder: (context) => ${6:FavoritesPage}(),",
      "          ),",
      "        );",
      "      },",
      "    ),",
      "    IconButton(",
      "      icon: Badge(",
      "        label: const Text('${7:5}'),",
      "        backgroundColor: Theme.of(context).colorScheme.primary,",
      "        textColor: Theme.of(context).colorScheme.onPrimary,",
      "        child: const Icon(Icons.shopping_cart_outlined),",
      "      ),",
      "      onPressed: () {",
      "        ${8:// Handle cart}",
      "        Navigator.of(context).push(",
      "          MaterialPageRoute(",
      "            builder: (context) => ${9:CartPage}(),",
      "          ),",
      "        );",
      "      },",
      "    ),",
      "    const SizedBox(width: 8),",
      "  ],",
      ")$0"
    ]
  },

  "Chat AppBar": {
    "prefix": "flap-chat",
    "description": "AppBar for chat interface with online status",
    "body": [
      "AppBar(",
      "  backgroundColor: Theme.of(context).colorScheme.surface,",
      "  elevation: 1,",
      "  leading: IconButton(",
      "    icon: const Icon(Icons.arrow_back),",
      "    onPressed: () => Navigator.of(context).pop(),",
      "  ),",
      "  title: GestureDetector(",
      "    onTap: () {",
      "      ${1:// Handle profile tap}",
      "      Navigator.of(context).push(",
      "        MaterialPageRoute(",
      "          builder: (context) => ${2:ContactProfilePage}(),",
      "        ),",
      "      );",
      "    },",
      "    child: Row(",
      "      children: [",
      "        Stack(",
      "          children: [",
      "            CircleAvatar(",
      "              radius: 20,",
      "              backgroundColor: Theme.of(context).colorScheme.primaryContainer,",
      "              backgroundImage: ${3:const NetworkImage('https://example.com/contact.jpg'),}",
      "              child: ${4:Text(",
      "                'JD',",
      "                style: TextStyle(",
      "                  color: Theme.of(context).colorScheme.onPrimaryContainer,",
      "                  fontWeight: FontWeight.bold,",
      "                ),",
      "              ),}",
      "            ),",
      "            Positioned(",
      "              right: 0,",
      "              bottom: 0,",
      "              child: Container(",
      "                width: 12,",
      "                height: 12,",
      "                decoration: BoxDecoration(",
      "                  color: ${5:Colors.green}, // Online status",
      "                  shape: BoxShape.circle,",
      "                  border: Border.all(",
      "                    color: Theme.of(context).colorScheme.surface,",
      "                    width: 2,",
      "                  ),",
      "                ),",
      "              ),",
      "            ),",
      "          ],",
      "        ),",
      "        const SizedBox(width: 12),",
      "        Expanded(",
      "          child: Column(",
      "            crossAxisAlignment: CrossAxisAlignment.start,",
      "            children: [",
      "              Text(",
      "                '${6:Contact Name}',",
      "                style: Theme.of(context).textTheme.titleMedium?.copyWith(",
      "                  fontWeight: FontWeight.w600,",
      "                ),",
      "              ),",
      "              Text(",
      "                '${7:Online}',",
      "                style: Theme.of(context).textTheme.bodySmall?.copyWith(",
      "                  color: ${5:Colors.green},",
      "                ),",
      "              ),",
      "            ],",
      "          ),",
      "        ),",
      "      ],",
      "    ),",
      "  ),",
      "  actions: [",
      "    IconButton(",
      "      icon: const Icon(Icons.videocam_outlined),",
      "      onPressed: () {",
      "        ${8:// Handle video call}",
      "      },",
      "    ),",
      "    IconButton(",
      "      icon: const Icon(Icons.call_outlined),",
      "      onPressed: () {",
      "        ${9:// Handle voice call}",
      "      },",
      "    ),",
      "    PopupMenuButton<String>(",
      "      onSelected: (value) {",
      "        ${10:// Handle menu selection}",
      "      },",
      "      itemBuilder: (context) => [",
      "        const PopupMenuItem(",
      "          value: 'view_contact',",
      "          child: ListTile(",
      "            leading: Icon(Icons.person),",
      "            title: Text('View contact'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'media',",
      "          child: ListTile(",
      "            leading: Icon(Icons.photo),",
      "            title: Text('Media, links, and docs'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'search',",
      "          child: ListTile(",
      "            leading: Icon(Icons.search),",
      "            title: Text('Search'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'mute',",
      "          child: ListTile(",
      "            leading: Icon(Icons.volume_off),",
      "            title: Text('Mute notifications'),",
      "          ),",
      "        ),",
      "      ],",
      "    ),",
      "  ],",
      ")$0"
    ]
  },

  "Settings AppBar": {
    "prefix": "flap-settings",
    "description": "AppBar for settings page with back navigation",
    "body": [
      "AppBar(",
      "  backgroundColor: Theme.of(context).colorScheme.surface,",
      "  elevation: 0,",
      "  scrolledUnderElevation: 1,",
      "  leading: IconButton(",
      "    icon: const Icon(Icons.arrow_back),",
      "    onPressed: () => Navigator.of(context).pop(),",
      "  ),",
      "  title: Text(",
      "    '${1:Settings}',",
      "    style: Theme.of(context).textTheme.titleLarge?.copyWith(",
      "      fontWeight: FontWeight.w600,",
      "    ),",
      "  ),",
      "  centerTitle: ${2:false},",
      "  actions: [",
      "    IconButton(",
      "      icon: const Icon(Icons.help_outline),",
      "      tooltip: 'Help',",
      "      onPressed: () {",
      "        ${3:// Show help}",
      "        showDialog(",
      "          context: context,",
      "          builder: (context) => AlertDialog(",
      "            title: const Text('Help'),",
      "            content: const Text('${4:Settings help information goes here.}'),",
      "            actions: [",
      "              TextButton(",
      "                onPressed: () => Navigator.pop(context),",
      "                child: const Text('OK'),",
      "              ),",
      "            ],",
      "          ),",
      "        );",
      "      },",
      "    ),",
      "    IconButton(",
      "      icon: const Icon(Icons.info_outline),",
      "      tooltip: 'About',",
      "      onPressed: () {",
      "        ${5:// Show about}",
      "        showAboutDialog(",
      "          context: context,",
      "          applicationName: '${6:App Name}',",
      "          applicationVersion: '${7:1.0.0}',",
      "          applicationIcon: const Icon(",
      "            Icons.${8:settings},",
      "            size: 32,",
      "          ),",
      "          children: [",
      "            const Text('${9:Additional information about the app.}'),",
      "          ],",
      "        );",
      "      },",
      "    ),",
      "  ],",
      ")$0"
    ]
  },

  "Dashboard AppBar": {
    "prefix": "flap-dashboard",
    "description": "AppBar for dashboard with date and quick actions",
    "body": [
      "AppBar(",
      "  backgroundColor: Theme.of(context).colorScheme.surface,",
      "  elevation: 0,",
      "  flexibleSpace: Container(",
      "    decoration: BoxDecoration(",
      "      gradient: LinearGradient(",
      "        begin: Alignment.topLeft,",
      "        end: Alignment.bottomRight,",
      "        colors: [",
      "          Theme.of(context).colorScheme.primary.withOpacity(0.1),",
      "          Theme.of(context).colorScheme.secondary.withOpacity(0.1),",
      "        ],",
      "      ),",
      "    ),",
      "  ),",
      "  title: Column(",
      "    crossAxisAlignment: CrossAxisAlignment.start,",
      "    children: [",
      "      Text(",
      "        '${1:Dashboard}',",
      "        style: Theme.of(context).textTheme.titleLarge?.copyWith(",
      "          fontWeight: FontWeight.bold,",
      "        ),",
      "      ),",
      "      Text(",
      "        '${2:Today, ${DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year}}',",
      "        style: Theme.of(context).textTheme.bodySmall?.copyWith(",
      "          color: Theme.of(context).colorScheme.onSurface.withOpacity(0.7),",
      "        ),",
      "      ),",
      "    ],",
      "  ),",
      "  actions: [",
      "    IconButton(",
      "      icon: const Icon(Icons.calendar_today_outlined),",
      "      tooltip: 'Calendar',",
      "      onPressed: () {",
      "        ${3:// Open calendar}",
      "        Navigator.of(context).push(",
      "          MaterialPageRoute(",
      "            builder: (context) => ${4:CalendarPage}(),",
      "          ),",
      "        );",
      "      },",
      "    ),",
      "    IconButton(",
      "      icon: Badge(",
      "        label: const Text('${5:12}'),",
      "        backgroundColor: Theme.of(context).colorScheme.error,",
      "        child: const Icon(Icons.notifications_outlined),",
      "      ),",
      "      tooltip: 'Notifications',",
      "      onPressed: () {",
      "        ${6:// Open notifications}",
      "        Navigator.of(context).push(",
      "          MaterialPageRoute(",
      "            builder: (context) => ${7:NotificationsPage}(),",
      "          ),",
      "        );",
      "      },",
      "    ),",
      "    PopupMenuButton<String>(",
      "      icon: const Icon(Icons.filter_list),",
      "      tooltip: 'Filter',",
      "      onSelected: (value) {",
      "        ${8:// Handle filter selection}",
      "      },",
      "      itemBuilder: (context) => [",
      "        const PopupMenuItem(",
      "          value: 'today',",
      "          child: ListTile(",
      "            leading: Icon(Icons.today),",
      "            title: Text('Today'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'week',",
      "          child: ListTile(",
      "            leading: Icon(Icons.date_range),",
      "            title: Text('This Week'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'month',",
      "          child: ListTile(",
      "            leading: Icon(Icons.calendar_view_month),",
      "            title: Text('This Month'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'custom',",
      "          child: ListTile(",
      "            leading: Icon(Icons.tune),",
      "            title: Text('Custom Range'),",
      "          ),",
      "        ),",
      "      ],",
      "    ),",
      "  ],",
      ")$0"
    ]
  },

  "Media AppBar": {
    "prefix": "flap-media",
    "description": "AppBar for media viewer with share and download",
    "body": [
      "AppBar(",
      "  backgroundColor: Colors.black.withOpacity(0.7),",
      "  elevation: 0,",
      "  leading: IconButton(",
      "    icon: const Icon(",
      "      Icons.arrow_back,",
      "      color: Colors.white,",
      "    ),",
      "    onPressed: () => Navigator.of(context).pop(),",
      "  ),",
      "  title: Text(",
      "    '${1:Media Title}',",
      "    style: const TextStyle(",
      "      color: Colors.white,",
      "      fontWeight: FontWeight.w500,",
      "    ),",
      "  ),",
      "  actions: [",
      "    IconButton(",
      "      icon: const Icon(",
      "        Icons.download_outlined,",
      "        color: Colors.white,",
      "      ),",
      "      tooltip: 'Download',",
      "      onPressed: () async {",
      "        ${2:// Handle download}",
      "        ScaffoldMessenger.of(context).showSnackBar(",
      "          const SnackBar(",
      "            content: Text('Downloading...'),",
      "            backgroundColor: Colors.green,",
      "          ),",
      "        );",
      "      },",
      "    ),",
      "    IconButton(",
      "      icon: const Icon(",
      "        Icons.share_outlined,",
      "        color: Colors.white,",
      "      ),",
      "      tooltip: 'Share',",
      "      onPressed: () {",
      "        ${3:// Handle share}",
      "        showModalBottomSheet(",
      "          context: context,",
      "          builder: (context) => Container(",
      "            padding: const EdgeInsets.all(16),",
      "            child: Column(",
      "              mainAxisSize: MainAxisSize.min,",
      "              children: [",
      "                const Text(",
      "                  'Share Media',",
      "                  style: TextStyle(",
      "                    fontSize: 18,",
      "                    fontWeight: FontWeight.bold,",
      "                  ),",
      "                ),",
      "                const SizedBox(height: 16),",
      "                Row(",
      "                  mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
      "                  children: [",
      "                    _buildShareOption(",
      "                      icon: Icons.message,",
      "                      label: 'Messages',",
      "                      onTap: () => ${4:// Share via messages},",
      "                    ),",
      "                    _buildShareOption(",
      "                      icon: Icons.email,",
      "                      label: 'Email',",
      "                      onTap: () => ${5:// Share via email},",
      "                    ),",
      "                    _buildShareOption(",
      "                      icon: Icons.copy,",
      "                      label: 'Copy Link',",
      "                      onTap: () => ${6:// Copy link},",
      "                    ),",
      "                  ],",
      "                ),",
      "              ],",
      "            ),",
      "          ),",
      "        );",
      "      },",
      "    ),",
      "    PopupMenuButton<String>(",
      "      icon: const Icon(",
      "        Icons.more_vert,",
      "        color: Colors.white,",
      "      ),",
      "      onSelected: (value) {",
      "        ${7:// Handle menu selection}",
      "      },",
      "      itemBuilder: (context) => [",
      "        const PopupMenuItem(",
      "          value: 'info',",
      "          child: ListTile(",
      "            leading: Icon(Icons.info),",
      "            title: Text('Info'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'favorite',",
      "          child: ListTile(",
      "            leading: Icon(Icons.favorite),",
      "            title: Text('Add to Favorites'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'report',",
      "          child: ListTile(",
      "            leading: Icon(Icons.report),",
      "            title: Text('Report'),",
      "          ),",
      "        ),",
      "      ],",
      "    ),",
      "  ],",
      ")",
      "",
      "// Helper method for share options",
      "Widget _buildShareOption({",
      "  required IconData icon,",
      "  required String label,",
      "  required VoidCallback onTap,",
      "}) {",
      "  return GestureDetector(",
      "    onTap: onTap,",
      "    child: Column(",
      "      children: [",
      "        Container(",
      "          padding: const EdgeInsets.all(12),",
      "          decoration: BoxDecoration(",
      "            color: Theme.of(context).colorScheme.primaryContainer,",
      "            shape: BoxShape.circle,",
      "          ),",
      "          child: Icon(",
      "            icon,",
      "            color: Theme.of(context).colorScheme.onPrimaryContainer,",
      "          ),",
      "        ),",
      "        const SizedBox(height: 8),",
      "        Text(",
      "          label,",
      "          style: Theme.of(context).textTheme.bodySmall,",
      "        ),",
      "      ],",
      "    ),",
      "  );",
      "}$0"
    ]
  }
}
