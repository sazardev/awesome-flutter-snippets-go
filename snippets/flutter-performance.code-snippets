{
  "Optimized ListView": {
    "prefix": "flp-optimized-list",
    "description": "Performance optimized ListView with lazy loading",
    "body": [
      "class ${1:Optimized}ListView extends StatefulWidget {",
      "  const ${1:Optimized}ListView({",
      "    super.key,",
      "    required this.items,",
      "    this.onLoadMore,",
      "    this.itemBuilder,",
      "  });",
      "",
      "  final List<${2:String}> items;",
      "  final VoidCallback? onLoadMore;",
      "  final Widget Function(BuildContext, int)? itemBuilder;",
      "",
      "  @override",
      "  State<${1:Optimized}ListView> createState() => _${1:Optimized}ListViewState();",
      "}",
      "",
      "class _${1:Optimized}ListViewState extends State<${1:Optimized}ListView> {",
      "  final ScrollController _scrollController = ScrollController();",
      "  bool _isLoadingMore = false;",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _scrollController.addListener(_onScroll);",
      "  }",
      "",
      "  @override",
      "  void dispose() {",
      "    _scrollController.dispose();",
      "    super.dispose();",
      "  }",
      "",
      "  void _onScroll() {",
      "    if (_scrollController.position.pixels >=",
      "        _scrollController.position.maxScrollExtent * 0.8) {",
      "      _loadMore();",
      "    }",
      "  }",
      "",
      "  Future<void> _loadMore() async {",
      "    if (_isLoadingMore || widget.onLoadMore == null) return;",
      "",
      "    setState(() => _isLoadingMore = true);",
      "    widget.onLoadMore!();",
      "    setState(() => _isLoadingMore = false);",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ListView.builder(",
      "      controller: _scrollController,",
      "      physics: const BouncingScrollPhysics(),",
      "      itemCount: widget.items.length + (_isLoadingMore ? 1 : 0),",
      "      cacheExtent: 200, // Pre-cache items",
      "      itemBuilder: (context, index) {",
      "        if (index >= widget.items.length) {",
      "          return const Center(",
      "            child: Padding(",
      "              padding: EdgeInsets.all(16),",
      "              child: CircularProgressIndicator(),",
      "            ),",
      "          );",
      "        }",
      "",
      "        return widget.itemBuilder?.call(context, index) ??",
      "            ListTile(",
      "              title: Text(widget.items[index].toString()),",
      "            );",
      "      },",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "Image Cache Manager": {
    "prefix": "flp-image-cache",
    "description": "Optimized image loading with caching",
    "body": [
      "import 'package:cached_network_image/cached_network_image.dart';",
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:Optimized}Image extends StatelessWidget {",
      "  const ${1:Optimized}Image({",
      "    super.key,",
      "    required this.imageUrl,",
      "    this.width,",
      "    this.height,",
      "    this.fit = BoxFit.cover,",
      "    this.placeholder,",
      "    this.errorWidget,",
      "  });",
      "",
      "  final String imageUrl;",
      "  final double? width;",
      "  final double? height;",
      "  final BoxFit fit;",
      "  final Widget? placeholder;",
      "  final Widget? errorWidget;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return CachedNetworkImage(",
      "      imageUrl: imageUrl,",
      "      width: width,",
      "      height: height,",
      "      fit: fit,",
      "      placeholder: (context, url) =>",
      "          placeholder ??",
      "          Container(",
      "            width: width,",
      "            height: height,",
      "            decoration: BoxDecoration(",
      "              color: Theme.of(context).colorScheme.surfaceVariant,",
      "              borderRadius: BorderRadius.circular(8),",
      "            ),",
      "            child: const Center(",
      "              child: CircularProgressIndicator(),",
      "            ),",
      "          ),",
      "      errorWidget: (context, url, error) =>",
      "          errorWidget ??",
      "          Container(",
      "            width: width,",
      "            height: height,",
      "            decoration: BoxDecoration(",
      "              color: Theme.of(context).colorScheme.errorContainer,",
      "              borderRadius: BorderRadius.circular(8),",
      "            ),",
      "            child: Icon(",
      "              Icons.error_outline,",
      "              color: Theme.of(context).colorScheme.error,",
      "            ),",
      "          ),",
      "      // Performance optimizations",
      "      fadeInDuration: const Duration(milliseconds: 300),",
      "      fadeOutDuration: const Duration(milliseconds: 100),",
      "      memCacheWidth: width?.toInt(),",
      "      memCacheHeight: height?.toInt(),",
      "      maxWidthDiskCache: 1000,",
      "      maxHeightDiskCache: 1000,",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "Memory Optimized StatefulWidget": {
    "prefix": "flp-memory-optimized",
    "description": "StatefulWidget with memory optimization best practices",
    "body": [
      "class ${1:Memory}OptimizedWidget extends StatefulWidget {",
      "  const ${1:Memory}OptimizedWidget({",
      "    super.key,",
      "    required this.data,",
      "    this.onDataChanged,",
      "  });",
      "",
      "  final ${2:String} data;",
      "  final ValueChanged<${2:String}>? onDataChanged;",
      "",
      "  @override",
      "  State<${1:Memory}OptimizedWidget> createState() => _${1:Memory}OptimizedWidgetState();",
      "}",
      "",
      "class _${1:Memory}OptimizedWidgetState extends State<${1:Memory}OptimizedWidget>",
      "    with AutomaticKeepAliveClientMixin, WidgetsBindingObserver {",
      "  ",
      "  // Lazy initialization",
      "  late final TextEditingController _controller;",
      "  late final FocusNode _focusNode;",
      "  Timer? _debounceTimer;",
      "",
      "  // Cache expensive operations",
      "  String? _cachedProcessedData;",
      "  String? _lastRawData;",
      "",
      "  @override",
      "  bool get wantKeepAlive => true; // Keep state when scrolled away",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _controller = TextEditingController(text: widget.data);",
      "    _focusNode = FocusNode();",
      "    WidgetsBinding.instance.addObserver(this);",
      "  }",
      "",
      "  @override",
      "  void didUpdateWidget(covariant ${1:Memory}OptimizedWidget oldWidget) {",
      "    super.didUpdateWidget(oldWidget);",
      "    if (oldWidget.data != widget.data) {",
      "      _controller.text = widget.data;",
      "      _invalidateCache();",
      "    }",
      "  }",
      "",
      "  @override",
      "  void didChangeAppLifecycleState(AppLifecycleState state) {",
      "    if (state == AppLifecycleState.paused) {",
      "      // Clean up resources when app goes to background",
      "      _controller.clear();",
      "      _focusNode.unfocus();",
      "    }",
      "  }",
      "",
      "  @override",
      "  void dispose() {",
      "    _debounceTimer?.cancel();",
      "    _controller.dispose();",
      "    _focusNode.dispose();",
      "    WidgetsBinding.instance.removeObserver(this);",
      "    super.dispose();",
      "  }",
      "",
      "  void _invalidateCache() {",
      "    _cachedProcessedData = null;",
      "    _lastRawData = null;",
      "  }",
      "",
      "  String _getProcessedData() {",
      "    if (_lastRawData == widget.data && _cachedProcessedData != null) {",
      "      return _cachedProcessedData!;",
      "    }",
      "",
      "    // Expensive operation - only do when needed",
      "    _cachedProcessedData = widget.data.toUpperCase().split('').reversed.join();",
      "    _lastRawData = widget.data;",
      "    return _cachedProcessedData!;",
      "  }",
      "",
      "  void _onTextChanged(String value) {",
      "    _debounceTimer?.cancel();",
      "    _debounceTimer = Timer(const Duration(milliseconds: 300), () {",
      "      widget.onDataChanged?.call(value);",
      "      _invalidateCache();",
      "    });",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    super.build(context); // Required for AutomaticKeepAliveClientMixin",
      "",
      "    return Column(",
      "      children: [",
      "        // Use const constructors where possible",
      "        const SizedBox(height: 16),",
      "        ",
      "        // Expensive widget wrapped in RepaintBoundary",
      "        RepaintBoundary(",
      "          child: Container(",
      "            padding: const EdgeInsets.all(16),",
      "            decoration: BoxDecoration(",
      "              color: Theme.of(context).colorScheme.surface,",
      "              borderRadius: BorderRadius.circular(8),",
      "            ),",
      "            child: Text(",
      "              _getProcessedData(),",
      "              style: Theme.of(context).textTheme.bodyLarge,",
      "            ),",
      "          ),",
      "        ),",
      "        ",
      "        const SizedBox(height: 16),",
      "        ",
      "        TextField(",
      "          controller: _controller,",
      "          focusNode: _focusNode,",
      "          onChanged: _onTextChanged,",
      "          decoration: const InputDecoration(",
      "            labelText: 'Enter data',",
      "            border: OutlineInputBorder(),",
      "          ),",
      "        ),",
      "      ],",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  }
}
