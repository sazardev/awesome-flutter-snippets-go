{
  "Form with Validation": {
    "prefix": "flf-form",
    "description": "Complete form with validation and Material 3 design",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:ContactForm} extends StatefulWidget {",
      "  const ${1:ContactForm}({super.key});",
      "",
      "  @override",
      "  State<${1:ContactForm}> createState() => _${1:ContactForm}State();",
      "}",
      "",
      "class _${1:ContactForm}State extends State<${1:ContactForm}> {",
      "  final _formKey = GlobalKey<FormState>();",
      "  final _nameController = TextEditingController();",
      "  final _emailController = TextEditingController();",
      "  final _phoneController = TextEditingController();",
      "  final _messageController = TextEditingController();",
      "  ",
      "  bool _isLoading = false;",
      "",
      "  @override",
      "  void dispose() {",
      "    _nameController.dispose();",
      "    _emailController.dispose();",
      "    _phoneController.dispose();",
      "    _messageController.dispose();",
      "    super.dispose();",
      "  }",
      "",
      "  Future<void> _submitForm() async {",
      "    if (_formKey.currentState!.validate()) {",
      "      setState(() {",
      "        _isLoading = true;",
      "      });",
      "",
      "      try {",
      "        ${2:// Submit form data}",
      "        await Future.delayed(const Duration(seconds: 2));",
      "        ",
      "        if (mounted) {",
      "          ScaffoldMessenger.of(context).showSnackBar(",
      "            const SnackBar(",
      "              content: Text('Form submitted successfully!'),",
      "              backgroundColor: Colors.green,",
      "            ),",
      "          );",
      "          ",
      "          // Clear form",
      "          _formKey.currentState!.reset();",
      "          _nameController.clear();",
      "          _emailController.clear();",
      "          _phoneController.clear();",
      "          _messageController.clear();",
      "        }",
      "      } catch (e) {",
      "        if (mounted) {",
      "          ScaffoldMessenger.of(context).showSnackBar(",
      "            SnackBar(",
      "              content: Text('Error: \\${e.toString()}'),",
      "              backgroundColor: Theme.of(context).colorScheme.error,",
      "            ),",
      "          );",
      "        }",
      "      } finally {",
      "        if (mounted) {",
      "          setState(() {",
      "            _isLoading = false;",
      "          });",
      "        }",
      "      }",
      "    }",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('${3:Contact Form}'),",
      "        backgroundColor: Theme.of(context).colorScheme.inversePrimary,",
      "      ),",
      "      body: Form(",
      "        key: _formKey,",
      "        child: SingleChildScrollView(",
      "          padding: const EdgeInsets.all(16),",
      "          child: Column(",
      "            crossAxisAlignment: CrossAxisAlignment.stretch,",
      "            children: [",
      "              Text(",
      "                '${4:Get in Touch}',",
      "                style: Theme.of(context).textTheme.headlineMedium,",
      "                textAlign: TextAlign.center,",
      "              ),",
      "              const SizedBox(height: 8),",
      "              Text(",
      "                '${5:Fill out the form below and we\\'ll get back to you}',",
      "                style: Theme.of(context).textTheme.bodyLarge?.copyWith(",
      "                  color: Theme.of(context).colorScheme.onSurfaceVariant,",
      "                ),",
      "                textAlign: TextAlign.center,",
      "              ),",
      "              const SizedBox(height: 32),",
      "              ",
      "              // Name Field",
      "              TextFormField(",
      "                controller: _nameController,",
      "                decoration: const InputDecoration(",
      "                  labelText: 'Full Name',",
      "                  hintText: 'Enter your full name',",
      "                  prefixIcon: Icon(Icons.person_outlined),",
      "                  border: OutlineInputBorder(),",
      "                ),",
      "                validator: (value) {",
      "                  if (value == null || value.isEmpty) {",
      "                    return 'Please enter your name';",
      "                  }",
      "                  if (value.length < 2) {",
      "                    return 'Name must be at least 2 characters';",
      "                  }",
      "                  return null;",
      "                },",
      "              ),",
      "              const SizedBox(height: 16),",
      "              ",
      "              // Email Field",
      "              TextFormField(",
      "                controller: _emailController,",
      "                keyboardType: TextInputType.emailAddress,",
      "                decoration: const InputDecoration(",
      "                  labelText: 'Email Address',",
      "                  hintText: 'Enter your email address',",
      "                  prefixIcon: Icon(Icons.email_outlined),",
      "                  border: OutlineInputBorder(),",
      "                ),",
      "                validator: (value) {",
      "                  if (value == null || value.isEmpty) {",
      "                    return 'Please enter your email';",
      "                  }",
      "                  if (!RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}\\$').hasMatch(value)) {",
      "                    return 'Please enter a valid email';",
      "                  }",
      "                  return null;",
      "                },",
      "              ),",
      "              const SizedBox(height: 16),",
      "              ",
      "              // Phone Field",
      "              TextFormField(",
      "                controller: _phoneController,",
      "                keyboardType: TextInputType.phone,",
      "                decoration: const InputDecoration(",
      "                  labelText: 'Phone Number',",
      "                  hintText: 'Enter your phone number',",
      "                  prefixIcon: Icon(Icons.phone_outlined),",
      "                  border: OutlineInputBorder(),",
      "                ),",
      "                validator: (value) {",
      "                  if (value == null || value.isEmpty) {",
      "                    return 'Please enter your phone number';",
      "                  }",
      "                  if (value.length < 10) {",
      "                    return 'Phone number must be at least 10 digits';",
      "                  }",
      "                  return null;",
      "                },",
      "              ),",
      "              const SizedBox(height: 16),",
      "              ",
      "              // Message Field",
      "              TextFormField(",
      "                controller: _messageController,",
      "                maxLines: 4,",
      "                decoration: const InputDecoration(",
      "                  labelText: 'Message',",
      "                  hintText: 'Enter your message',",
      "                  prefixIcon: Icon(Icons.message_outlined),",
      "                  border: OutlineInputBorder(),",
      "                  alignLabelWithHint: true,",
      "                ),",
      "                validator: (value) {",
      "                  if (value == null || value.isEmpty) {",
      "                    return 'Please enter your message';",
      "                  }",
      "                  if (value.length < 10) {",
      "                    return 'Message must be at least 10 characters';",
      "                  }",
      "                  return null;",
      "                },",
      "              ),",
      "              const SizedBox(height: 32),",
      "              ",
      "              // Submit Button",
      "              FilledButton(",
      "                onPressed: _isLoading ? null : _submitForm,",
      "                child: _isLoading",
      "                    ? const SizedBox(",
      "                        height: 20,",
      "                        width: 20,",
      "                        child: CircularProgressIndicator(",
      "                          strokeWidth: 2,",
      "                        ),",
      "                      )",
      "                    : const Text('Submit'),",
      "              ),",
      "            ],",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}$0"
    ]
  },

  "Text Form Field": {
    "prefix": "flf-field",
    "description": "Text form field with validation",
    "body": [
      "TextFormField(",
      "  controller: ${1:_controller},",
      "  ${2:keyboardType: TextInputType.text,}",
      "  ${3:obscureText: false,}",
      "  decoration: const InputDecoration(",
      "    labelText: '${4:Label}',",
      "    hintText: '${5:Hint text}',",
      "    prefixIcon: Icon(Icons.${6:text_fields}),",
      "    border: OutlineInputBorder(),",
      "    ${7:helperText: 'Helper text',}",
      "  ),",
      "  validator: (value) {",
      "    if (value == null || value.isEmpty) {",
      "      return '${8:Please enter a value}';",
      "    }",
      "    ${9:// Add additional validation}",
      "    return null;",
      "  },",
      "  ${10:onChanged: (value) {",
      "    // Handle value change",
      "  },}",
      ")$0"
    ]
  },

  "Dropdown Form Field": {
    "prefix": "flf-dropdown",
    "description": "Dropdown form field with validation",
    "body": [
      "DropdownButtonFormField<${1:String}>(",
      "  value: ${2:_selectedValue},",
      "  decoration: const InputDecoration(",
      "    labelText: '${3:Select Option}',",
      "    prefixIcon: Icon(Icons.${4:arrow_drop_down}),",
      "    border: OutlineInputBorder(),",
      "  ),",
      "  items: ${5:options}.map<DropdownMenuItem<${1:String}>>((${1:String} value) {",
      "    return DropdownMenuItem<${1:String}>(",
      "      value: value,",
      "      child: Text(value),",
      "    );",
      "  }).toList(),",
      "  validator: (value) {",
      "    if (value == null || value.isEmpty) {",
      "      return '${6:Please select an option}';",
      "    }",
      "    return null;",
      "  },",
      "  onChanged: (${1:String}? newValue) {",
      "    setState(() {",
      "      ${2:_selectedValue} = newValue;",
      "    });",
      "  },",
      ")$0"
    ]
  },

  "Date Picker Field": {
    "prefix": "flf-date",
    "description": "Date picker form field",
    "body": [
      "TextFormField(",
      "  controller: ${1:_dateController},",
      "  readOnly: true,",
      "  decoration: const InputDecoration(",
      "    labelText: '${2:Select Date}',",
      "    hintText: '${3:Choose a date}',",
      "    prefixIcon: Icon(Icons.calendar_today),",
      "    border: OutlineInputBorder(),",
      "  ),",
      "  validator: (value) {",
      "    if (value == null || value.isEmpty) {",
      "      return '${4:Please select a date}';",
      "    }",
      "    return null;",
      "  },",
      "  onTap: () async {",
      "    final DateTime? picked = await showDatePicker(",
      "      context: context,",
      "      initialDate: DateTime.now(),",
      "      firstDate: DateTime(${5:2000}),",
      "      lastDate: DateTime(${6:2100}),",
      "    );",
      "    if (picked != null) {",
      "      setState(() {",
      "        ${1:_dateController}.text = '\\${picked.day}/\\${picked.month}/\\${picked.year}';",
      "        ${7:_selectedDate = picked;}",
      "      });",
      "    }",
      "  },",
      ")$0"
    ]
  },

  "Time Picker Field": {
    "prefix": "flf-time",
    "description": "Time picker form field",
    "body": [
      "TextFormField(",
      "  controller: ${1:_timeController},",
      "  readOnly: true,",
      "  decoration: const InputDecoration(",
      "    labelText: '${2:Select Time}',",
      "    hintText: '${3:Choose a time}',",
      "    prefixIcon: Icon(Icons.access_time),",
      "    border: OutlineInputBorder(),",
      "  ),",
      "  validator: (value) {",
      "    if (value == null || value.isEmpty) {",
      "      return '${4:Please select a time}';",
      "    }",
      "    return null;",
      "  },",
      "  onTap: () async {",
      "    final TimeOfDay? picked = await showTimePicker(",
      "      context: context,",
      "      initialTime: TimeOfDay.now(),",
      "    );",
      "    if (picked != null) {",
      "      setState(() {",
      "        ${1:_timeController}.text = picked.format(context);",
      "        ${5:_selectedTime = picked;}",
      "      });",
      "    }",
      "  },",
      ")$0"
    ]
  },

  "Checkbox Form Field": {
    "prefix": "flf-checkbox",
    "description": "Checkbox form field with validation",
    "body": [
      "FormField<bool>(",
      "  initialValue: ${1:false},",
      "  validator: (value) {",
      "    if (value != true) {",
      "      return '${2:You must accept the terms}';",
      "    }",
      "    return null;",
      "  },",
      "  builder: (FormFieldState<bool> state) {",
      "    return Column(",
      "      crossAxisAlignment: CrossAxisAlignment.start,",
      "      children: [",
      "        CheckboxListTile(",
      "          value: state.value ?? false,",
      "          onChanged: (bool? value) {",
      "            state.didChange(value);",
      "          },",
      "          title: const Text('${3:I agree to the terms and conditions}'),",
      "          controlAffinity: ListTileControlAffinity.leading,",
      "          activeColor: Theme.of(context).colorScheme.primary,",
      "        ),",
      "        if (state.hasError)",
      "          Padding(",
      "            padding: const EdgeInsets.fromLTRB(16, 8, 16, 0),",
      "            child: Text(",
      "              state.errorText!,",
      "              style: TextStyle(",
      "                color: Theme.of(context).colorScheme.error,",
      "                fontSize: 12,",
      "              ),",
      "            ),",
      "          ),",
      "      ],",
      "    );",
      "  },",
      ")$0"
    ]
  },

  "Radio Form Field": {
    "prefix": "flf-radio",
    "description": "Radio button form field with validation",
    "body": [
      "FormField<${1:String}>(",
      "  validator: (value) {",
      "    if (value == null || value.isEmpty) {",
      "      return '${2:Please select an option}';",
      "    }",
      "    return null;",
      "  },",
      "  builder: (FormFieldState<${1:String}> state) {",
      "    return Column(",
      "      crossAxisAlignment: CrossAxisAlignment.start,",
      "      children: [",
      "        Text(",
      "          '${3:Select an option}',",
      "          style: Theme.of(context).textTheme.titleMedium,",
      "        ),",
      "        const SizedBox(height: 8),",
      "        ...${4:options}.map((${1:String} option) {",
      "          return RadioListTile<${1:String}>(",
      "            value: option,",
      "            groupValue: state.value,",
      "            onChanged: (${1:String}? value) {",
      "              state.didChange(value);",
      "            },",
      "            title: Text(option),",
      "            activeColor: Theme.of(context).colorScheme.primary,",
      "          );",
      "        }),",
      "        if (state.hasError)",
      "          Padding(",
      "            padding: const EdgeInsets.fromLTRB(16, 8, 16, 0),",
      "            child: Text(",
      "              state.errorText!,",
      "              style: TextStyle(",
      "                color: Theme.of(context).colorScheme.error,",
      "                fontSize: 12,",
      "              ),",
      "            ),",
      "          ),",
      "      ],",
      "    );",
      "  },",
      ")$0"
    ]
  },

  "Switch Form Field": {
    "prefix": "flf-switch",
    "description": "Switch form field with validation",
    "body": [
      "FormField<bool>(",
      "  initialValue: ${1:false},",
      "  builder: (FormFieldState<bool> state) {",
      "    return SwitchListTile(",
      "      value: state.value ?? false,",
      "      onChanged: (bool value) {",
      "        state.didChange(value);",
      "      },",
      "      title: const Text('${2:Enable notifications}'),",
      "      subtitle: const Text('${3:Receive updates and alerts}'),",
      "      activeColor: Theme.of(context).colorScheme.primary,",
      "    );",
      "  },",
      ")$0"
    ]
  },

  "Slider Form Field": {
    "prefix": "flf-slider",
    "description": "Slider form field with validation",
    "body": [
      "FormField<double>(",
      "  initialValue: ${1:50.0},",
      "  validator: (value) {",
      "    if (value == null) {",
      "      return '${2:Please select a value}';",
      "    }",
      "    ${3:// Add additional validation}",
      "    return null;",
      "  },",
      "  builder: (FormFieldState<double> state) {",
      "    return Column(",
      "      crossAxisAlignment: CrossAxisAlignment.start,",
      "      children: [",
      "        Text(",
      "          '${4:Select Value}: \\${state.value?.round() ?? 0}',",
      "          style: Theme.of(context).textTheme.titleMedium,",
      "        ),",
      "        Slider(",
      "          value: state.value ?? ${1:50.0},",
      "          min: ${5:0.0},",
      "          max: ${6:100.0},",
      "          divisions: ${7:100},",
      "          label: '\\${state.value?.round()}',",
      "          onChanged: (double value) {",
      "            state.didChange(value);",
      "          },",
      "          activeColor: Theme.of(context).colorScheme.primary,",
      "        ),",
      "        if (state.hasError)",
      "          Text(",
      "            state.errorText!,",
      "            style: TextStyle(",
      "              color: Theme.of(context).colorScheme.error,",
      "              fontSize: 12,",
      "            ),",
      "          ),",
      "      ],",
      "    );",
      "  },",
      ")$0"
    ]
  },

  "Form Validation Helper": {
    "prefix": "flf-validator",
    "description": "Form validation helper class",
    "body": [
      "class ${1:FormValidator} {",
      "  static String? validateEmail(String? value) {",
      "    if (value == null || value.isEmpty) {",
      "      return 'Email is required';",
      "    }",
      "    ",
      "    final emailRegex = RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}\\$');",
      "    if (!emailRegex.hasMatch(value)) {",
      "      return 'Enter a valid email address';",
      "    }",
      "    ",
      "    return null;",
      "  }",
      "",
      "  static String? validatePassword(String? value) {",
      "    if (value == null || value.isEmpty) {",
      "      return 'Password is required';",
      "    }",
      "    ",
      "    if (value.length < 6) {",
      "      return 'Password must be at least 6 characters';",
      "    }",
      "    ",
      "    if (!RegExp(r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)').hasMatch(value)) {",
      "      return 'Password must contain uppercase, lowercase, and number';",
      "    }",
      "    ",
      "    return null;",
      "  }",
      "",
      "  static String? validateName(String? value) {",
      "    if (value == null || value.isEmpty) {",
      "      return 'Name is required';",
      "    }",
      "    ",
      "    if (value.length < 2) {",
      "      return 'Name must be at least 2 characters';",
      "    }",
      "    ",
      "    if (!RegExp(r'^[a-zA-Z\\s]+\\$').hasMatch(value)) {",
      "      return 'Name can only contain letters and spaces';",
      "    }",
      "    ",
      "    return null;",
      "  }",
      "",
      "  static String? validatePhone(String? value) {",
      "    if (value == null || value.isEmpty) {",
      "      return 'Phone number is required';",
      "    }",
      "    ",
      "    final phoneRegex = RegExp(r'^[\\+]?[1-9]?[0-9]{7,12}\\$');",
      "    if (!phoneRegex.hasMatch(value.replaceAll(RegExp(r'[\\s\\-\\(\\)]'), ''))) {",
      "      return 'Enter a valid phone number';",
      "    }",
      "    ",
      "    return null;",
      "  }",
      "",
      "  static String? validateRequired(String? value, String fieldName) {",
      "    if (value == null || value.isEmpty) {",
      "      return '\\$fieldName is required';",
      "    }",
      "    return null;",
      "  }",
      "",
      "  static String? validateMinLength(String? value, int minLength) {",
      "    if (value == null || value.isEmpty) {",
      "      return 'This field is required';",
      "    }",
      "    ",
      "    if (value.length < minLength) {",
      "      return 'Must be at least \\$minLength characters';",
      "    }",
      "    ",
      "    return null;",
      "  }",
      "",
      "  static String? validateMaxLength(String? value, int maxLength) {",
      "    if (value != null && value.length > maxLength) {",
      "      return 'Must be no more than \\$maxLength characters';",
      "    }",
      "    return null;",
      "  }",
      "",
      "  static String? validateURL(String? value) {",
      "    if (value == null || value.isEmpty) {",
      "      return 'URL is required';",
      "    }",
      "    ",
      "    final urlRegex = RegExp(",
      "      r'^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)\\$'",
      "    );",
      "    ",
      "    if (!urlRegex.hasMatch(value)) {",
      "      return 'Enter a valid URL';",
      "    }",
      "    ",
      "    return null;",
      "  }",
      "",
      "  static String? validateNumber(String? value) {",
      "    if (value == null || value.isEmpty) {",
      "      return 'Number is required';",
      "    }",
      "    ",
      "    if (double.tryParse(value) == null) {",
      "      return 'Enter a valid number';",
      "    }",
      "    ",
      "    return null;",
      "  }",
      "}$0"
    ]
  }
}
