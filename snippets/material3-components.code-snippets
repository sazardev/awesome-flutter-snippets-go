{
  "Material 3 Card": {
    "prefix": "flm3-card",
    "description": "Material 3 Card with modern styling",
    "body": [
      "Card(",
      "  elevation: ${1:1.0},",
      "  surfaceTintColor: Theme.of(context).colorScheme.surfaceTint,",
      "  shape: RoundedRectangleBorder(",
      "    borderRadius: BorderRadius.circular(${2:12}),",
      "  ),",
      "  child: Padding(",
      "    padding: const EdgeInsets.all(${3:16}),",
      "    child: Column(",
      "      crossAxisAlignment: CrossAxisAlignment.start,",
      "      mainAxisSize: MainAxisSize.min,",
      "      children: [",
      "        Text(",
      "          '${4:Card Title}',",
      "          style: Theme.of(context).textTheme.titleLarge,",
      "        ),",
      "        const SizedBox(height: 8),",
      "        Text(",
      "          '${5:Card content goes here}',",
      "          style: Theme.of(context).textTheme.bodyMedium,",
      "        ),",
      "        const SizedBox(height: 16),",
      "        Row(",
      "          mainAxisAlignment: MainAxisAlignment.end,",
      "          children: [",
      "            TextButton(",
      "              onPressed: () {",
      "                ${6:// Action 1}",
      "              },",
      "              child: const Text('${7:Cancel}'),",
      "            ),",
      "            const SizedBox(width: 8),",
      "            FilledButton(",
      "              onPressed: () {",
      "                ${8:// Action 2}",
      "              },",
      "              child: const Text('${9:Confirm}'),",
      "            ),",
      "          ],",
      "        ),",
      "      ],",
      "    ),",
      "  ),",
      ")$0"
    ]
  },

  "Floating Action Button Extended": {
    "prefix": "flm3-fab",
    "description": "Material 3 Extended Floating Action Button",
    "body": [
      "FloatingActionButton.extended(",
      "  onPressed: () {",
      "    ${1:// FAB action}",
      "  },",
      "  icon: const Icon(Icons.${2:add}),",
      "  label: const Text('${3:Add Item}'),",
      "  backgroundColor: Theme.of(context).colorScheme.primaryContainer,",
      "  foregroundColor: Theme.of(context).colorScheme.onPrimaryContainer,",
      "  elevation: ${4:6.0},",
      ")$0"
    ]
  },

  "Material 3 Chip": {
    "prefix": "flm3-chip",
    "description": "Material 3 Chip components",
    "body": [
      "Wrap(",
      "  spacing: 8.0,",
      "  runSpacing: 4.0,",
      "  children: [",
      "    // Filter Chip",
      "    FilterChip(",
      "      label: const Text('${1:Filter}'),",
      "      selected: ${2:isSelected},",
      "      onSelected: (bool selected) {",
      "        setState(() {",
      "          ${2:isSelected} = selected;",
      "        });",
      "      },",
      "      avatar: const Icon(Icons.${3:filter_list}),",
      "      backgroundColor: Theme.of(context).colorScheme.surface,",
      "      selectedColor: Theme.of(context).colorScheme.secondaryContainer,",
      "      checkmarkColor: Theme.of(context).colorScheme.onSecondaryContainer,",
      "    ),",
      "    ",
      "    // Action Chip",
      "    ActionChip(",
      "      label: const Text('${4:Action}'),",
      "      onPressed: () {",
      "        ${5:// Action}",
      "      },",
      "      avatar: const Icon(Icons.${6:touch_app}),",
      "      backgroundColor: Theme.of(context).colorScheme.surfaceVariant,",
      "    ),",
      "    ",
      "    // Input Chip",
      "    InputChip(",
      "      label: const Text('${7:Input}'),",
      "      onDeleted: () {",
      "        ${8:// Delete action}",
      "      },",
      "      avatar: const Icon(Icons.${9:person}),",
      "      deleteIcon: const Icon(Icons.close),",
      "      backgroundColor: Theme.of(context).colorScheme.surfaceVariant,",
      "    ),",
      "    ",
      "    // Choice Chip",
      "    ChoiceChip(",
      "      label: const Text('${10:Choice}'),",
      "      selected: ${11:isChoiceSelected},",
      "      onSelected: (bool selected) {",
      "        setState(() {",
      "          ${11:isChoiceSelected} = selected;",
      "        });",
      "      },",
      "      selectedColor: Theme.of(context).colorScheme.secondaryContainer,",
      "    ),",
      "  ],",
      ")$0"
    ]
  },

  "Material 3 Segmented Button": {
    "prefix": "flm3-segmented",
    "description": "Material 3 Segmented Button",
    "body": [
      "SegmentedButton<${1:String}>(",
      "  segments: const [",
      "    ButtonSegment<${1:String}>(",
      "      value: '${2:option1}',",
      "      label: Text('${3:Option 1}'),",
      "      icon: Icon(Icons.${4:looks_one}),",
      "    ),",
      "    ButtonSegment<${1:String}>(",
      "      value: '${5:option2}',",
      "      label: Text('${6:Option 2}'),",
      "      icon: Icon(Icons.${7:looks_two}),",
      "    ),",
      "    ButtonSegment<${1:String}>(",
      "      value: '${8:option3}',",
      "      label: Text('${9:Option 3}'),",
      "      icon: Icon(Icons.${10:looks_3}),",
      "    ),",
      "  ],",
      "  selected: <${1:String}>{${11:selectedSegment}},",
      "  onSelectionChanged: (Set<${1:String}> newSelection) {",
      "    setState(() {",
      "      ${11:selectedSegment} = newSelection.first;",
      "    });",
      "  },",
      "  multiSelectionEnabled: ${12:false},",
      "  showSelectedIcon: ${13:true},",
      ")$0"
    ]
  },

  "Material 3 Badge": {
    "prefix": "flm3-badge",
    "description": "Material 3 Badge component",
    "body": [
      "Badge(",
      "  label: Text('${1:99+}'),",
      "  backgroundColor: Theme.of(context).colorScheme.error,",
      "  textColor: Theme.of(context).colorScheme.onError,",
      "  ${2:isLabelVisible: true,}",
      "  child: const Icon(",
      "    Icons.${3:notifications},",
      "    size: ${4:24},",
      "  ),",
      ")$0"
    ]
  },

  "Material 3 Progress Indicators": {
    "prefix": "flm3-progress",
    "description": "Material 3 Progress Indicators",
    "body": [
      "Column(",
      "  children: [",
      "    // Linear Progress Indicator",
      "    Text(",
      "      '${1:Loading...}',",
      "      style: Theme.of(context).textTheme.titleMedium,",
      "    ),",
      "    const SizedBox(height: 16),",
      "    LinearProgressIndicator(",
      "      value: ${2:progress}, // null for indeterminate",
      "      backgroundColor: Theme.of(context).colorScheme.surfaceVariant,",
      "      valueColor: AlwaysStoppedAnimation<Color>(",
      "        Theme.of(context).colorScheme.primary,",
      "      ),",
      "    ),",
      "    const SizedBox(height: 24),",
      "    ",
      "    // Circular Progress Indicator",
      "    SizedBox(",
      "      width: ${3:60},",
      "      height: ${3:60},",
      "      child: CircularProgressIndicator(",
      "        value: ${4:progress}, // null for indeterminate",
      "        backgroundColor: Theme.of(context).colorScheme.surfaceVariant,",
      "        valueColor: AlwaysStoppedAnimation<Color>(",
      "          Theme.of(context).colorScheme.primary,",
      "        ),",
      "        strokeWidth: ${5:4.0},",
      "      ),",
      "    ),",
      "    const SizedBox(height: 16),",
      "    ",
      "    // Progress with percentage",
      "    if (${2:progress} != null)",
      "      Text(",
      "        '\\${(${2:progress}! * 100).toInt()}%',",
      "        style: Theme.of(context).textTheme.bodyLarge,",
      "      ),",
      "  ],",
      ")$0"
    ]
  },

  "Material 3 Dialog": {
    "prefix": "flm3-dialog",
    "description": "Material 3 Dialog with modern styling",
    "body": [
      "showDialog<${1:bool}>(",
      "  context: context,",
      "  builder: (BuildContext context) {",
      "    return AlertDialog(",
      "      icon: const Icon(",
      "        Icons.${2:info},",
      "        size: 32,",
      "      ),",
      "      iconColor: Theme.of(context).colorScheme.primary,",
      "      title: const Text('${3:Dialog Title}'),",
      "      content: const Text(",
      "        '${4:This is the content of the dialog. You can put any widget here.}',",
      "      ),",
      "      actions: [",
      "        TextButton(",
      "          onPressed: () {",
      "            Navigator.of(context).pop(false);",
      "          },",
      "          child: const Text('${5:Cancel}'),",
      "        ),",
      "        FilledButton(",
      "          onPressed: () {",
      "            Navigator.of(context).pop(true);",
      "            ${6:// Confirm action}",
      "          },",
      "          child: const Text('${7:Confirm}'),",
      "        ),",
      "      ],",
      "      shape: RoundedRectangleBorder(",
      "        borderRadius: BorderRadius.circular(16),",
      "      ),",
      "      backgroundColor: Theme.of(context).colorScheme.surface,",
      "      surfaceTintColor: Theme.of(context).colorScheme.surfaceTint,",
      "    );",
      "  },",
      ")$0"
    ]
  },

  "Material 3 Bottom Sheet": {
    "prefix": "flm3-sheet",
    "description": "Material 3 Modal Bottom Sheet",
    "body": [
      "showModalBottomSheet<${1:void}>(",
      "  context: context,",
      "  isScrollControlled: true,",
      "  backgroundColor: Theme.of(context).colorScheme.surface,",
      "  shape: const RoundedRectangleBorder(",
      "    borderRadius: BorderRadius.vertical(",
      "      top: Radius.circular(16),",
      "    ),",
      "  ),",
      "  builder: (BuildContext context) {",
      "    return DraggableScrollableSheet(",
      "      initialChildSize: ${2:0.6},",
      "      minChildSize: ${3:0.25},",
      "      maxChildSize: ${4:0.9},",
      "      expand: false,",
      "      builder: (context, scrollController) {",
      "        return Padding(",
      "          padding: const EdgeInsets.all(16),",
      "          child: Column(",
      "            children: [",
      "              // Handle",
      "              Container(",
      "                width: 40,",
      "                height: 4,",
      "                decoration: BoxDecoration(",
      "                  color: Theme.of(context).colorScheme.onSurfaceVariant,",
      "                  borderRadius: BorderRadius.circular(2),",
      "                ),",
      "              ),",
      "              const SizedBox(height: 16),",
      "              ",
      "              // Title",
      "              Text(",
      "                '${5:Bottom Sheet Title}',",
      "                style: Theme.of(context).textTheme.headlineSmall,",
      "              ),",
      "              const SizedBox(height: 16),",
      "              ",
      "              // Content",
      "              Expanded(",
      "                child: ListView.builder(",
      "                  controller: scrollController,",
      "                  itemCount: ${6:20},",
      "                  itemBuilder: (context, index) {",
      "                    return ListTile(",
      "                      leading: CircleAvatar(",
      "                        backgroundColor: Theme.of(context).colorScheme.primaryContainer,",
      "                        child: Text('\\${index + 1\\}'),",
      "                      ),",
      "                      title: Text('${7:Item} \\${index + 1\\}'),",
      "                      subtitle: Text('${8:Subtitle for item} \\${index + 1\\}'),",
      "                      onTap: () {",
      "                        Navigator.of(context).pop();",
      "                        ${9:// Handle item tap}",
      "                      \\},",
      "                    );",
      "                  },",
      "                ),",
      "              ),",
      "            ],",
      "          ),",
      "        );",
      "      },",
      "    );",
      "  },",
      ")$0"
    ]
  },

  "Material 3 Snackbar": {
    "prefix": "flm3-snackbar",
    "description": "Material 3 Snackbar with action",
    "body": [
      "ScaffoldMessenger.of(context).showSnackBar(",
      "  SnackBar(",
      "    content: const Text('${1:Message sent successfully}'),",
      "    backgroundColor: Theme.of(context).colorScheme.inverseSurface,",
      "    behavior: SnackBarBehavior.floating,",
      "    shape: RoundedRectangleBorder(",
      "      borderRadius: BorderRadius.circular(8),",
      "    ),",
      "    margin: const EdgeInsets.all(16),",
      "    duration: const Duration(seconds: ${2:4}),",
      "    action: SnackBarAction(",
      "      label: '${3:Undo}',",
      "      textColor: Theme.of(context).colorScheme.inversePrimary,",
      "      onPressed: () {",
      "        ${4:// Undo action}",
      "      },",
      "    ),",
      "    ${5:showCloseIcon: true,}",
      "    ${6:closeIconColor: Theme.of(context).colorScheme.onInverseSurface,}",
      "  ),",
      ")$0"
    ]
  },

  "Material 3 Search Bar": {
    "prefix": "flm3-search",
    "description": "Material 3 Search Bar",
    "body": [
      "SearchBar(",
      "  controller: ${1:_searchController},",
      "  hintText: '${2:Search items...}',",
      "  leading: const Icon(Icons.search),",
      "  trailing: [",
      "    IconButton(",
      "      icon: const Icon(Icons.clear),",
      "      onPressed: () {",
      "        ${1:_searchController}.clear();",
      "        ${3:// Clear search}",
      "      },",
      "    ),",
      "  ],",
      "  onChanged: (String value) {",
      "    ${4:// Handle search}",
      "  },",
      "  onSubmitted: (String value) {",
      "    ${5:// Handle search submission}",
      "  },",
      "  backgroundColor: MaterialStateProperty.all(",
      "    Theme.of(context).colorScheme.surfaceVariant,",
      "  ),",
      "  surfaceTintColor: MaterialStateProperty.all(",
      "    Theme.of(context).colorScheme.surfaceTint,",
      "  ),",
      "  elevation: MaterialStateProperty.all(${6:1.0}),",
      "  shape: MaterialStateProperty.all(",
      "    RoundedRectangleBorder(",
      "      borderRadius: BorderRadius.circular(${7:28}),",
      "    ),",
      "  ),",
      ")$0"
    ]
  },

  "Material 3 Menu": {
    "prefix": "flm3-menu",
    "description": "Material 3 Menu Anchor",
    "body": [
      "MenuAnchor(",
      "  controller: ${1:_menuController},",
      "  menuChildren: [",
      "    MenuItemButton(",
      "      leadingIcon: const Icon(Icons.${2:edit}),",
      "      child: const Text('${3:Edit}'),",
      "      onPressed: () {",
      "        ${4:// Edit action}",
      "      },",
      "    ),",
      "    MenuItemButton(",
      "      leadingIcon: const Icon(Icons.${5:share}),",
      "      child: const Text('${6:Share}'),",
      "      onPressed: () {",
      "        ${7:// Share action}",
      "      },",
      "    ),",
      "    const Divider(),",
      "    MenuItemButton(",
      "      leadingIcon: const Icon(",
      "        Icons.${8:delete},",
      "        color: Colors.red,",
      "      ),",
      "      child: const Text(",
      "        '${9:Delete}',",
      "        style: TextStyle(color: Colors.red),",
      "      ),",
      "      onPressed: () {",
      "        ${10:// Delete action}",
      "      },",
      "    ),",
      "  ],",
      "  builder: (context, controller, child) {",
      "    return IconButton(",
      "      icon: const Icon(Icons.more_vert),",
      "      onPressed: () {",
      "        if (controller.isOpen) {",
      "          controller.close();",
      "        } else {",
      "          controller.open();",
      "        }",
      "      },",
      "    );",
      "  },",
      ")$0"
    ]
  }
}
