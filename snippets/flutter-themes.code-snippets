{
  "Material 3 Theme": {
    "prefix": "flt-theme",
    "description": "Complete Material 3 theme configuration",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:AppTheme} {",
      "  static const Color _seedColor = ${2:Colors.deepPurple};",
      "",
      "  static ThemeData lightTheme = ThemeData(",
      "    useMaterial3: true,",
      "    colorScheme: ColorScheme.fromSeed(",
      "      seedColor: _seedColor,",
      "      brightness: Brightness.light,",
      "    ),",
      "    appBarTheme: const AppBarTheme(",
      "      centerTitle: true,",
      "      elevation: 0,",
      "    ),",
      "    cardTheme: CardTheme(",
      "      elevation: 1,",
      "      shape: RoundedRectangleBorder(",
      "        borderRadius: BorderRadius.circular(12),",
      "      ),",
      "    ),",
      "    filledButtonTheme: FilledButtonThemeData(",
      "      style: FilledButton.styleFrom(",
      "        shape: RoundedRectangleBorder(",
      "          borderRadius: BorderRadius.circular(12),",
      "        ),",
      "        padding: const EdgeInsets.symmetric(",
      "          horizontal: 24,",
      "          vertical: 12,",
      "        ),",
      "      ),",
      "    ),",
      "    outlinedButtonTheme: OutlinedButtonThemeData(",
      "      style: OutlinedButton.styleFrom(",
      "        shape: RoundedRectangleBorder(",
      "          borderRadius: BorderRadius.circular(12),",
      "        ),",
      "        padding: const EdgeInsets.symmetric(",
      "          horizontal: 24,",
      "          vertical: 12,",
      "        ),",
      "      ),",
      "    ),",
      "    textButtonTheme: TextButtonThemeData(",
      "      style: TextButton.styleFrom(",
      "        shape: RoundedRectangleBorder(",
      "          borderRadius: BorderRadius.circular(12),",
      "        ),",
      "        padding: const EdgeInsets.symmetric(",
      "          horizontal: 16,",
      "          vertical: 8,",
      "        ),",
      "      ),",
      "    ),",
      "    inputDecorationTheme: InputDecorationTheme(",
      "      border: OutlineInputBorder(",
      "        borderRadius: BorderRadius.circular(12),",
      "      ),",
      "      filled: true,",
      "      contentPadding: const EdgeInsets.symmetric(",
      "        horizontal: 16,",
      "        vertical: 16,",
      "      ),",
      "    ),",
      "    bottomSheetTheme: const BottomSheetThemeData(",
      "      shape: RoundedRectangleBorder(",
      "        borderRadius: BorderRadius.vertical(",
      "          top: Radius.circular(20),",
      "        ),",
      "      ),",
      "    ),",
      "    dialogTheme: DialogTheme(",
      "      shape: RoundedRectangleBorder(",
      "        borderRadius: BorderRadius.circular(20),",
      "      ),",
      "    ),",
      "    snackBarTheme: SnackBarThemeData(",
      "      behavior: SnackBarBehavior.floating,",
      "      shape: RoundedRectangleBorder(",
      "        borderRadius: BorderRadius.circular(12),",
      "      ),",
      "    ),",
      "  );",
      "",
      "  static ThemeData darkTheme = ThemeData(",
      "    useMaterial3: true,",
      "    colorScheme: ColorScheme.fromSeed(",
      "      seedColor: _seedColor,",
      "      brightness: Brightness.dark,",
      "    ),",
      "    appBarTheme: const AppBarTheme(",
      "      centerTitle: true,",
      "      elevation: 0,",
      "    ),",
      "    cardTheme: CardTheme(",
      "      elevation: 1,",
      "      shape: RoundedRectangleBorder(",
      "        borderRadius: BorderRadius.circular(12),",
      "      ),",
      "    ),",
      "    filledButtonTheme: FilledButtonThemeData(",
      "      style: FilledButton.styleFrom(",
      "        shape: RoundedRectangleBorder(",
      "          borderRadius: BorderRadius.circular(12),",
      "        ),",
      "        padding: const EdgeInsets.symmetric(",
      "          horizontal: 24,",
      "          vertical: 12,",
      "        ),",
      "      ),",
      "    ),",
      "    outlinedButtonTheme: OutlinedButtonThemeData(",
      "      style: OutlinedButton.styleFrom(",
      "        shape: RoundedRectangleBorder(",
      "          borderRadius: BorderRadius.circular(12),",
      "        ),",
      "        padding: const EdgeInsets.symmetric(",
      "          horizontal: 24,",
      "          vertical: 12,",
      "        ),",
      "      ),",
      "    ),",
      "    textButtonTheme: TextButtonThemeData(",
      "      style: TextButton.styleFrom(",
      "        shape: RoundedRectangleBorder(",
      "          borderRadius: BorderRadius.circular(12),",
      "        ),",
      "        padding: const EdgeInsets.symmetric(",
      "          horizontal: 16,",
      "          vertical: 8,",
      "        ),",
      "      ),",
      "    ),",
      "    inputDecorationTheme: InputDecorationTheme(",
      "      border: OutlineInputBorder(",
      "        borderRadius: BorderRadius.circular(12),",
      "      ),",
      "      filled: true,",
      "      contentPadding: const EdgeInsets.symmetric(",
      "        horizontal: 16,",
      "        vertical: 16,",
      "      ),",
      "    ),",
      "    bottomSheetTheme: const BottomSheetThemeData(",
      "      shape: RoundedRectangleBorder(",
      "        borderRadius: BorderRadius.vertical(",
      "          top: Radius.circular(20),",
      "        ),",
      "      ),",
      "    ),",
      "    dialogTheme: DialogTheme(",
      "      shape: RoundedRectangleBorder(",
      "        borderRadius: BorderRadius.circular(20),",
      "      ),",
      "    ),",
      "    snackBarTheme: SnackBarThemeData(",
      "      behavior: SnackBarBehavior.floating,",
      "      shape: RoundedRectangleBorder(",
      "        borderRadius: BorderRadius.circular(12),",
      "      ),",
      "    ),",
      "  );",
      "}$0"
    ]
  },

  "Theme Provider": {
    "prefix": "flt-provider",
    "description": "Theme provider with state management",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:shared_preferences/shared_preferences.dart';",
      "",
      "class ${1:ThemeProvider} extends ChangeNotifier {",
      "  static const String _themeKey = 'theme_mode';",
      "  ",
      "  ThemeMode _themeMode = ThemeMode.system;",
      "  ThemeMode get themeMode => _themeMode;",
      "",
      "  bool get isDarkMode {",
      "    if (_themeMode == ThemeMode.system) {",
      "      return WidgetsBinding.instance.platformDispatcher.platformBrightness ==",
      "          Brightness.dark;",
      "    }",
      "    return _themeMode == ThemeMode.dark;",
      "  }",
      "",
      "  ${1:ThemeProvider}() {",
      "    _loadTheme();",
      "  }",
      "",
      "  Future<void> _loadTheme() async {",
      "    final prefs = await SharedPreferences.getInstance();",
      "    final themeModeIndex = prefs.getInt(_themeKey) ?? 0;",
      "    _themeMode = ThemeMode.values[themeModeIndex];",
      "    notifyListeners();",
      "  }",
      "",
      "  Future<void> setThemeMode(ThemeMode themeMode) async {",
      "    _themeMode = themeMode;",
      "    notifyListeners();",
      "    ",
      "    final prefs = await SharedPreferences.getInstance();",
      "    await prefs.setInt(_themeKey, themeMode.index);",
      "  }",
      "",
      "  Future<void> toggleTheme() async {",
      "    if (_themeMode == ThemeMode.light) {",
      "      await setThemeMode(ThemeMode.dark);",
      "    } else if (_themeMode == ThemeMode.dark) {",
      "      await setThemeMode(ThemeMode.system);",
      "    } else {",
      "      await setThemeMode(ThemeMode.light);",
      "    }",
      "  }",
      "}$0"
    ]
  },

  "Custom Color Scheme": {
    "prefix": "flt-colors",
    "description": "Custom color scheme for Material 3",
    "body": [
      "class ${1:AppColors} {",
      "  // Primary Colors",
      "  static const Color primarySeed = ${2:Color(0xFF6750A4)};",
      "  ",
      "  // Light Theme Colors",
      "  static const ColorScheme lightColorScheme = ColorScheme(",
      "    brightness: Brightness.light,",
      "    primary: ${3:Color(0xFF6750A4)},",
      "    onPrimary: ${4:Color(0xFFFFFFFF)},",
      "    primaryContainer: ${5:Color(0xFFEADDFF)},",
      "    onPrimaryContainer: ${6:Color(0xFF21005D)},",
      "    secondary: ${7:Color(0xFF625B71)},",
      "    onSecondary: ${8:Color(0xFFFFFFFF)},",
      "    secondaryContainer: ${9:Color(0xFFE8DEF8)},",
      "    onSecondaryContainer: ${10:Color(0xFF1D192B)},",
      "    tertiary: ${11:Color(0xFF7D5260)},",
      "    onTertiary: ${12:Color(0xFFFFFFFF)},",
      "    tertiaryContainer: ${13:Color(0xFFFFD8E4)},",
      "    onTertiaryContainer: ${14:Color(0xFF31111D)},",
      "    error: ${15:Color(0xFFBA1A1A)},",
      "    onError: ${16:Color(0xFFFFFFFF)},",
      "    errorContainer: ${17:Color(0xFFFFDAD6)},",
      "    onErrorContainer: ${18:Color(0xFF410002)},",
      "    background: ${19:Color(0xFFFFFBFE)},",
      "    onBackground: ${20:Color(0xFF1C1B1F)},",
      "    surface: ${21:Color(0xFFFFFBFE)},",
      "    onSurface: ${22:Color(0xFF1C1B1F)},",
      "    surfaceVariant: ${23:Color(0xFFE7E0EC)},",
      "    onSurfaceVariant: ${24:Color(0xFF49454F)},",
      "    outline: ${25:Color(0xFF79747E)},",
      "    outlineVariant: ${26:Color(0xFFCAC4D0)},",
      "    shadow: ${27:Color(0xFF000000)},",
      "    scrim: ${28:Color(0xFF000000)},",
      "    inverseSurface: ${29:Color(0xFF313033)},",
      "    onInverseSurface: ${30:Color(0xFFF4EFF4)},",
      "    inversePrimary: ${31:Color(0xFFD0BCFF)},",
      "    surfaceTint: ${32:Color(0xFF6750A4)},",
      "  );",
      "",
      "  // Dark Theme Colors",
      "  static const ColorScheme darkColorScheme = ColorScheme(",
      "    brightness: Brightness.dark,",
      "    primary: ${33:Color(0xFFD0BCFF)},",
      "    onPrimary: ${34:Color(0xFF381E72)},",
      "    primaryContainer: ${35:Color(0xFF4F378B)},",
      "    onPrimaryContainer: ${36:Color(0xFFEADDFF)},",
      "    secondary: ${37:Color(0xFFCCC2DC)},",
      "    onSecondary: ${38:Color(0xFF332D41)},",
      "    secondaryContainer: ${39:Color(0xFF4A4458)},",
      "    onSecondaryContainer: ${40:Color(0xFFE8DEF8)},",
      "    tertiary: ${41:Color(0xFFEFB8C8)},",
      "    onTertiary: ${42:Color(0xFF492532)},",
      "    tertiaryContainer: ${43:Color(0xFF633B48)},",
      "    onTertiaryContainer: ${44:Color(0xFFFFD8E4)},",
      "    error: ${45:Color(0xFFFFB4AB)},",
      "    onError: ${46:Color(0xFF690005)},",
      "    errorContainer: ${47:Color(0xFF93000A)},",
      "    onErrorContainer: ${48:Color(0xFFFFDAD6)},",
      "    background: ${49:Color(0xFF1C1B1F)},",
      "    onBackground: ${50:Color(0xFFE6E1E5)},",
      "    surface: ${51:Color(0xFF1C1B1F)},",
      "    onSurface: ${52:Color(0xFFE6E1E5)},",
      "    surfaceVariant: ${53:Color(0xFF49454F)},",
      "    onSurfaceVariant: ${54:Color(0xFFCAC4D0)},",
      "    outline: ${55:Color(0xFF938F99)},",
      "    outlineVariant: ${56:Color(0xFF49454F)},",
      "    shadow: ${57:Color(0xFF000000)},",
      "    scrim: ${58:Color(0xFF000000)},",
      "    inverseSurface: ${59:Color(0xFFE6E1E5)},",
      "    onInverseSurface: ${60:Color(0xFF313033)},",
      "    inversePrimary: ${61:Color(0xFF6750A4)},",
      "    surfaceTint: ${62:Color(0xFFD0BCFF)},",
      "  );",
      "}$0"
    ]
  },

  "Theme Toggle Widget": {
    "prefix": "flt-toggle",
    "description": "Theme toggle widget with icon",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:provider/provider.dart';",
      "",
      "class ${1:ThemeToggle} extends StatelessWidget {",
      "  const ${1:ThemeToggle}({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Consumer<${2:ThemeProvider}>(",
      "      builder: (context, themeProvider, child) {",
      "        return PopupMenuButton<ThemeMode>(",
      "          icon: Icon(",
      "            themeProvider.isDarkMode",
      "                ? Icons.dark_mode",
      "                : Icons.light_mode,",
      "          ),",
      "          onSelected: (ThemeMode mode) {",
      "            themeProvider.setThemeMode(mode);",
      "          },",
      "          itemBuilder: (context) => [",
      "            PopupMenuItem(",
      "              value: ThemeMode.light,",
      "              child: Row(",
      "                children: [",
      "                  Icon(",
      "                    Icons.light_mode,",
      "                    color: themeProvider.themeMode == ThemeMode.light",
      "                        ? Theme.of(context).colorScheme.primary",
      "                        : null,",
      "                  ),",
      "                  const SizedBox(width: 8),",
      "                  const Text('Light'),",
      "                ],",
      "              ),",
      "            ),",
      "            PopupMenuItem(",
      "              value: ThemeMode.dark,",
      "              child: Row(",
      "                children: [",
      "                  Icon(",
      "                    Icons.dark_mode,",
      "                    color: themeProvider.themeMode == ThemeMode.dark",
      "                        ? Theme.of(context).colorScheme.primary",
      "                        : null,",
      "                  ),",
      "                  const SizedBox(width: 8),",
      "                  const Text('Dark'),",
      "                ],",
      "              ),",
      "            ),",
      "            PopupMenuItem(",
      "              value: ThemeMode.system,",
      "              child: Row(",
      "                children: [",
      "                  Icon(",
      "                    Icons.settings_suggest,",
      "                    color: themeProvider.themeMode == ThemeMode.system",
      "                        ? Theme.of(context).colorScheme.primary",
      "                        : null,",
      "                  ),",
      "                  const SizedBox(width: 8),",
      "                  const Text('System'),",
      "                ],",
      "              ),",
      "            ),",
      "          ],",
      "        );",
      "      },",
      "    );",
      "  }",
      "}$0"
    ]
  },

  "Typography Theme": {
    "prefix": "flt-typography",
    "description": "Custom typography theme",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:google_fonts/google_fonts.dart';",
      "",
      "class ${1:AppTypography} {",
      "  static TextTheme get textTheme {",
      "    return GoogleFonts.${2:robotoTextTheme}().copyWith(",
      "      displayLarge: GoogleFonts.${2:roboto}(",
      "        fontSize: 57,",
      "        fontWeight: FontWeight.w400,",
      "        letterSpacing: -0.25,",
      "      ),",
      "      displayMedium: GoogleFonts.${2:roboto}(",
      "        fontSize: 45,",
      "        fontWeight: FontWeight.w400,",
      "        letterSpacing: 0,",
      "      ),",
      "      displaySmall: GoogleFonts.${2:roboto}(",
      "        fontSize: 36,",
      "        fontWeight: FontWeight.w400,",
      "        letterSpacing: 0,",
      "      ),",
      "      headlineLarge: GoogleFonts.${2:roboto}(",
      "        fontSize: 32,",
      "        fontWeight: FontWeight.w400,",
      "        letterSpacing: 0,",
      "      ),",
      "      headlineMedium: GoogleFonts.${2:roboto}(",
      "        fontSize: 28,",
      "        fontWeight: FontWeight.w400,",
      "        letterSpacing: 0,",
      "      ),",
      "      headlineSmall: GoogleFonts.${2:roboto}(",
      "        fontSize: 24,",
      "        fontWeight: FontWeight.w400,",
      "        letterSpacing: 0,",
      "      ),",
      "      titleLarge: GoogleFonts.${2:roboto}(",
      "        fontSize: 22,",
      "        fontWeight: FontWeight.w400,",
      "        letterSpacing: 0,",
      "      ),",
      "      titleMedium: GoogleFonts.${2:roboto}(",
      "        fontSize: 16,",
      "        fontWeight: FontWeight.w500,",
      "        letterSpacing: 0.15,",
      "      ),",
      "      titleSmall: GoogleFonts.${2:roboto}(",
      "        fontSize: 14,",
      "        fontWeight: FontWeight.w500,",
      "        letterSpacing: 0.1,",
      "      ),",
      "      labelLarge: GoogleFonts.${2:roboto}(",
      "        fontSize: 14,",
      "        fontWeight: FontWeight.w500,",
      "        letterSpacing: 0.1,",
      "      ),",
      "      labelMedium: GoogleFonts.${2:roboto}(",
      "        fontSize: 12,",
      "        fontWeight: FontWeight.w500,",
      "        letterSpacing: 0.5,",
      "      ),",
      "      labelSmall: GoogleFonts.${2:roboto}(",
      "        fontSize: 11,",
      "        fontWeight: FontWeight.w500,",
      "        letterSpacing: 0.5,",
      "      ),",
      "      bodyLarge: GoogleFonts.${2:roboto}(",
      "        fontSize: 16,",
      "        fontWeight: FontWeight.w400,",
      "        letterSpacing: 0.5,",
      "      ),",
      "      bodyMedium: GoogleFonts.${2:roboto}(",
      "        fontSize: 14,",
      "        fontWeight: FontWeight.w400,",
      "        letterSpacing: 0.25,",
      "      ),",
      "      bodySmall: GoogleFonts.${2:roboto}(",
      "        fontSize: 12,",
      "        fontWeight: FontWeight.w400,",
      "        letterSpacing: 0.4,",
      "      ),",
      "    );",
      "  }",
      "",
      "  // Custom text styles",
      "  static TextStyle get caption => GoogleFonts.${2:roboto}(",
      "    fontSize: 12,",
      "    fontWeight: FontWeight.w400,",
      "    letterSpacing: 0.4,",
      "  );",
      "",
      "  static TextStyle get overline => GoogleFonts.${2:roboto}(",
      "    fontSize: 10,",
      "    fontWeight: FontWeight.w400,",
      "    letterSpacing: 1.5,",
      "  );",
      "}$0"
    ]
  },

  "Color Extension": {
    "prefix": "flt-extension",
    "description": "Color extension with Material 3 colors",
    "body": [
      "extension ${1:ColorSchemeExtension} on ColorScheme {",
      "  // Custom colors for your app",
      "  Color get success => brightness == Brightness.light",
      "      ? const Color(0xFF${2:4CAF50})",
      "      : const Color(0xFF${3:81C784});",
      "",
      "  Color get onSuccess => brightness == Brightness.light",
      "      ? const Color(0xFF${4:FFFFFF})",
      "      : const Color(0xFF${5:000000});",
      "",
      "  Color get warning => brightness == Brightness.light",
      "      ? const Color(0xFF${6:FF9800})",
      "      : const Color(0xFF${7:FFB74D});",
      "",
      "  Color get onWarning => brightness == Brightness.light",
      "      ? const Color(0xFF${8:000000})",
      "      : const Color(0xFF${9:000000});",
      "",
      "  Color get info => brightness == Brightness.light",
      "      ? const Color(0xFF${10:2196F3})",
      "      : const Color(0xFF${11:64B5F6});",
      "",
      "  Color get onInfo => brightness == Brightness.light",
      "      ? const Color(0xFF${12:FFFFFF})",
      "      : const Color(0xFF${13:000000});",
      "",
      "  // Surface variants",
      "  Color get surfaceContainer => brightness == Brightness.light",
      "      ? const Color(0xFF${14:F3F3F3})",
      "      : const Color(0xFF${15:1F1F1F});",
      "",
      "  Color get surfaceContainerHigh => brightness == Brightness.light",
      "      ? const Color(0xFF${16:ECECEC})",
      "      : const Color(0xFF${17:2C2C2C});",
      "",
      "  Color get surfaceContainerHighest => brightness == Brightness.light",
      "      ? const Color(0xFF${18:E6E6E6})",
      "      : const Color(0xFF${19:363636});",
      "",
      "  Color get surfaceContainerLow => brightness == Brightness.light",
      "      ? const Color(0xFF${20:F9F9F9})",
      "      : const Color(0xFF${21:1A1A1A});",
      "",
      "  Color get surfaceContainerLowest => brightness == Brightness.light",
      "      ? const Color(0xFF${22:FFFFFF})",
      "      : const Color(0xFF${23:0F0F0F});",
      "}$0"
    ]
  }
}
