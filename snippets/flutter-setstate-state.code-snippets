{
  "StatefulWidget with SetState": {
    "prefix": "fls-stateful",
    "description": "Complete StatefulWidget with setState management",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:Counter}Widget extends StatefulWidget {",
      "  const ${1:Counter}Widget({",
      "    super.key,",
      "    this.initialValue = 0,",
      "    this.onChanged,",
      "  });",
      "",
      "  final int initialValue;",
      "  final ValueChanged<int>? onChanged;",
      "",
      "  @override",
      "  State<${1:Counter}Widget> createState() => _${1:Counter}WidgetState();",
      "}",
      "",
      "class _${1:Counter}WidgetState extends State<${1:Counter}Widget>",
      "    with TickerProviderStateMixin {",
      "  late int _count;",
      "  bool _isLoading = false;",
      "  String? _error;",
      "  List<${2:String}> _data = [];",
      "  late AnimationController _animationController;",
      "  late Animation<double> _scaleAnimation;",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _count = widget.initialValue;",
      "    ",
      "    // Initialize animation",
      "    _animationController = AnimationController(",
      "      duration: const Duration(milliseconds: 200),",
      "      vsync: this,",
      "    );",
      "    ",
      "    _scaleAnimation = Tween<double>(",
      "      begin: 1.0,",
      "      end: 1.2,",
      "    ).animate(CurvedAnimation(",
      "      parent: _animationController,",
      "      curve: Curves.elasticOut,",
      "    ));",
      "    ",
      "    // Load initial data",
      "    _loadData();",
      "  }",
      "",
      "  @override",
      "  void didUpdateWidget(covariant ${1:Counter}Widget oldWidget) {",
      "    super.didUpdateWidget(oldWidget);",
      "    if (oldWidget.initialValue != widget.initialValue) {",
      "      setState(() {",
      "        _count = widget.initialValue;",
      "      });",
      "    }",
      "  }",
      "",
      "  @override",
      "  void dispose() {",
      "    _animationController.dispose();",
      "    super.dispose();",
      "  }",
      "",
      "  // State management methods",
      "  void _increment([int value = 1]) {",
      "    setState(() {",
      "      _count += value;",
      "      _error = null; // Clear error on successful action",
      "    });",
      "    ",
      "    // Trigger animation",
      "    _animationController.forward().then((_) {",
      "      _animationController.reverse();",
      "    });",
      "    ",
      "    // Notify parent",
      "    widget.onChanged?.call(_count);",
      "  }",
      "",
      "  void _decrement([int value = 1]) {",
      "    setState(() {",
      "      _count = (_count - value).clamp(0, double.infinity).toInt();",
      "      _error = null;",
      "    });",
      "    ",
      "    widget.onChanged?.call(_count);",
      "  }",
      "",
      "  void _reset() {",
      "    setState(() {",
      "      _count = 0;",
      "      _data.clear();",
      "      _error = null;",
      "    });",
      "    ",
      "    widget.onChanged?.call(_count);",
      "  }",
      "",
      "  // Async operations with setState",
      "  Future<void> _incrementAsync([int value = 1]) async {",
      "    setState(() {",
      "      _isLoading = true;",
      "      _error = null;",
      "    });",
      "",
      "    try {",
      "      // Simulate API call",
      "      await Future.delayed(const Duration(seconds: 1));",
      "      ",
      "      // Simulate potential error",
      "      if (DateTime.now().millisecond % 5 == 0) {",
      "        throw Exception('Random async error');",
      "      }",
      "",
      "      setState(() {",
      "        _count += value;",
      "        _isLoading = false;",
      "      });",
      "      ",
      "      widget.onChanged?.call(_count);",
      "    } catch (e) {",
      "      setState(() {",
      "        _isLoading = false;",
      "        _error = 'Failed to increment: \\$e';",
      "      });",
      "    }",
      "  }",
      "",
      "  Future<void> _loadData() async {",
      "    setState(() {",
      "      _isLoading = true;",
      "      _error = null;",
      "    });",
      "",
      "    try {",
      "      // Simulate data loading",
      "      await Future.delayed(const Duration(seconds: 2));",
      "      ",
      "      setState(() {",
      "        _data = ['Item 1', 'Item 2', 'Item 3'];",
      "        _count = _data.length;",
      "        _isLoading = false;",
      "      });",
      "    } catch (e) {",
      "      setState(() {",
      "        _isLoading = false;",
      "        _error = 'Failed to load data: \\$e';",
      "      });",
      "    }",
      "  }",
      "",
      "  void _addItem() {",
      "    setState(() {",
      "      _data.add('New Item \\${_data.length + 1}');",
      "      _count = _data.length;",
      "      _error = null;",
      "    });",
      "  }",
      "",
      "  void _removeItem(${2:String} item) {",
      "    setState(() {",
      "      _data.remove(item);",
      "      _count = _data.length;",
      "      _error = null;",
      "    });",
      "  }",
      "",
      "  // Error handling",
      "  void _showError(String message) {",
      "    ScaffoldMessenger.of(context).showSnackBar(",
      "      SnackBar(",
      "        content: Text(message),",
      "        backgroundColor: Theme.of(context).colorScheme.error,",
      "        action: SnackBarAction(",
      "          label: 'Retry',",
      "          onPressed: _loadData,",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    // Show error if exists",
      "    if (_error != null) {",
      "      WidgetsBinding.instance.addPostFrameCallback((_) {",
      "        _showError(_error!);",
      "        setState(() => _error = null);",
      "      });",
      "    }",
      "",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('${3:setState Counter}'),",
      "        actions: [",
      "          IconButton(",
      "            icon: Icon(",
      "              _isLoading ? Icons.hourglass_empty : Icons.refresh,",
      "            ),",
      "            onPressed: _isLoading ? null : _loadData,",
      "          ),",
      "        ],",
      "      ),",
      "      body: SingleChildScrollView(",
      "        padding: const EdgeInsets.all(16),",
      "        child: Column(",
      "          crossAxisAlignment: CrossAxisAlignment.stretch,",
      "          children: [",
      "            // Counter Display with Animation",
      "            Card(",
      "              child: Padding(",
      "                padding: const EdgeInsets.all(16),",
      "                child: Column(",
      "                  children: [",
      "                    Text(",
      "                      'Count',",
      "                      style: Theme.of(context).textTheme.titleMedium,",
      "                    ),",
      "                    const SizedBox(height: 8),",
      "                    if (_isLoading)",
      "                      const CircularProgressIndicator()",
      "                    else",
      "                      AnimatedBuilder(",
      "                        animation: _scaleAnimation,",
      "                        builder: (context, child) {",
      "                          return Transform.scale(",
      "                            scale: _scaleAnimation.value,",
      "                            child: Text(",
      "                              '\\$_count',",
      "                              style: Theme.of(context).textTheme.headlineLarge?.copyWith(",
      "                                color: Theme.of(context).colorScheme.primary,",
      "                              ),",
      "                            ),",
      "                          );",
      "                        },",
      "                      ),",
      "                  ],",
      "                ),",
      "              ),",
      "            ),",
      "            const SizedBox(height: 16),",
      "",
      "            // Action Buttons",
      "            Row(",
      "              children: [",
      "                Expanded(",
      "                  child: ElevatedButton(",
      "                    onPressed: _isLoading ? null : () => _decrement(),",
      "                    child: const Icon(Icons.remove),",
      "                  ),",
      "                ),",
      "                const SizedBox(width: 16),",
      "                Expanded(",
      "                  child: ElevatedButton(",
      "                    onPressed: _isLoading ? null : () => _increment(),",
      "                    child: const Icon(Icons.add),",
      "                  ),",
      "                ),",
      "              ],",
      "            ),",
      "            const SizedBox(height: 16),",
      "",
      "            // Advanced Actions",
      "            Row(",
      "              children: [",
      "                Expanded(",
      "                  child: ElevatedButton(",
      "                    onPressed: _isLoading ? null : () => _incrementAsync(5),",
      "                    child: const Text('Async +5'),",
      "                  ),",
      "                ),",
      "                const SizedBox(width: 16),",
      "                Expanded(",
      "                  child: OutlinedButton(",
      "                    onPressed: _isLoading ? null : _reset,",
      "                    child: const Text('Reset'),",
      "                  ),",
      "                ),",
      "              ],",
      "            ),",
      "            const SizedBox(height: 24),",
      "",
      "            // Data List",
      "            if (_data.isNotEmpty) ...[",
      "              Text(",
      "                'Data Items (\\${_data.length})',",
      "                style: Theme.of(context).textTheme.titleLarge,",
      "              ),",
      "              const SizedBox(height: 8),",
      "              ..._data.asMap().entries.map(",
      "                (entry) {",
      "                  final index = entry.key;",
      "                  final item = entry.value;",
      "                  return AnimatedContainer(",
      "                    duration: Duration(milliseconds: 300 + (index * 50)),",
      "                    curve: Curves.easeOutBack,",
      "                    margin: const EdgeInsets.only(bottom: 8),",
      "                    child: Card(",
      "                      elevation: 2,",
      "                      child: ListTile(",
      "                        leading: CircleAvatar(",
      "                          child: Text('\\${index + 1}'),",
      "                        ),",
      "                        title: Text(item),",
      "                        trailing: IconButton(",
      "                          icon: const Icon(Icons.delete),",
      "                          onPressed: _isLoading ? null : () => _removeItem(item),",
      "                        ),",
      "                      ),",
      "                    ),",
      "                  );",
      "                },",
      "              ),",
      "              const SizedBox(height: 16),",
      "              ElevatedButton.icon(",
      "                onPressed: _isLoading ? null : _addItem,",
      "                icon: const Icon(Icons.add),",
      "                label: const Text('Add Item'),",
      "              ),",
      "            ],",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "Simple setState Pattern": {
    "prefix": "fls-simple",
    "description": "Simple setState pattern for basic state management",
    "body": [
      "class ${1:Simple}Widget extends StatefulWidget {",
      "  const ${1:Simple}Widget({super.key});",
      "",
      "  @override",
      "  State<${1:Simple}Widget> createState() => _${1:Simple}WidgetState();",
      "}",
      "",
      "class _${1:Simple}WidgetState extends State<${1:Simple}Widget> {",
      "  ${2:int} _${3:value} = ${4:0};",
      "  bool _isLoading = false;",
      "",
      "  void _update${5:Value}(${2:int} new${5:Value}) {",
      "    setState(() {",
      "      _${3:value} = new${5:Value};",
      "    });",
      "  }",
      "",
      "  Future<void> _performAsync${6:Action}() async {",
      "    setState(() {",
      "      _isLoading = true;",
      "    });",
      "",
      "    try {",
      "      // Simulate async operation",
      "      await Future.delayed(const Duration(seconds: 1));",
      "      ",
      "      setState(() {",
      "        _${3:value} = ${7:42}; // Update with result",
      "        _isLoading = false;",
      "      });",
      "    } catch (e) {",
      "      setState(() {",
      "        _isLoading = false;",
      "      });",
      "      // Handle error",
      "    }",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return ${8:Container}(",
      "      child: _isLoading",
      "          ? const CircularProgressIndicator()",
      "          : ${9:Text}('${10:Value}: \\$_${3:value}'),",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "setState Form Management": {
    "prefix": "fls-form",
    "description": "setState pattern for form management with validation",
    "body": [
      "class ${1:Contact}Form extends StatefulWidget {",
      "  const ${1:Contact}Form({super.key, this.onSubmit});",
      "",
      "  final Function(Map<String, String>)? onSubmit;",
      "",
      "  @override",
      "  State<${1:Contact}Form> createState() => _${1:Contact}FormState();",
      "}",
      "",
      "class _${1:Contact}FormState extends State<${1:Contact}Form> {",
      "  final _formKey = GlobalKey<FormState>();",
      "  final _nameController = TextEditingController();",
      "  final _emailController = TextEditingController();",
      "  final _messageController = TextEditingController();",
      "",
      "  bool _isSubmitting = false;",
      "  bool _isValid = false;",
      "  Map<String, String> _errors = {};",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _nameController.addListener(_validateForm);",
      "    _emailController.addListener(_validateForm);",
      "    _messageController.addListener(_validateForm);",
      "  }",
      "",
      "  @override",
      "  void dispose() {",
      "    _nameController.dispose();",
      "    _emailController.dispose();",
      "    _messageController.dispose();",
      "    super.dispose();",
      "  }",
      "",
      "  void _validateForm() {",
      "    setState(() {",
      "      _errors.clear();",
      "      ",
      "      // Name validation",
      "      if (_nameController.text.trim().isEmpty) {",
      "        _errors['name'] = 'Name is required';",
      "      } else if (_nameController.text.trim().length < 2) {",
      "        _errors['name'] = 'Name must be at least 2 characters';",
      "      }",
      "      ",
      "      // Email validation",
      "      final emailRegex = RegExp(r'^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}\\$');",
      "      if (_emailController.text.trim().isEmpty) {",
      "        _errors['email'] = 'Email is required';",
      "      } else if (!emailRegex.hasMatch(_emailController.text.trim())) {",
      "        _errors['email'] = 'Please enter a valid email';",
      "      }",
      "      ",
      "      // Message validation",
      "      if (_messageController.text.trim().isEmpty) {",
      "        _errors['message'] = 'Message is required';",
      "      } else if (_messageController.text.trim().length < 10) {",
      "        _errors['message'] = 'Message must be at least 10 characters';",
      "      }",
      "      ",
      "      _isValid = _errors.isEmpty;",
      "    });",
      "  }",
      "",
      "  Future<void> _submitForm() async {",
      "    if (!_isValid) return;",
      "",
      "    setState(() {",
      "      _isSubmitting = true;",
      "    });",
      "",
      "    try {",
      "      // Simulate form submission",
      "      await Future.delayed(const Duration(seconds: 2));",
      "      ",
      "      final formData = {",
      "        'name': _nameController.text.trim(),",
      "        'email': _emailController.text.trim(),",
      "        'message': _messageController.text.trim(),",
      "      };",
      "      ",
      "      widget.onSubmit?.call(formData);",
      "      ",
      "      // Show success message",
      "      if (mounted) {",
      "        ScaffoldMessenger.of(context).showSnackBar(",
      "          const SnackBar(",
      "            content: Text('Form submitted successfully!'),",
      "            backgroundColor: Colors.green,",
      "          ),",
      "        );",
      "        ",
      "        // Clear form",
      "        _clearForm();",
      "      }",
      "    } catch (e) {",
      "      if (mounted) {",
      "        ScaffoldMessenger.of(context).showSnackBar(",
      "          SnackBar(",
      "            content: Text('Error: \\$e'),",
      "            backgroundColor: Theme.of(context).colorScheme.error,",
      "          ),",
      "        );",
      "      }",
      "    } finally {",
      "      if (mounted) {",
      "        setState(() {",
      "          _isSubmitting = false;",
      "        });",
      "      }",
      "    }",
      "  }",
      "",
      "  void _clearForm() {",
      "    setState(() {",
      "      _nameController.clear();",
      "      _emailController.clear();",
      "      _messageController.clear();",
      "      _errors.clear();",
      "      _isValid = false;",
      "    });",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Card(",
      "      child: Padding(",
      "        padding: const EdgeInsets.all(16),",
      "        child: Form(",
      "          key: _formKey,",
      "          child: Column(",
      "            crossAxisAlignment: CrossAxisAlignment.stretch,",
      "            children: [",
      "              Text(",
      "                '${2:Contact Form}',",
      "                style: Theme.of(context).textTheme.headlineSmall,",
      "              ),",
      "              const SizedBox(height: 24),",
      "              ",
      "              // Name Field",
      "              TextFormField(",
      "                controller: _nameController,",
      "                decoration: InputDecoration(",
      "                  labelText: 'Name',",
      "                  errorText: _errors['name'],",
      "                  prefixIcon: const Icon(Icons.person),",
      "                ),",
      "                enabled: !_isSubmitting,",
      "              ),",
      "              const SizedBox(height: 16),",
      "              ",
      "              // Email Field",
      "              TextFormField(",
      "                controller: _emailController,",
      "                decoration: InputDecoration(",
      "                  labelText: 'Email',",
      "                  errorText: _errors['email'],",
      "                  prefixIcon: const Icon(Icons.email),",
      "                ),",
      "                keyboardType: TextInputType.emailAddress,",
      "                enabled: !_isSubmitting,",
      "              ),",
      "              const SizedBox(height: 16),",
      "              ",
      "              // Message Field",
      "              TextFormField(",
      "                controller: _messageController,",
      "                decoration: InputDecoration(",
      "                  labelText: 'Message',",
      "                  errorText: _errors['message'],",
      "                  prefixIcon: const Icon(Icons.message),",
      "                ),",
      "                maxLines: 4,",
      "                enabled: !_isSubmitting,",
      "              ),",
      "              const SizedBox(height: 24),",
      "              ",
      "              // Submit Button",
      "              ElevatedButton(",
      "                onPressed: _isValid && !_isSubmitting ? _submitForm : null,",
      "                child: _isSubmitting",
      "                    ? const SizedBox(",
      "                        height: 20,",
      "                        width: 20,",
      "                        child: CircularProgressIndicator(strokeWidth: 2),",
      "                      )",
      "                    : const Text('Submit'),",
      "              ),",
      "              const SizedBox(height: 8),",
      "              ",
      "              // Clear Button",
      "              TextButton(",
      "                onPressed: _isSubmitting ? null : _clearForm,",
      "                child: const Text('Clear'),",
      "              ),",
      "            ],",
      "          ),",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "setState List Management": {
    "prefix": "fls-list",
    "description": "setState pattern for list management with CRUD operations",
    "body": [
      "class ${1:Todo}List extends StatefulWidget {",
      "  const ${1:Todo}List({super.key});",
      "",
      "  @override",
      "  State<${1:Todo}List> createState() => _${1:Todo}ListState();",
      "}",
      "",
      "class _${1:Todo}ListState extends State<${1:Todo}List> {",
      "  final List<${2:String}> _items = [];",
      "  final TextEditingController _controller = TextEditingController();",
      "  bool _isLoading = false;",
      "  String? _error;",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    _loadItems();",
      "  }",
      "",
      "  @override",
      "  void dispose() {",
      "    _controller.dispose();",
      "    super.dispose();",
      "  }",
      "",
      "  Future<void> _loadItems() async {",
      "    setState(() {",
      "      _isLoading = true;",
      "      _error = null;",
      "    });",
      "",
      "    try {",
      "      // Simulate loading",
      "      await Future.delayed(const Duration(seconds: 1));",
      "      ",
      "      setState(() {",
      "        _items.addAll(['${3:Sample Item} 1', '${3:Sample Item} 2', '${3:Sample Item} 3']);",
      "        _isLoading = false;",
      "      });",
      "    } catch (e) {",
      "      setState(() {",
      "        _error = 'Failed to load items: \\$e';",
      "        _isLoading = false;",
      "      });",
      "    }",
      "  }",
      "",
      "  void _addItem() {",
      "    final text = _controller.text.trim();",
      "    if (text.isEmpty) return;",
      "",
      "    setState(() {",
      "      _items.insert(0, text);",
      "      _error = null;",
      "    });",
      "    ",
      "    _controller.clear();",
      "  }",
      "",
      "  void _removeItem(int index) {",
      "    setState(() {",
      "      _items.removeAt(index);",
      "    });",
      "  }",
      "",
      "  void _editItem(int index, ${2:String} newValue) {",
      "    setState(() {",
      "      _items[index] = newValue;",
      "    });",
      "  }",
      "",
      "  void _moveItem(int oldIndex, int newIndex) {",
      "    setState(() {",
      "      if (newIndex > oldIndex) newIndex--;",
      "      final item = _items.removeAt(oldIndex);",
      "      _items.insert(newIndex, item);",
      "    });",
      "  }",
      "",
      "  void _clearAll() {",
      "    setState(() {",
      "      _items.clear();",
      "    });",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Column(",
      "      children: [",
      "        // Add Item Section",
      "        Padding(",
      "          padding: const EdgeInsets.all(16),",
      "          child: Row(",
      "            children: [",
      "              Expanded(",
      "                child: TextField(",
      "                  controller: _controller,",
      "                  decoration: const InputDecoration(",
      "                    hintText: '${4:Enter new item}',",
      "                    border: OutlineInputBorder(),",
      "                  ),",
      "                  onSubmitted: (_) => _addItem(),",
      "                ),",
      "              ),",
      "              const SizedBox(width: 8),",
      "              ElevatedButton(",
      "                onPressed: _addItem,",
      "                child: const Icon(Icons.add),",
      "              ),",
      "            ],",
      "          ),",
      "        ),",
      "        ",
      "        // Controls",
      "        Padding(",
      "          padding: const EdgeInsets.symmetric(horizontal: 16),",
      "          child: Row(",
      "            children: [",
      "              Text('${5:Items}: \\${_items.length}'),",
      "              const Spacer(),",
      "              if (_items.isNotEmpty)",
      "                TextButton(",
      "                  onPressed: _clearAll,",
      "                  child: const Text('Clear All'),",
      "                ),",
      "            ],",
      "          ),",
      "        ),",
      "        ",
      "        // Error Display",
      "        if (_error != null)",
      "          Container(",
      "            width: double.infinity,",
      "            margin: const EdgeInsets.all(16),",
      "            padding: const EdgeInsets.all(12),",
      "            decoration: BoxDecoration(",
      "              color: Theme.of(context).colorScheme.errorContainer,",
      "              borderRadius: BorderRadius.circular(8),",
      "            ),",
      "            child: Text(",
      "              _error!,",
      "              style: TextStyle(",
      "                color: Theme.of(context).colorScheme.onErrorContainer,",
      "              ),",
      "            ),",
      "          ),",
      "        ",
      "        // List",
      "        Expanded(",
      "          child: _isLoading",
      "              ? const Center(child: CircularProgressIndicator())",
      "              : _items.isEmpty",
      "                  ? const Center(",
      "                      child: Text('${6:No items yet. Add one above!}'),",
      "                    )",
      "                  : ReorderableListView.builder(",
      "                      itemCount: _items.length,",
      "                      onReorder: _moveItem,",
      "                      itemBuilder: (context, index) {",
      "                        final item = _items[index];",
      "                        return Dismissible(",
      "                          key: Key('\\$item-\\$index'),",
      "                          direction: DismissDirection.endToStart,",
      "                          background: Container(",
      "                            alignment: Alignment.centerRight,",
      "                            padding: const EdgeInsets.only(right: 16),",
      "                            color: Theme.of(context).colorScheme.error,",
      "                            child: Icon(",
      "                              Icons.delete,",
      "                              color: Theme.of(context).colorScheme.onError,",
      "                            ),",
      "                          ),",
      "                          onDismissed: (_) => _removeItem(index),",
      "                          child: Card(",
      "                            margin: const EdgeInsets.symmetric(",
      "                              horizontal: 16,",
      "                              vertical: 4,",
      "                            ),",
      "                            child: ListTile(",
      "                              leading: CircleAvatar(",
      "                                child: Text('\\${index + 1}'),",
      "                              ),",
      "                              title: Text(item),",
      "                              trailing: Row(",
      "                                mainAxisSize: MainAxisSize.min,",
      "                                children: [",
      "                                  IconButton(",
      "                                    icon: const Icon(Icons.edit),",
      "                                    onPressed: () => _showEditDialog(index, item),",
      "                                  ),",
      "                                  IconButton(",
      "                                    icon: const Icon(Icons.delete),",
      "                                    onPressed: () => _removeItem(index),",
      "                                  ),",
      "                                  const Icon(Icons.drag_handle),",
      "                                ],",
      "                              ),",
      "                            ),",
      "                          ),",
      "                        );",
      "                      },",
      "                    ),",
      "        ),",
      "      ],",
      "    );",
      "  }",
      "",
      "  void _showEditDialog(int index, ${2:String} currentValue) {",
      "    final controller = TextEditingController(text: currentValue);",
      "    ",
      "    showDialog(",
      "      context: context,",
      "      builder: (context) => AlertDialog(",
      "        title: const Text('${7:Edit Item}'),",
      "        content: TextField(",
      "          controller: controller,",
      "          autofocus: true,",
      "          decoration: const InputDecoration(",
      "            hintText: '${8:Enter new value}',",
      "          ),",
      "        ),",
      "        actions: [",
      "          TextButton(",
      "            onPressed: () => Navigator.pop(context),",
      "            child: const Text('Cancel'),",
      "          ),",
      "          ElevatedButton(",
      "            onPressed: () {",
      "              final newValue = controller.text.trim();",
      "              if (newValue.isNotEmpty) {",
      "                _editItem(index, newValue);",
      "              }",
      "              Navigator.pop(context);",
      "            },",
      "            child: const Text('Save'),",
      "          ),",
      "        ],",
      "      ),",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "setState Animation Controller": {
    "prefix": "fls-animation",
    "description": "setState with AnimationController management",
    "body": [
      "class ${1:Animated}Widget extends StatefulWidget {",
      "  const ${1:Animated}Widget({super.key});",
      "",
      "  @override",
      "  State<${1:Animated}Widget> createState() => _${1:Animated}WidgetState();",
      "}",
      "",
      "class _${1:Animated}WidgetState extends State<${1:Animated}Widget>",
      "    with TickerProviderStateMixin {",
      "  late AnimationController _controller;",
      "  late Animation<double> _scaleAnimation;",
      "  late Animation<double> _rotationAnimation;",
      "  late Animation<Color?> _colorAnimation;",
      "",
      "  bool _isAnimating = false;",
      "",
      "  @override",
      "  void initState() {",
      "    super.initState();",
      "    ",
      "    _controller = AnimationController(",
      "      duration: const Duration(seconds: 2),",
      "      vsync: this,",
      "    );",
      "",
      "    _scaleAnimation = Tween<double>(",
      "      begin: 1.0,",
      "      end: 1.5,",
      "    ).animate(CurvedAnimation(",
      "      parent: _controller,",
      "      curve: Curves.elasticOut,",
      "    ));",
      "",
      "    _rotationAnimation = Tween<double>(",
      "      begin: 0.0,",
      "      end: 1.0,",
      "    ).animate(CurvedAnimation(",
      "      parent: _controller,",
      "      curve: Curves.easeInOut,",
      "    ));",
      "",
      "    _colorAnimation = ColorTween(",
      "      begin: Colors.blue,",
      "      end: Colors.red,",
      "    ).animate(_controller);",
      "",
      "    // Listen to animation status",
      "    _controller.addStatusListener((status) {",
      "      setState(() {",
      "        _isAnimating = status == AnimationStatus.forward ||",
      "                      status == AnimationStatus.reverse;",
      "      });",
      "    });",
      "  }",
      "",
      "  @override",
      "  void dispose() {",
      "    _controller.dispose();",
      "    super.dispose();",
      "  }",
      "",
      "  void _startAnimation() {",
      "    setState(() {",
      "      _controller.forward();",
      "    });",
      "  }",
      "",
      "  void _reverseAnimation() {",
      "    setState(() {",
      "      _controller.reverse();",
      "    });",
      "  }",
      "",
      "  void _resetAnimation() {",
      "    setState(() {",
      "      _controller.reset();",
      "    });",
      "  }",
      "",
      "  void _repeatAnimation() {",
      "    setState(() {",
      "      _controller.repeat(reverse: true);",
      "    });",
      "  }",
      "",
      "  void _stopAnimation() {",
      "    setState(() {",
      "      _controller.stop();",
      "    });",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return Column(",
      "      mainAxisAlignment: MainAxisAlignment.center,",
      "      children: [",
      "        // Animated Container",
      "        AnimatedBuilder(",
      "          animation: _controller,",
      "          builder: (context, child) {",
      "            return Transform.scale(",
      "              scale: _scaleAnimation.value,",
      "              child: Transform.rotate(",
      "                angle: _rotationAnimation.value * 2 * 3.14159,",
      "                child: Container(",
      "                  width: 100,",
      "                  height: 100,",
      "                  decoration: BoxDecoration(",
      "                    color: _colorAnimation.value,",
      "                    borderRadius: BorderRadius.circular(12),",
      "                    boxShadow: [",
      "                      BoxShadow(",
      "                        color: (_colorAnimation.value ?? Colors.blue).withOpacity(0.3),",
      "                        blurRadius: 10,",
      "                        spreadRadius: 2,",
      "                      ),",
      "                    ],",
      "                  ),",
      "                  child: const Icon(",
      "                    Icons.${2:favorite},",
      "                    color: Colors.white,",
      "                    size: 40,",
      "                  ),",
      "                ),",
      "              ),",
      "            );",
      "          },",
      "        ),",
      "        const SizedBox(height: 32),",
      "",
      "        // Animation Info",
      "        AnimatedBuilder(",
      "          animation: _controller,",
      "          builder: (context, child) {",
      "            return Text(",
      "              'Progress: \\${(_controller.value * 100).toStringAsFixed(1)}%',",
      "              style: Theme.of(context).textTheme.titleMedium,",
      "            );",
      "          },",
      "        ),",
      "        const SizedBox(height: 8),",
      "        Text(",
      "          'Status: \\${_isAnimating ? \"Animating\" : \"Stopped\"}',",
      "          style: Theme.of(context).textTheme.bodyMedium,",
      "        ),",
      "        const SizedBox(height: 32),",
      "",
      "        // Control Buttons",
      "        Wrap(",
      "          spacing: 8,",
      "          runSpacing: 8,",
      "          alignment: WrapAlignment.center,",
      "          children: [",
      "            ElevatedButton(",
      "              onPressed: _controller.isAnimating ? null : _startAnimation,",
      "              child: const Text('Start'),",
      "            ),",
      "            ElevatedButton(",
      "              onPressed: _controller.isAnimating ? null : _reverseAnimation,",
      "              child: const Text('Reverse'),",
      "            ),",
      "            ElevatedButton(",
      "              onPressed: _resetAnimation,",
      "              child: const Text('Reset'),",
      "            ),",
      "            ElevatedButton(",
      "              onPressed: _controller.isAnimating ? null : _repeatAnimation,",
      "              child: const Text('Repeat'),",
      "            ),",
      "            ElevatedButton(",
      "              onPressed: _controller.isAnimating ? _stopAnimation : null,",
      "              child: const Text('Stop'),",
      "            ),",
      "          ],",
      "        ),",
      "      ],",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  }
}
