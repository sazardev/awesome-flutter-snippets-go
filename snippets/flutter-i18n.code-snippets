{
  "i18n Setup": {
    "prefix": "fli-setup",
    "description": "Complete internationalization setup with flutter_localizations",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_localizations/flutter_localizations.dart';",
      "import 'package:intl/intl.dart';",
      "",
      "import 'l10n/app_localizations.dart';",
      "",
      "class ${1:App}Localizations {",
      "  ${1:App}Localizations(this.locale);",
      "",
      "  final Locale locale;",
      "",
      "  static ${1:App}Localizations? of(BuildContext context) {",
      "    return Localizations.of<${1:App}Localizations>(context, ${1:App}Localizations);",
      "  }",
      "",
      "  static const LocalizationsDelegate<${1:App}Localizations> delegate =",
      "      _${1:App}LocalizationsDelegate();",
      "",
      "  static const List<LocalizationsDelegate<dynamic>> localizationsDelegates = [",
      "    delegate,",
      "    GlobalMaterialLocalizations.delegate,",
      "    GlobalWidgetsLocalizations.delegate,",
      "    GlobalCupertinoLocalizations.delegate,",
      "  ];",
      "",
      "  static const List<Locale> supportedLocales = [",
      "    Locale('en', 'US'),",
      "    Locale('es', 'ES'),",
      "    Locale('fr', 'FR'),",
      "    Locale('de', 'DE'),",
      "    Locale('it', 'IT'),",
      "    Locale('pt', 'BR'),",
      "    Locale('ja', 'JP'),",
      "    Locale('ko', 'KR'),",
      "    Locale('zh', 'CN'),",
      "  ];",
      "",
      "  // Texts",
      "  String get appTitle {",
      "    switch (locale.languageCode) {",
      "      case 'es':",
      "        return '${2:Mi Aplicación}';",
      "      case 'fr':",
      "        return '${3:Mon Application}';",
      "      case 'de':",
      "        return '${4:Meine Anwendung}';",
      "      case 'it':",
      "        return '${5:La Mia App}';",
      "      case 'pt':",
      "        return '${6:Meu Aplicativo}';",
      "      case 'ja':",
      "        return '${7:私のアプリ}';",
      "      case 'ko':",
      "        return '${8:내 앱}';",
      "      case 'zh':",
      "        return '${9:我的应用}';",
      "      default:",
      "        return '${10:My App}';",
      "    }",
      "  }",
      "",
      "  String get welcome {",
      "    switch (locale.languageCode) {",
      "      case 'es':",
      "        return 'Bienvenido';",
      "      case 'fr':",
      "        return 'Bienvenue';",
      "      case 'de':",
      "        return 'Willkommen';",
      "      case 'it':",
      "        return 'Benvenuto';",
      "      case 'pt':",
      "        return 'Bem-vindo';",
      "      case 'ja':",
      "        return 'ようこそ';",
      "      case 'ko':",
      "        return '환영합니다';",
      "      case 'zh':",
      "        return '欢迎';",
      "      default:",
      "        return 'Welcome';",
      "    }",
      "  }",
      "",
      "  String get settings {",
      "    switch (locale.languageCode) {",
      "      case 'es':",
      "        return 'Configuración';",
      "      case 'fr':",
      "        return 'Paramètres';",
      "      case 'de':",
      "        return 'Einstellungen';",
      "      case 'it':",
      "        return 'Impostazioni';",
      "      case 'pt':",
      "        return 'Configurações';",
      "      case 'ja':",
      "        return '設定';",
      "      case 'ko':",
      "        return '설정';",
      "      case 'zh':",
      "        return '设置';",
      "      default:",
      "        return 'Settings';",
      "    }",
      "  }",
      "",
      "  // Common actions",
      "  String get save {",
      "    switch (locale.languageCode) {",
      "      case 'es':",
      "        return 'Guardar';",
      "      case 'fr':",
      "        return 'Enregistrer';",
      "      case 'de':",
      "        return 'Speichern';",
      "      case 'it':",
      "        return 'Salva';",
      "      case 'pt':",
      "        return 'Salvar';",
      "      case 'ja':",
      "        return '保存';",
      "      case 'ko':",
      "        return '저장';",
      "      case 'zh':",
      "        return '保存';",
      "      default:",
      "        return 'Save';",
      "    }",
      "  }",
      "",
      "  String get cancel {",
      "    switch (locale.languageCode) {",
      "      case 'es':",
      "        return 'Cancelar';",
      "      case 'fr':",
      "        return 'Annuler';",
      "      case 'de':",
      "        return 'Abbrechen';",
      "      case 'it':",
      "        return 'Annulla';",
      "      case 'pt':",
      "        return 'Cancelar';",
      "      case 'ja':",
      "        return 'キャンセル';",
      "      case 'ko':",
      "        return '취소';",
      "      case 'zh':",
      "        return '取消';",
      "      default:",
      "        return 'Cancel';",
      "    }",
      "  }",
      "",
      "  // Parameterized messages",
      "  String greeting(String name) {",
      "    switch (locale.languageCode) {",
      "      case 'es':",
      "        return 'Hola, \\$name!';",
      "      case 'fr':",
      "        return 'Bonjour, \\$name!';",
      "      case 'de':",
      "        return 'Hallo, \\$name!';",
      "      case 'it':",
      "        return 'Ciao, \\$name!';",
      "      case 'pt':",
      "        return 'Olá, \\$name!';",
      "      case 'ja':",
      "        return 'こんにちは、\\$name！';",
      "      case 'ko':",
      "        return '안녕하세요, \\$name!';",
      "      case 'zh':",
      "        return '你好，\\$name！';",
      "      default:",
      "        return 'Hello, \\$name!';",
      "    }",
      "  }",
      "",
      "  String itemCount(int count) {",
      "    switch (locale.languageCode) {",
      "      case 'es':",
      "        return count == 1 ? '\\$count elemento' : '\\$count elementos';",
      "      case 'fr':",
      "        return count == 1 ? '\\$count élément' : '\\$count éléments';",
      "      case 'de':",
      "        return count == 1 ? '\\$count Element' : '\\$count Elemente';",
      "      case 'it':",
      "        return count == 1 ? '\\$count elemento' : '\\$count elementi';",
      "      case 'pt':",
      "        return count == 1 ? '\\$count item' : '\\$count itens';",
      "      case 'ja':",
      "        return '\\$count個のアイテム';",
      "      case 'ko':",
      "        return '\\$count개 항목';",
      "      case 'zh':",
      "        return '\\$count个项目';",
      "      default:",
      "        return count == 1 ? '\\$count item' : '\\$count items';",
      "    }",
      "  }",
      "",
      "  // Date formatting",
      "  String formatDate(DateTime date) {",
      "    return DateFormat.yMMMd(locale.toString()).format(date);",
      "  }",
      "",
      "  String formatTime(DateTime time) {",
      "    return DateFormat.Hm(locale.toString()).format(time);",
      "  }",
      "",
      "  String formatCurrency(double amount, String currencyCode) {",
      "    return NumberFormat.currency(",
      "      locale: locale.toString(),",
      "      symbol: currencyCode,",
      "    ).format(amount);",
      "  }",
      "}",
      "",
      "class _${1:App}LocalizationsDelegate",
      "    extends LocalizationsDelegate<${1:App}Localizations> {",
      "  const _${1:App}LocalizationsDelegate();",
      "",
      "  @override",
      "  bool isSupported(Locale locale) {",
      "    return ${1:App}Localizations.supportedLocales",
      "        .any((supportedLocale) => supportedLocale.languageCode == locale.languageCode);",
      "  }",
      "",
      "  @override",
      "  Future<${1:App}Localizations> load(Locale locale) async {",
      "    return ${1:App}Localizations(locale);",
      "  }",
      "",
      "  @override",
      "  bool shouldReload(_${1:App}LocalizationsDelegate old) => false;",
      "}",
      "",
      "// Extension for easy access",
      "extension ${1:App}LocalizationsX on BuildContext {",
      "  ${1:App}Localizations get l10n => ${1:App}Localizations.of(this)!;",
      "}",
      "$0"
    ]
  },

  "Language Selector": {
    "prefix": "fli-language-selector",
    "description": "Language selector widget with flags and persistence",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:shared_preferences/shared_preferences.dart';",
      "",
      "class ${1:Language}Selector extends StatefulWidget {",
      "  const ${1:Language}Selector({",
      "    super.key,",
      "    required this.currentLocale,",
      "    required this.onLanguageChanged,",
      "  });",
      "",
      "  final Locale currentLocale;",
      "  final Function(Locale) onLanguageChanged;",
      "",
      "  @override",
      "  State<${1:Language}Selector> createState() => _${1:Language}SelectorState();",
      "}",
      "",
      "class _${1:Language}SelectorState extends State<${1:Language}Selector> {",
      "  static const String _languageKey = 'selected_language';",
      "",
      "  final List<LanguageModel> _languages = [",
      "    LanguageModel('en', 'US', 'English', '🇺🇸'),",
      "    LanguageModel('es', 'ES', 'Español', '🇪🇸'),",
      "    LanguageModel('fr', 'FR', 'Français', '🇫🇷'),",
      "    LanguageModel('de', 'DE', 'Deutsch', '🇩🇪'),",
      "    LanguageModel('it', 'IT', 'Italiano', '🇮🇹'),",
      "    LanguageModel('pt', 'BR', 'Português', '🇧🇷'),",
      "    LanguageModel('ja', 'JP', '日本語', '🇯🇵'),",
      "    LanguageModel('ko', 'KR', '한국어', '🇰🇷'),",
      "    LanguageModel('zh', 'CN', '中文', '🇨🇳'),",
      "  ];",
      "",
      "  Future<void> _saveLanguage(Locale locale) async {",
      "    final prefs = await SharedPreferences.getInstance();",
      "    await prefs.setString(_languageKey, locale.toString());",
      "  }",
      "",
      "  static Future<Locale?> getSavedLanguage() async {",
      "    final prefs = await SharedPreferences.getInstance();",
      "    final languageCode = prefs.getString(_languageKey);",
      "    if (languageCode != null) {",
      "      final parts = languageCode.split('_');",
      "      return Locale(parts[0], parts.length > 1 ? parts[1] : null);",
      "    }",
      "    return null;",
      "  }",
      "",
      "  void _showLanguageDialog() {",
      "    showDialog(",
      "      context: context,",
      "      builder: (BuildContext context) {",
      "        return AlertDialog(",
      "          title: const Text('Select Language'),",
      "          content: SizedBox(",
      "            width: double.maxFinite,",
      "            child: ListView.builder(",
      "              shrinkWrap: true,",
      "              itemCount: _languages.length,",
      "              itemBuilder: (context, index) {",
      "                final language = _languages[index];",
      "                final isSelected = widget.currentLocale.languageCode ==",
      "                    language.languageCode;",
      "",
      "                return ListTile(",
      "                  leading: Text(",
      "                    language.flag,",
      "                    style: const TextStyle(fontSize: 24),",
      "                  ),",
      "                  title: Text(language.name),",
      "                  trailing: isSelected",
      "                      ? Icon(",
      "                          Icons.check,",
      "                          color: Theme.of(context).colorScheme.primary,",
      "                        )",
      "                      : null,",
      "                  onTap: () {",
      "                    final newLocale = Locale(",
      "                      language.languageCode,",
      "                      language.countryCode,",
      "                    );",
      "                    widget.onLanguageChanged(newLocale);",
      "                    _saveLanguage(newLocale);",
      "                    Navigator.of(context).pop();",
      "                  },",
      "                );",
      "              },",
      "            ),",
      "          ),",
      "          actions: [",
      "            TextButton(",
      "              onPressed: () => Navigator.of(context).pop(),",
      "              child: const Text('Cancel'),",
      "            ),",
      "          ],",
      "        );",
      "      },",
      "    );",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    final currentLanguage = _languages.firstWhere(",
      "      (lang) => lang.languageCode == widget.currentLocale.languageCode,",
      "      orElse: () => _languages.first,",
      "    );",
      "",
      "    return InkWell(",
      "      onTap: _showLanguageDialog,",
      "      borderRadius: BorderRadius.circular(8),",
      "      child: Container(",
      "        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),",
      "        decoration: BoxDecoration(",
      "          border: Border.all(",
      "            color: Theme.of(context).colorScheme.outline,",
      "          ),",
      "          borderRadius: BorderRadius.circular(8),",
      "        ),",
      "        child: Row(",
      "          mainAxisSize: MainAxisSize.min,",
      "          children: [",
      "            Text(",
      "              currentLanguage.flag,",
      "              style: const TextStyle(fontSize: 20),",
      "            ),",
      "            const SizedBox(width: 8),",
      "            Text(",
      "              currentLanguage.name,",
      "              style: Theme.of(context).textTheme.bodyMedium,",
      "            ),",
      "            const SizedBox(width: 4),",
      "            Icon(",
      "              Icons.arrow_drop_down,",
      "              color: Theme.of(context).colorScheme.onSurface,",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "class LanguageModel {",
      "  final String languageCode;",
      "  final String countryCode;",
      "  final String name;",
      "  final String flag;",
      "",
      "  const LanguageModel(",
      "    this.languageCode,",
      "    this.countryCode,",
      "    this.name,",
      "    this.flag,",
      "  );",
      "}",
      "$0"
    ]
  }
}
