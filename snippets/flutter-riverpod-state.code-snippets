{
  "Riverpod Provider": {
    "prefix": "flr-provider",
    "description": "Complete Riverpod provider with state management",
    "body": [
      "import 'package:flutter/material.dart';",
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "// State class",
      "class ${1:Counter}State {",
      "  final int count;",
      "  final bool isLoading;",
      "  final String? error;",
      "  final List<${2:String}> data;",
      "",
      "  const ${1:Counter}State({",
      "    this.count = 0,",
      "    this.isLoading = false,",
      "    this.error,",
      "    this.data = const [],",
      "  });",
      "",
      "  ${1:Counter}State copyWith({",
      "    int? count,",
      "    bool? isLoading,",
      "    String? error,",
      "    List<${2:String}>? data,",
      "    bool clearError = false,",
      "  }) {",
      "    return ${1:Counter}State(",
      "      count: count ?? this.count,",
      "      isLoading: isLoading ?? this.isLoading,",
      "      error: clearError ? null : (error ?? this.error),",
      "      data: data ?? this.data,",
      "    );",
      "  }",
      "",
      "  @override",
      "  bool operator ==(Object other) {",
      "    if (identical(this, other)) return true;",
      "    return other is ${1:Counter}State &&",
      "        other.count == count &&",
      "        other.isLoading == isLoading &&",
      "        other.error == error &&",
      "        other.data.length == data.length;",
      "  }",
      "",
      "  @override",
      "  int get hashCode {",
      "    return count.hashCode ^",
      "        isLoading.hashCode ^",
      "        error.hashCode ^",
      "        data.length.hashCode;",
      "  }",
      "}",
      "",
      "// StateNotifier",
      "class ${1:Counter}Notifier extends StateNotifier<${1:Counter}State> {",
      "  ${1:Counter}Notifier() : super(const ${1:Counter}State());",
      "",
      "  void increment([int value = 1]) {",
      "    state = state.copyWith(",
      "      count: state.count + value,",
      "      clearError: true,",
      "    );",
      "  }",
      "",
      "  void decrement([int value = 1]) {",
      "    final newCount = state.count - value;",
      "    state = state.copyWith(",
      "      count: newCount < 0 ? 0 : newCount,",
      "      clearError: true,",
      "    );",
      "  }",
      "",
      "  void reset() {",
      "    state = state.copyWith(",
      "      count: 0,",
      "      data: [],",
      "      clearError: true,",
      "    );",
      "  }",
      "",
      "  Future<void> incrementAsync([int value = 1]) async {",
      "    try {",
      "      state = state.copyWith(isLoading: true, clearError: true);",
      "",
      "      // Simulate async operation",
      "      await Future.delayed(const Duration(seconds: 1));",
      "",
      "      state = state.copyWith(",
      "        count: state.count + value,",
      "        isLoading: false,",
      "      );",
      "    } catch (e) {",
      "      state = state.copyWith(",
      "        isLoading: false,",
      "        error: 'Failed to increment: \\$e',",
      "      );",
      "    }",
      "  }",
      "",
      "  Future<void> loadData() async {",
      "    try {",
      "      state = state.copyWith(isLoading: true, clearError: true);",
      "",
      "      // Simulate data loading",
      "      await Future.delayed(const Duration(seconds: 2));",
      "",
      "      // Simulate potential error",
      "      if (DateTime.now().millisecond % 3 == 0) {",
      "        throw Exception('Random network error');",
      "      }",
      "",
      "      final newData = ['Item 1', 'Item 2', 'Item 3'];",
      "      state = state.copyWith(",
      "        data: newData,",
      "        count: newData.length,",
      "        isLoading: false,",
      "      );",
      "    } catch (e) {",
      "      state = state.copyWith(",
      "        isLoading: false,",
      "        error: 'Failed to load data: \\$e',",
      "      );",
      "    }",
      "  }",
      "",
      "  void addItem(${2:String} item) {",
      "    final newData = [...state.data, item];",
      "    state = state.copyWith(",
      "      data: newData,",
      "      count: newData.length,",
      "      clearError: true,",
      "    );",
      "  }",
      "",
      "  void removeItem(${2:String} item) {",
      "    final newData = state.data.where((d) => d != item).toList();",
      "    state = state.copyWith(",
      "      data: newData,",
      "      count: newData.length,",
      "      clearError: true,",
      "    );",
      "  }",
      "}",
      "",
      "// Provider declaration",
      "final ${3:counter}Provider = StateNotifierProvider<${1:Counter}Notifier, ${1:Counter}State>(",
      "  (ref) => ${1:Counter}Notifier(),",
      ");",
      "",
      "// Computed providers",
      "final ${3:counter}CountProvider = Provider<int>(",
      "  (ref) => ref.watch(${3:counter}Provider).count,",
      ");",
      "",
      "final ${3:counter}IsLoadingProvider = Provider<bool>(",
      "  (ref) => ref.watch(${3:counter}Provider).isLoading,",
      ");",
      "",
      "final ${3:counter}ErrorProvider = Provider<String?>(",
      "  (ref) => ref.watch(${3:counter}Provider).error,",
      ");",
      "",
      "final ${3:counter}DataProvider = Provider<List<${2:String}>>(",
      "  (ref) => ref.watch(${3:counter}Provider).data,",
      ");",
      "",
      "// Widget Integration",
      "class ${1:Counter}RiverpodPage extends ConsumerWidget {",
      "  const ${1:Counter}RiverpodPage({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context, WidgetRef ref) {",
      "    final state = ref.watch(${3:counter}Provider);",
      "    final notifier = ref.read(${3:counter}Provider.notifier);",
      "",
      "    // Listen to errors",
      "    ref.listen(${3:counter}ErrorProvider, (previous, next) {",
      "      if (next != null) {",
      "        ScaffoldMessenger.of(context).showSnackBar(",
      "          SnackBar(",
      "            content: Text(next),",
      "            backgroundColor: Theme.of(context).colorScheme.error,",
      "            action: SnackBarAction(",
      "              label: 'Retry',",
      "              onPressed: () => notifier.loadData(),",
      "            ),",
      "          ),",
      "        );",
      "      }",
      "    });",
      "",
      "    return Scaffold(",
      "      appBar: AppBar(",
      "        title: const Text('${4:Riverpod Counter}'),",
      "        actions: [",
      "          IconButton(",
      "            icon: Icon(",
      "              state.isLoading ? Icons.hourglass_empty : Icons.refresh,",
      "            ),",
      "            onPressed: state.isLoading ? null : () => notifier.loadData(),",
      "          ),",
      "        ],",
      "      ),",
      "      body: SingleChildScrollView(",
      "        padding: const EdgeInsets.all(16),",
      "        child: Column(",
      "          crossAxisAlignment: CrossAxisAlignment.stretch,",
      "          children: [",
      "            // Counter Display",
      "            Card(",
      "              child: Padding(",
      "                padding: const EdgeInsets.all(16),",
      "                child: Column(",
      "                  children: [",
      "                    Text(",
      "                      'Count',",
      "                      style: Theme.of(context).textTheme.titleMedium,",
      "                    ),",
      "                    const SizedBox(height: 8),",
      "                    if (state.isLoading)",
      "                      const CircularProgressIndicator()",
      "                    else",
      "                      Consumer(",
      "                        builder: (context, ref, child) {",
      "                          final count = ref.watch(${3:counter}CountProvider);",
      "                          return Text(",
      "                            '\\$count',",
      "                            style: Theme.of(context).textTheme.headlineLarge,",
      "                          );",
      "                        },",
      "                      ),",
      "                  ],",
      "                ),",
      "              ),",
      "            ),",
      "            const SizedBox(height: 16),",
      "",
      "            // Action Buttons",
      "            Row(",
      "              children: [",
      "                Expanded(",
      "                  child: ElevatedButton(",
      "                    onPressed: state.isLoading ? null : () => notifier.decrement(),",
      "                    child: const Icon(Icons.remove),",
      "                  ),",
      "                ),",
      "                const SizedBox(width: 16),",
      "                Expanded(",
      "                  child: ElevatedButton(",
      "                    onPressed: state.isLoading ? null : () => notifier.increment(),",
      "                    child: const Icon(Icons.add),",
      "                  ),",
      "                ),",
      "              ],",
      "            ),",
      "            const SizedBox(height: 16),",
      "",
      "            // Async Actions",
      "            Row(",
      "              children: [",
      "                Expanded(",
      "                  child: ElevatedButton(",
      "                    onPressed: state.isLoading ? null : () => notifier.incrementAsync(5),",
      "                    child: const Text('Async +5'),",
      "                  ),",
      "                ),",
      "                const SizedBox(width: 16),",
      "                Expanded(",
      "                  child: OutlinedButton(",
      "                    onPressed: state.isLoading ? null : () => notifier.reset(),",
      "                    child: const Text('Reset'),",
      "                  ),",
      "                ),",
      "              ],",
      "            ),",
      "            const SizedBox(height: 24),",
      "",
      "            // Data List",
      "            Consumer(",
      "              builder: (context, ref, child) {",
      "                final data = ref.watch(${3:counter}DataProvider);",
      "                if (data.isEmpty) return const SizedBox.shrink();",
      "",
      "                return Column(",
      "                  crossAxisAlignment: CrossAxisAlignment.start,",
      "                  children: [",
      "                    Text(",
      "                      'Data Items',",
      "                      style: Theme.of(context).textTheme.titleLarge,",
      "                    ),",
      "                    const SizedBox(height: 8),",
      "                    ...data.map(",
      "                      (item) => Card(",
      "                        child: ListTile(",
      "                          title: Text(item),",
      "                          trailing: IconButton(",
      "                            icon: const Icon(Icons.delete),",
      "                            onPressed: state.isLoading",
      "                                ? null",
      "                                : () => notifier.removeItem(item),",
      "                          ),",
      "                        ),",
      "                      ),",
      "                    ),",
      "                    const SizedBox(height: 16),",
      "                    ElevatedButton(",
      "                      onPressed: state.isLoading",
      "                          ? null",
      "                          : () => notifier.addItem('New Item \\${data.length + 1}'),",
      "                      child: const Text('Add Item'),",
      "                    ),",
      "                  ],",
      "                );",
      "              },",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "Riverpod Future Provider": {
    "prefix": "flr-future",
    "description": "Riverpod FutureProvider for async data",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "// Future provider",
      "final ${1:data}FutureProvider = FutureProvider.autoDispose.family<${2:List<String>}, ${3:String?}>(",
      "  (ref, ${4:filter}) async {",
      "    // Cancel the request if the provider is disposed",
      "    final cancelToken = CancelToken();",
      "    ref.onDispose(() => cancelToken.cancel());",
      "",
      "    // Simulate API call",
      "    await Future.delayed(const Duration(seconds: 2));",
      "",
      "    // Simulate potential error",
      "    if (DateTime.now().millisecond % 4 == 0) {",
      "      throw Exception('Network error occurred');",
      "    }",
      "",
      "    // Return filtered data",
      "    final allData = ['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry'];",
      "    if (${4:filter} == null || ${4:filter}.isEmpty) {",
      "      return allData;",
      "    }",
      "",
      "    return allData",
      "        .where((item) => item.toLowerCase().contains(${4:filter}!.toLowerCase()))",
      "        .toList();",
      "  },",
      ");",
      "",
      "// Usage in widget",
      "class ${5:Data}ListView extends ConsumerWidget {",
      "  const ${5:Data}ListView({super.key, this.filter});",
      "",
      "  final String? filter;",
      "",
      "  @override",
      "  Widget build(BuildContext context, WidgetRef ref) {",
      "    final asyncValue = ref.watch(${1:data}FutureProvider(filter));",
      "",
      "    return asyncValue.when(",
      "      data: (data) => ListView.builder(",
      "        itemCount: data.length,",
      "        itemBuilder: (context, index) {",
      "          final item = data[index];",
      "          return ListTile(",
      "            title: Text(item),",
      "            leading: const Icon(Icons.${6:food_bank}),",
      "          );",
      "        },",
      "      ),",
      "      loading: () => const Center(",
      "        child: CircularProgressIndicator(),",
      "      ),",
      "      error: (error, stack) => Center(",
      "        child: Column(",
      "          mainAxisAlignment: MainAxisAlignment.center,",
      "          children: [",
      "            Icon(",
      "              Icons.error_outline,",
      "              size: 48,",
      "              color: Theme.of(context).colorScheme.error,",
      "            ),",
      "            const SizedBox(height: 16),",
      "            Text(",
      "              'Error: \\$error',",
      "              style: TextStyle(",
      "                color: Theme.of(context).colorScheme.error,",
      "              ),",
      "            ),",
      "            const SizedBox(height: 16),",
      "            ElevatedButton(",
      "              onPressed: () => ref.invalidate(${1:data}FutureProvider),",
      "              child: const Text('Retry'),",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "// Cancel token for cleanup",
      "class CancelToken {",
      "  bool _isCanceled = false;",
      "  bool get isCanceled => _isCanceled;",
      "",
      "  void cancel() => _isCanceled = true;",
      "}",
      "$0"
    ]
  },

  "Riverpod Stream Provider": {
    "prefix": "flr-stream",
    "description": "Riverpod StreamProvider for real-time data",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "import 'dart:async';",
      "",
      "// Stream provider",
      "final ${1:counter}StreamProvider = StreamProvider.autoDispose<${2:int}>(",
      "  (ref) {",
      "    late StreamController<${2:int}> controller;",
      "    Timer? timer;",
      "    ${2:int} count = 0;",
      "",
      "    controller = StreamController<${2:int}>(",
      "      onListen: () {",
      "        // Start emitting values",
      "        timer = Timer.periodic(",
      "          const Duration(seconds: 1),",
      "          (timer) {",
      "            if (!controller.isClosed) {",
      "              controller.add(++count);",
      "            }",
      "          },",
      "        );",
      "      },",
      "      onCancel: () {",
      "        timer?.cancel();",
      "        controller.close();",
      "      },",
      "    );",
      "",
      "    // Cleanup when provider is disposed",
      "    ref.onDispose(() {",
      "      timer?.cancel();",
      "      controller.close();",
      "    });",
      "",
      "    return controller.stream;",
      "  },",
      ");",
      "",
      "// Alternative: Real-time data stream",
      "final ${3:realtime}DataStreamProvider = StreamProvider.autoDispose<${4:List<String>}>(",
      "  (ref) {",
      "    late StreamController<${4:List<String>}> controller;",
      "    Timer? timer;",
      "",
      "    controller = StreamController<${4:List<String>}>(",
      "      onListen: () {",
      "        // Emit initial data",
      "        controller.add(['Initial Item']);",
      "",
      "        // Simulate real-time updates",
      "        timer = Timer.periodic(",
      "          const Duration(seconds: 3),",
      "          (timer) {",
      "            if (!controller.isClosed) {",
      "              final timestamp = DateTime.now().millisecondsSinceEpoch;",
      "              controller.add([",
      "                'Initial Item',",
      "                'Update \\$timestamp',",
      "                if (timestamp % 2 == 0) 'Even Update',",
      "                if (timestamp % 3 == 0) 'Triple Update',",
      "              ]);",
      "            }",
      "          },",
      "        );",
      "      },",
      "      onCancel: () {",
      "        timer?.cancel();",
      "        controller.close();",
      "      },",
      "    );",
      "",
      "    ref.onDispose(() {",
      "      timer?.cancel();",
      "      controller.close();",
      "    });",
      "",
      "    return controller.stream;",
      "  },",
      ");",
      "",
      "// Usage in widget",
      "class ${5:Stream}Widget extends ConsumerWidget {",
      "  const ${5:Stream}Widget({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context, WidgetRef ref) {",
      "    final counterAsync = ref.watch(${1:counter}StreamProvider);",
      "    final dataAsync = ref.watch(${3:realtime}DataStreamProvider);",
      "",
      "    return Column(",
      "      children: [",
      "        // Counter Stream",
      "        Card(",
      "          child: Padding(",
      "            padding: const EdgeInsets.all(16),",
      "            child: Column(",
      "              children: [",
      "                Text(",
      "                  'Live Counter',",
      "                  style: Theme.of(context).textTheme.titleMedium,",
      "                ),",
      "                const SizedBox(height: 8),",
      "                counterAsync.when(",
      "                  data: (count) => Text(",
      "                    '\\$count',",
      "                    style: Theme.of(context).textTheme.headlineLarge,",
      "                  ),",
      "                  loading: () => const CircularProgressIndicator(),",
      "                  error: (error, stack) => Text(",
      "                    'Error: \\$error',",
      "                    style: TextStyle(",
      "                      color: Theme.of(context).colorScheme.error,",
      "                    ),",
      "                  ),",
      "                ),",
      "              ],",
      "            ),",
      "          ),",
      "        ),",
      "        const SizedBox(height: 16),",
      "",
      "        // Real-time Data Stream",
      "        Expanded(",
      "          child: Card(",
      "            child: Column(",
      "              children: [",
      "                Padding(",
      "                  padding: const EdgeInsets.all(16),",
      "                  child: Text(",
      "                    'Real-time Data',",
      "                    style: Theme.of(context).textTheme.titleMedium,",
      "                  ),",
      "                ),",
      "                Expanded(",
      "                  child: dataAsync.when(",
      "                    data: (data) => ListView.builder(",
      "                      itemCount: data.length,",
      "                      itemBuilder: (context, index) {",
      "                        return ListTile(",
      "                          title: Text(data[index]),",
      "                          leading: const Icon(Icons.${6:stream}),",
      "                          trailing: Text(",
      "                            DateTime.now().toString().substring(11, 19),",
      "                            style: Theme.of(context).textTheme.bodySmall,",
      "                          ),",
      "                        );",
      "                      },",
      "                    ),",
      "                    loading: () => const Center(",
      "                      child: CircularProgressIndicator(),",
      "                    ),",
      "                    error: (error, stack) => Center(",
      "                      child: Column(",
      "                        mainAxisAlignment: MainAxisAlignment.center,",
      "                        children: [",
      "                          Icon(",
      "                            Icons.error_outline,",
      "                            size: 48,",
      "                            color: Theme.of(context).colorScheme.error,",
      "                          ),",
      "                          const SizedBox(height: 16),",
      "                          Text('Error: \\$error'),",
      "                          const SizedBox(height: 16),",
      "                          ElevatedButton(",
      "                            onPressed: () {",
      "                              ref.invalidate(${3:realtime}DataStreamProvider);",
      "                            },",
      "                            child: const Text('Retry'),",
      "                          ),",
      "                        ],",
      "                      ),",
      "                    ),",
      "                  ),",
      "                ),",
      "              ],",
      "            ),",
      "          ),",
      "        ),",
      "      ],",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "Riverpod Provider Family": {
    "prefix": "flr-family",
    "description": "Riverpod Provider with family for parameterized providers",
    "body": [
      "import 'package:flutter_riverpod/flutter_riverpod.dart';",
      "",
      "// Family provider for parameterized state",
      "final ${1:user}Provider = StateNotifierProvider.family<${2:User}Notifier, ${2:User}State, String>(",
      "  (ref, ${3:userId}) => ${2:User}Notifier(${3:userId}),",
      ");",
      "",
      "// State class",
      "class ${2:User}State {",
      "  final String id;",
      "  final String name;",
      "  final String email;",
      "  final bool isLoading;",
      "  final String? error;",
      "",
      "  const ${2:User}State({",
      "    required this.id,",
      "    this.name = '',",
      "    this.email = '',",
      "    this.isLoading = false,",
      "    this.error,",
      "  });",
      "",
      "  ${2:User}State copyWith({",
      "    String? id,",
      "    String? name,",
      "    String? email,",
      "    bool? isLoading,",
      "    String? error,",
      "    bool clearError = false,",
      "  }) {",
      "    return ${2:User}State(",
      "      id: id ?? this.id,",
      "      name: name ?? this.name,",
      "      email: email ?? this.email,",
      "      isLoading: isLoading ?? this.isLoading,",
      "      error: clearError ? null : (error ?? this.error),",
      "    );",
      "  }",
      "}",
      "",
      "// StateNotifier",
      "class ${2:User}Notifier extends StateNotifier<${2:User}State> {",
      "  ${2:User}Notifier(String ${3:userId}) : super(${2:User}State(id: ${3:userId})) {",
      "    loadUser();",
      "  }",
      "",
      "  Future<void> loadUser() async {",
      "    try {",
      "      state = state.copyWith(isLoading: true, clearError: true);",
      "",
      "      // Simulate API call",
      "      await Future.delayed(const Duration(seconds: 1));",
      "",
      "      // Simulate user data",
      "      state = state.copyWith(",
      "        name: '${4:User} \\${state.id}',",
      "        email: '${5:user}\\${state.id}@example.com',",
      "        isLoading: false,",
      "      );",
      "    } catch (e) {",
      "      state = state.copyWith(",
      "        isLoading: false,",
      "        error: 'Failed to load user: \\$e',",
      "      );",
      "    }",
      "  }",
      "",
      "  Future<void> updateName(String newName) async {",
      "    try {",
      "      state = state.copyWith(isLoading: true, clearError: true);",
      "",
      "      // Simulate API call",
      "      await Future.delayed(const Duration(milliseconds: 500));",
      "",
      "      state = state.copyWith(",
      "        name: newName,",
      "        isLoading: false,",
      "      );",
      "    } catch (e) {",
      "      state = state.copyWith(",
      "        isLoading: false,",
      "        error: 'Failed to update name: \\$e',",
      "      );",
      "    }",
      "  }",
      "",
      "  Future<void> updateEmail(String newEmail) async {",
      "    try {",
      "      state = state.copyWith(isLoading: true, clearError: true);",
      "",
      "      // Simulate API call",
      "      await Future.delayed(const Duration(milliseconds: 500));",
      "",
      "      state = state.copyWith(",
      "        email: newEmail,",
      "        isLoading: false,",
      "      );",
      "    } catch (e) {",
      "      state = state.copyWith(",
      "        isLoading: false,",
      "        error: 'Failed to update email: \\$e',",
      "      );",
      "    }",
      "  }",
      "}",
      "",
      "// Widget using family provider",
      "class ${2:User}Card extends ConsumerWidget {",
      "  const ${2:User}Card({super.key, required this.${3:userId}});",
      "",
      "  final String ${3:userId};",
      "",
      "  @override",
      "  Widget build(BuildContext context, WidgetRef ref) {",
      "    final userState = ref.watch(${1:user}Provider(${3:userId}));",
      "    final userNotifier = ref.read(${1:user}Provider(${3:userId}).notifier);",
      "",
      "    // Listen to errors",
      "    ref.listen(${1:user}Provider(${3:userId}), (previous, next) {",
      "      if (next.error != null) {",
      "        ScaffoldMessenger.of(context).showSnackBar(",
      "          SnackBar(",
      "            content: Text(next.error!),",
      "            backgroundColor: Theme.of(context).colorScheme.error,",
      "          ),",
      "        );",
      "      }",
      "    });",
      "",
      "    return Card(",
      "      child: Padding(",
      "        padding: const EdgeInsets.all(16),",
      "        child: Column(",
      "          crossAxisAlignment: CrossAxisAlignment.start,",
      "          children: [",
      "            Row(",
      "              children: [",
      "                CircleAvatar(",
      "                  child: Text(userState.id),",
      "                ),",
      "                const SizedBox(width: 16),",
      "                Expanded(",
      "                  child: Column(",
      "                    crossAxisAlignment: CrossAxisAlignment.start,",
      "                    children: [",
      "                      if (userState.isLoading)",
      "                        const SizedBox(",
      "                          height: 16,",
      "                          width: 16,",
      "                          child: CircularProgressIndicator(strokeWidth: 2),",
      "                        )",
      "                      else ...[",
      "                        Text(",
      "                          userState.name.isEmpty ? 'Loading...' : userState.name,",
      "                          style: Theme.of(context).textTheme.titleMedium,",
      "                        ),",
      "                        Text(",
      "                          userState.email.isEmpty ? 'Loading...' : userState.email,",
      "                          style: Theme.of(context).textTheme.bodyMedium,",
      "                        ),",
      "                      ],",
      "                    ],",
      "                  ),",
      "                ),",
      "                PopupMenuButton<String>(",
      "                  onSelected: (value) async {",
      "                    switch (value) {",
      "                      case 'refresh':",
      "                        await userNotifier.loadUser();",
      "                        break;",
      "                      case 'edit_name':",
      "                        await userNotifier.updateName('Updated Name');",
      "                        break;",
      "                      case 'edit_email':",
      "                        await userNotifier.updateEmail('updated@example.com');",
      "                        break;",
      "                    }",
      "                  },",
      "                  itemBuilder: (context) => [",
      "                    const PopupMenuItem(",
      "                      value: 'refresh',",
      "                      child: Text('Refresh'),",
      "                    ),",
      "                    const PopupMenuItem(",
      "                      value: 'edit_name',",
      "                      child: Text('Edit Name'),",
      "                    ),",
      "                    const PopupMenuItem(",
      "                      value: 'edit_email',",
      "                      child: Text('Edit Email'),",
      "                    ),",
      "                  ],",
      "                ),",
      "              ],",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  }",
      "}",
      "",
      "// Usage example with multiple users",
      "class ${2:User}ListView extends ConsumerWidget {",
      "  const ${2:User}ListView({super.key});",
      "",
      "  @override",
      "  Widget build(BuildContext context, WidgetRef ref) {",
      "    final userIds = ['1', '2', '3', '4', '5'];",
      "",
      "    return ListView.builder(",
      "      itemCount: userIds.length,",
      "      itemBuilder: (context, index) {",
      "        return ${2:User}Card(${3:userId}: userIds[index]);",
      "      },",
      "    );",
      "  }",
      "}",
      "$0"
    ]
  },

  "Riverpod Consumer Widget": {
    "prefix": "flr-consumer",
    "description": "Simple Riverpod Consumer widget",
    "body": [
      "Consumer(",
      "  builder: (context, ref, child) {",
      "    final ${1:state} = ref.watch(${2:provider});",
      "    ",
      "    return ${3:Widget}(",
      "      ${4:// Use state here}",
      "    );",
      "  },",
      ")$0"
    ]
  }
}
