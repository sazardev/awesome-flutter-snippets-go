{
  "Bottom Navigation Bar": {
    "prefix": "fln-bottom",
    "description": "Bottom navigation bar with Material 3 design",
    "body": [
      "NavigationBar(",
      "  selectedIndex: ${1:_selectedIndex},",
      "  onDestinationSelected: (index) {",
      "    setState(() {",
      "      ${1:_selectedIndex} = index;",
      "    });",
      "    ${2:// Handle navigation}",
      "  },",
      "  destinations: const [",
      "    NavigationDestination(",
      "      icon: Icon(Icons.${3:home_outlined}),",
      "      selectedIcon: Icon(Icons.${4:home}),",
      "      label: '${5:Home}',",
      "    ),",
      "    NavigationDestination(",
      "      icon: Icon(Icons.${6:search_outlined}),",
      "      selectedIcon: Icon(Icons.${7:search}),",
      "      label: '${8:Search}',",
      "    ),",
      "    NavigationDestination(",
      "      icon: Icon(Icons.${9:favorite_outline}),",
      "      selectedIcon: Icon(Icons.${10:favorite}),",
      "      label: '${11:Favorites}',",
      "    ),",
      "    NavigationDestination(",
      "      icon: Icon(Icons.${12:person_outline}),",
      "      selectedIcon: Icon(Icons.${13:person}),",
      "      label: '${14:Profile}',",
      "    ),",
      "  ],",
      ")$0"
    ]
  },

  "Navigation Drawer": {
    "prefix": "fln-drawer",
    "description": "Navigation drawer with Material 3 design",
    "body": [
      "Drawer(",
      "  child: ListView(",
      "    padding: EdgeInsets.zero,",
      "    children: [",
      "      DrawerHeader(",
      "        decoration: BoxDecoration(",
      "          color: Theme.of(context).colorScheme.primaryContainer,",
      "        ),",
      "        child: Column(",
      "          crossAxisAlignment: CrossAxisAlignment.start,",
      "          children: [",
      "            CircleAvatar(",
      "              radius: 30,",
      "              backgroundColor: Theme.of(context).colorScheme.primary,",
      "              child: Text(",
      "                '${1:U}',",
      "                style: TextStyle(",
      "                  color: Theme.of(context).colorScheme.onPrimary,",
      "                  fontSize: 24,",
      "                  fontWeight: FontWeight.bold,",
      "                ),",
      "              ),",
      "            ),",
      "            const SizedBox(height: 8),",
      "            Text(",
      "              '${2:User Name}',",
      "              style: Theme.of(context).textTheme.titleMedium?.copyWith(",
      "                color: Theme.of(context).colorScheme.onPrimaryContainer,",
      "              ),",
      "            ),",
      "            Text(",
      "              '${3:user@example.com}',",
      "              style: Theme.of(context).textTheme.bodySmall?.copyWith(",
      "                color: Theme.of(context).colorScheme.onPrimaryContainer,",
      "              ),",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "      ListTile(",
      "        leading: const Icon(Icons.${4:home}),",
      "        title: const Text('${5:Home}'),",
      "        onTap: () {",
      "          Navigator.pop(context);",
      "          ${6:// Handle navigation}",
      "        },",
      "      ),",
      "      ListTile(",
      "        leading: const Icon(Icons.${7:settings}),",
      "        title: const Text('${8:Settings}'),",
      "        onTap: () {",
      "          Navigator.pop(context);",
      "          ${9:// Handle navigation}",
      "        },",
      "      ),",
      "      ListTile(",
      "        leading: const Icon(Icons.${10:help}),",
      "        title: const Text('${11:Help}'),",
      "        onTap: () {",
      "          Navigator.pop(context);",
      "          ${12:// Handle navigation}",
      "        },",
      "      ),",
      "      const Divider(),",
      "      ListTile(",
      "        leading: const Icon(Icons.${13:logout}),",
      "        title: const Text('${14:Logout}'),",
      "        onTap: () {",
      "          Navigator.pop(context);",
      "          ${15:// Handle logout}",
      "        },",
      "      ),",
      "    ],",
      "  ),",
      ")$0"
    ]
  },

  "Navigation Rail": {
    "prefix": "fln-rail",
    "description": "Navigation rail for tablet layouts",
    "body": [
      "NavigationRail(",
      "  selectedIndex: ${1:_selectedIndex},",
      "  onDestinationSelected: (index) {",
      "    setState(() {",
      "      ${1:_selectedIndex} = index;",
      "    });",
      "    ${2:// Handle navigation}",
      "  },",
      "  labelType: NavigationRailLabelType.${3:selected},",
      "  leading: ${4:FloatingActionButton(",
      "    elevation: 0,",
      "    onPressed: () {",
      "      // Handle FAB action",
      "    },",
      "    child: const Icon(Icons.add),",
      "  ),}",
      "  trailing: ${5:Expanded(",
      "    child: Align(",
      "      alignment: Alignment.bottomCenter,",
      "      child: Padding(",
      "        padding: const EdgeInsets.only(bottom: 8.0),",
      "        child: IconButton(",
      "          onPressed: () {",
      "            // Handle settings",
      "          },",
      "          icon: const Icon(Icons.settings),",
      "        ),",
      "      ),",
      "    ),",
      "  ),}",
      "  destinations: const [",
      "    NavigationRailDestination(",
      "      icon: Icon(Icons.${6:home_outlined}),",
      "      selectedIcon: Icon(Icons.${7:home}),",
      "      label: Text('${8:Home}'),",
      "    ),",
      "    NavigationRailDestination(",
      "      icon: Icon(Icons.${9:search_outlined}),",
      "      selectedIcon: Icon(Icons.${10:search}),",
      "      label: Text('${11:Search}'),",
      "    ),",
      "    NavigationRailDestination(",
      "      icon: Icon(Icons.${12:favorite_outline}),",
      "      selectedIcon: Icon(Icons.${13:favorite}),",
      "      label: Text('${14:Favorites}'),",
      "    ),",
      "  ],",
      ")$0"
    ]
  },

  "Tab Bar": {
    "prefix": "fln-tabs",
    "description": "Tab bar with TabController",
    "body": [
      "DefaultTabController(",
      "  length: ${1:3},",
      "  child: Scaffold(",
      "    appBar: AppBar(",
      "      title: const Text('${2:Title}'),",
      "      backgroundColor: Theme.of(context).colorScheme.inversePrimary,",
      "      bottom: const TabBar(",
      "        tabs: [",
      "          Tab(",
      "            icon: Icon(Icons.${3:home}),",
      "            text: '${4:Home}',",
      "          ),",
      "          Tab(",
      "            icon: Icon(Icons.${5:search}),",
      "            text: '${6:Search}',",
      "          ),",
      "          Tab(",
      "            icon: Icon(Icons.${7:person}),",
      "            text: '${8:Profile}',",
      "          ),",
      "        ],",
      "      ),",
      "    ),",
      "    body: const TabBarView(",
      "      children: [",
      "        ${9:Center(child: Text('Home Tab')),}",
      "        ${10:Center(child: Text('Search Tab')),}",
      "        ${11:Center(child: Text('Profile Tab')),}",
      "      ],",
      "    ),",
      "  ),",
      ")$0"
    ]
  },

  "App Bar with Actions": {
    "prefix": "fln-appbar",
    "description": "App bar with action buttons",
    "body": [
      "AppBar(",
      "  title: const Text('${1:Title}'),",
      "  backgroundColor: Theme.of(context).colorScheme.inversePrimary,",
      "  ${2:leading: IconButton(",
      "    onPressed: () {",
      "      // Handle leading action",
      "    },",
      "    icon: const Icon(Icons.menu),",
      "  ),}",
      "  actions: [",
      "    IconButton(",
      "      onPressed: () {",
      "        ${3:// Handle search}",
      "      },",
      "      icon: const Icon(Icons.${4:search}),",
      "    ),",
      "    IconButton(",
      "      onPressed: () {",
      "        ${5:// Handle notifications}",
      "      },",
      "      icon: const Icon(Icons.${6:notifications_outlined}),",
      "    ),",
      "    PopupMenuButton<String>(",
      "      onSelected: (value) {",
      "        ${7:// Handle menu selection}",
      "      },",
      "      itemBuilder: (context) => [",
      "        const PopupMenuItem(",
      "          value: 'settings',",
      "          child: ListTile(",
      "            leading: Icon(Icons.settings),",
      "            title: Text('Settings'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'help',",
      "          child: ListTile(",
      "            leading: Icon(Icons.help),",
      "            title: Text('Help'),",
      "          ),",
      "        ),",
      "        const PopupMenuItem(",
      "          value: 'logout',",
      "          child: ListTile(",
      "            leading: Icon(Icons.logout),",
      "            title: Text('Logout'),",
      "          ),",
      "        ),",
      "      ],",
      "    ),",
      "  ],",
      ")$0"
    ]
  },

  "Sliver App Bar": {
    "prefix": "fln-sliver",
    "description": "Sliver app bar with flexible space",
    "body": [
      "SliverAppBar(",
      "  expandedHeight: ${1:200.0},",
      "  floating: ${2:false},",
      "  pinned: ${3:true},",
      "  snap: ${4:false},",
      "  backgroundColor: Theme.of(context).colorScheme.inversePrimary,",
      "  flexibleSpace: FlexibleSpaceBar(",
      "    title: const Text('${5:Flexible Title}'),",
      "    background: ${6:Image.network(",
      "      'https://example.com/image.jpg',",
      "      fit: BoxFit.cover,",
      "    ),}",
      "    centerTitle: ${7:true},",
      "  ),",
      "  actions: [",
      "    IconButton(",
      "      onPressed: () {",
      "        ${8:// Handle action}",
      "      },",
      "      icon: const Icon(Icons.${9:more_vert}),",
      "    ),",
      "  ],",
      ")$0"
    ]
  },

  "Page Route": {
    "prefix": "fln-route",
    "description": "Custom page route with animation",
    "body": [
      "class ${1:SlidePageRoute}<T> extends PageRouteBuilder<T> {",
      "  ${1:SlidePageRoute}({",
      "    required this.child,",
      "    this.direction = ${2:SlideDirection.rightToLeft},",
      "    super.settings,",
      "  }) : super(",
      "          pageBuilder: (context, animation, secondaryAnimation) => child,",
      "          transitionsBuilder: (context, animation, secondaryAnimation, child) {",
      "            Offset begin;",
      "            const end = Offset.zero;",
      "            ",
      "            switch (direction) {",
      "              case SlideDirection.rightToLeft:",
      "                begin = const Offset(1.0, 0.0);",
      "                break;",
      "              case SlideDirection.leftToRight:",
      "                begin = const Offset(-1.0, 0.0);",
      "                break;",
      "              case SlideDirection.topToBottom:",
      "                begin = const Offset(0.0, -1.0);",
      "                break;",
      "              case SlideDirection.bottomToTop:",
      "                begin = const Offset(0.0, 1.0);",
      "                break;",
      "            }",
      "            ",
      "            const curve = Curves.easeInOut;",
      "            final tween = Tween(begin: begin, end: end);",
      "            final curvedAnimation = CurvedAnimation(",
      "              parent: animation,",
      "              curve: curve,",
      "            );",
      "            ",
      "            return SlideTransition(",
      "              position: tween.animate(curvedAnimation),",
      "              child: child,",
      "            );",
      "          },",
      "          transitionDuration: const Duration(milliseconds: ${3:300}),",
      "        );",
      "",
      "  final Widget child;",
      "  final SlideDirection direction;",
      "}",
      "",
      "enum SlideDirection {",
      "  rightToLeft,",
      "  leftToRight,",
      "  topToBottom,",
      "  bottomToTop,",
      "}$0"
    ]
  },

  "Navigation Helper": {
    "prefix": "fln-helper",
    "description": "Navigation helper with common methods",
    "body": [
      "class ${1:NavigationHelper} {",
      "  static void push(BuildContext context, Widget page) {",
      "    Navigator.of(context).push(",
      "      MaterialPageRoute(builder: (context) => page),",
      "    );",
      "  }",
      "",
      "  static void pushReplacement(BuildContext context, Widget page) {",
      "    Navigator.of(context).pushReplacement(",
      "      MaterialPageRoute(builder: (context) => page),",
      "    );",
      "  }",
      "",
      "  static void pushAndRemoveUntil(BuildContext context, Widget page) {",
      "    Navigator.of(context).pushAndRemoveUntil(",
      "      MaterialPageRoute(builder: (context) => page),",
      "      (route) => false,",
      "    );",
      "  }",
      "",
      "  static void pop(BuildContext context, [dynamic result]) {",
      "    Navigator.of(context).pop(result);",
      "  }",
      "",
      "  static void popUntil(BuildContext context, String routeName) {",
      "    Navigator.of(context).popUntil(ModalRoute.withName(routeName));",
      "  }",
      "",
      "  static Future<T?> pushSlide<T>(",
      "    BuildContext context,",
      "    Widget page, {",
      "    SlideDirection direction = SlideDirection.rightToLeft,",
      "  }) {",
      "    return Navigator.of(context).push<T>(",
      "      SlidePageRoute<T>(",
      "        child: page,",
      "        direction: direction,",
      "      ),",
      "    );",
      "  }",
      "",
      "  static Future<T?> pushFade<T>(BuildContext context, Widget page) {",
      "    return Navigator.of(context).push<T>(",
      "      PageRouteBuilder<T>(",
      "        pageBuilder: (context, animation, secondaryAnimation) => page,",
      "        transitionsBuilder: (context, animation, secondaryAnimation, child) {",
      "          return FadeTransition(",
      "            opacity: animation,",
      "            child: child,",
      "          );",
      "        },",
      "        transitionDuration: const Duration(milliseconds: 300),",
      "      ),",
      "    );",
      "  }",
      "",
      "  static Future<T?> pushScale<T>(BuildContext context, Widget page) {",
      "    return Navigator.of(context).push<T>(",
      "      PageRouteBuilder<T>(",
      "        pageBuilder: (context, animation, secondaryAnimation) => page,",
      "        transitionsBuilder: (context, animation, secondaryAnimation, child) {",
      "          return ScaleTransition(",
      "            scale: Tween<double>(",
      "              begin: 0.0,",
      "              end: 1.0,",
      "            ).animate(",
      "              CurvedAnimation(",
      "                parent: animation,",
      "                curve: Curves.fastOutSlowIn,",
      "              ),",
      "            ),",
      "            child: child,",
      "          );",
      "        },",
      "        transitionDuration: const Duration(milliseconds: 300),",
      "      ),",
      "    );",
      "  }",
      "",
      "  static void showBottomSheet(",
      "    BuildContext context,",
      "    Widget child, {",
      "    bool isScrollControlled = true,",
      "    bool isDismissible = true,",
      "    bool enableDrag = true,",
      "  }) {",
      "    showModalBottomSheet(",
      "      context: context,",
      "      isScrollControlled: isScrollControlled,",
      "      isDismissible: isDismissible,",
      "      enableDrag: enableDrag,",
      "      backgroundColor: Colors.transparent,",
      "      builder: (context) => Container(",
      "        decoration: BoxDecoration(",
      "          color: Theme.of(context).colorScheme.surface,",
      "          borderRadius: const BorderRadius.vertical(",
      "            top: Radius.circular(20),",
      "          ),",
      "        ),",
      "        child: child,",
      "      ),",
      "    );",
      "  }",
      "}$0"
    ]
  }
}
