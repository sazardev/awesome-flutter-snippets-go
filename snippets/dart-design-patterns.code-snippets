{
  "Singleton Pattern": {
    "prefix": "dp-singleton",
    "description": "Thread-safe Singleton pattern with lazy initialization",
    "body": [
      "class ${1:DatabaseManager} {",
      "  static ${1:DatabaseManager}? _instance;",
      "  static final Object _lock = Object();",
      "",
      "  ${1:DatabaseManager}._internal();",
      "",
      "  static ${1:DatabaseManager} get instance {",
      "    if (_instance == null) {",
      "      synchronized(_lock) {",
      "        _instance ??= ${1:DatabaseManager}._internal();",
      "      }",
      "    }",
      "    return _instance!;",
      "  }",
      "",
      "  // Your singleton methods here",
      "  ${2:void connect() {",
      "    // Connection logic",
      "  }}",
      "",
      "  ${3:void disconnect() {",
      "    // Disconnection logic",
      "  }}",
      "}"
    ]
  },

  "Factory Pattern": {
    "prefix": "dp-factory",
    "description": "Factory pattern for object creation",
    "body": [
      "abstract class ${1:Shape} {",
      "  void draw();",
      "",
      "  factory ${1:Shape}.create(${2:ShapeType} type) {",
      "    switch (type) {",
      "      case ${2:ShapeType}.circle:",
      "        return ${3:Circle}();",
      "      case ${2:ShapeType}.rectangle:",
      "        return ${4:Rectangle}();",
      "      case ${2:ShapeType}.triangle:",
      "        return ${5:Triangle}();",
      "      default:",
      "        throw ArgumentError('Unknown shape type: \\$type');",
      "    }",
      "  }",
      "}",
      "",
      "enum ${2:ShapeType} { circle, rectangle, triangle }",
      "",
      "class ${3:Circle} implements ${1:Shape} {",
      "  @override",
      "  void draw() {",
      "    print('Drawing a circle');",
      "  }",
      "}",
      "",
      "class ${4:Rectangle} implements ${1:Shape} {",
      "  @override", 
      "  void draw() {",
      "    print('Drawing a rectangle');",
      "  }",
      "}",
      "",
      "class ${5:Triangle} implements ${1:Shape} {",
      "  @override",
      "  void draw() {",
      "    print('Drawing a triangle');",
      "  }",
      "}"
    ]
  },

  "Builder Pattern": {
    "prefix": "dp-builder",
    "description": "Builder pattern for complex object construction",
    "body": [
      "class ${1:User} {",
      "  final String name;",
      "  final String email;",
      "  final int? age;",
      "  final String? phone;",
      "  final String? address;",
      "",
      "  ${1:User}._({",
      "    required this.name,",
      "    required this.email,",
      "    this.age,",
      "    this.phone,",
      "    this.address,",
      "  });",
      "",
      "  factory ${1:User}.builder() => ${1:User}Builder();",
      "}",
      "",
      "class ${1:User}Builder {",
      "  String? _name;",
      "  String? _email;",
      "  int? _age;",
      "  String? _phone;",
      "  String? _address;",
      "",
      "  ${1:User}Builder setName(String name) {",
      "    _name = name;",
      "    return this;",
      "  }",
      "",
      "  ${1:User}Builder setEmail(String email) {",
      "    _email = email;",
      "    return this;",
      "  }",
      "",
      "  ${1:User}Builder setAge(int age) {",
      "    _age = age;",
      "    return this;",
      "  }",
      "",
      "  ${1:User}Builder setPhone(String phone) {",
      "    _phone = phone;",
      "    return this;",
      "  }",
      "",
      "  ${1:User}Builder setAddress(String address) {",
      "    _address = address;",
      "    return this;",
      "  }",
      "",
      "  ${1:User} build() {",
      "    if (_name == null || _email == null) {",
      "      throw StateError('Name and email are required');",
      "    }",
      "    return ${1:User}._(",
      "      name: _name!,",
      "      email: _email!,",
      "      age: _age,",
      "      phone: _phone,",
      "      address: _address,",
      "    );",
      "  }",
      "}"
    ]
  },

  "Observer Pattern": {
    "prefix": "dp-observer",
    "description": "Observer pattern for event-driven programming",
    "body": [
      "abstract class ${1:Observer}<T> {",
      "  void update(T data);",
      "}",
      "",
      "class ${2:Subject}<T> {",
      "  final List<${1:Observer}<T>> _observers = [];",
      "  T? _state;",
      "",
      "  T? get state => _state;",
      "",
      "  void addObserver(${1:Observer}<T> observer) {",
      "    _observers.add(observer);",
      "  }",
      "",
      "  void removeObserver(${1:Observer}<T> observer) {",
      "    _observers.remove(observer);",
      "  }",
      "",
      "  void setState(T newState) {",
      "    _state = newState;",
      "    _notifyObservers();",
      "  }",
      "",
      "  void _notifyObservers() {",
      "    for (final observer in _observers) {",
      "      observer.update(_state as T);",
      "    }",
      "  }",
      "}",
      "",
      "// Example implementation",
      "class ${3:ConcreteObserver} implements ${1:Observer}<${4:String}> {",
      "  final String name;",
      "",
      "  ${3:ConcreteObserver}(this.name);",
      "",
      "  @override",
      "  void update(${4:String} data) {",
      "    print('\\$name received update: \\$data');",
      "  }",
      "}"
    ]
  },

  "Strategy Pattern": {
    "prefix": "dp-strategy",
    "description": "Strategy pattern for algorithm encapsulation",
    "body": [
      "abstract class ${1:PaymentStrategy} {",
      "  void pay(double amount);",
      "}",
      "",
      "class ${2:CreditCardPayment} implements ${1:PaymentStrategy} {",
      "  final String cardNumber;",
      "  final String holderName;",
      "",
      "  ${2:CreditCardPayment}({",
      "    required this.cardNumber,",
      "    required this.holderName,",
      "  });",
      "",
      "  @override",
      "  void pay(double amount) {",
      "    print('Paid \\$\\${amount.toStringAsFixed(2)} using Credit Card ending in \\${cardNumber.substring(cardNumber.length - 4)}');",
      "  }",
      "}",
      "",
      "class ${3:PayPalPayment} implements ${1:PaymentStrategy} {",
      "  final String email;",
      "",
      "  ${3:PayPalPayment}({required this.email});",
      "",
      "  @override", 
      "  void pay(double amount) {",
      "    print('Paid \\$\\${amount.toStringAsFixed(2)} using PayPal account: \\$email');",
      "  }",
      "}",
      "",
      "class ${4:PaymentContext} {",
      "  ${1:PaymentStrategy}? _strategy;",
      "",
      "  void setStrategy(${1:PaymentStrategy} strategy) {",
      "    _strategy = strategy;",
      "  }",
      "",
      "  void executePayment(double amount) {",
      "    if (_strategy == null) {",
      "      throw StateError('Payment strategy not set');",
      "    }",
      "    _strategy!.pay(amount);",
      "  }",
      "}"
    ]
  },

  "Command Pattern": {
    "prefix": "dp-command",
    "description": "Command pattern for action encapsulation",
    "body": [
      "abstract class ${1:Command} {",
      "  void execute();",
      "  void undo();",
      "}",
      "",
      "class ${2:Light} {",
      "  bool _isOn = false;",
      "",
      "  void turnOn() {",
      "    _isOn = true;",
      "    print('Light is ON');",
      "  }",
      "",
      "  void turnOff() {",
      "    _isOn = false;",
      "    print('Light is OFF');",
      "  }",
      "",
      "  bool get isOn => _isOn;",
      "}",
      "",
      "class ${3:LightOnCommand} implements ${1:Command} {",
      "  final ${2:Light} _light;",
      "",
      "  ${3:LightOnCommand}(this._light);",
      "",
      "  @override",
      "  void execute() {",
      "    _light.turnOn();",
      "  }",
      "",
      "  @override",
      "  void undo() {",
      "    _light.turnOff();",
      "  }",
      "}",
      "",
      "class ${4:RemoteControl} {",
      "  final List<${1:Command}> _history = [];",
      "",
      "  void executeCommand(${1:Command} command) {",
      "    command.execute();",
      "    _history.add(command);",
      "  }",
      "",
      "  void undoLastCommand() {",
      "    if (_history.isNotEmpty) {",
      "      final lastCommand = _history.removeLast();",
      "      lastCommand.undo();",
      "    }",
      "  }",
      "}"
    ]
  },

  "Adapter Pattern": {
    "prefix": "dp-adapter",
    "description": "Adapter pattern for interface compatibility",
    "body": [
      "// Target interface",
      "abstract class ${1:MediaPlayer} {",
      "  void play(String audioType, String fileName);",
      "}",
      "",
      "// Adaptee interfaces",
      "abstract class ${2:AdvancedMediaPlayer} {",
      "  void playVlc(String fileName);",
      "  void playMp4(String fileName);",
      "}",
      "",
      "// Concrete adaptee",
      "class ${3:VlcPlayer} implements ${2:AdvancedMediaPlayer} {",
      "  @override",
      "  void playVlc(String fileName) {",
      "    print('Playing vlc file: \\$fileName');",
      "  }",
      "",
      "  @override",
      "  void playMp4(String fileName) {",
      "    // Do nothing",
      "  }",
      "}",
      "",
      "class ${4:Mp4Player} implements ${2:AdvancedMediaPlayer} {",
      "  @override",
      "  void playVlc(String fileName) {",
      "    // Do nothing",
      "  }",
      "",
      "  @override",
      "  void playMp4(String fileName) {",
      "    print('Playing mp4 file: \\$fileName');",
      "  }",
      "}",
      "",
      "// Adapter",
      "class ${5:MediaAdapter} implements ${1:MediaPlayer} {",
      "  late ${2:AdvancedMediaPlayer} _advancedPlayer;",
      "",
      "  ${5:MediaAdapter}(String audioType) {",
      "    switch (audioType.toLowerCase()) {",
      "      case 'vlc':",
      "        _advancedPlayer = ${3:VlcPlayer}();",
      "        break;",
      "      case 'mp4':",
      "        _advancedPlayer = ${4:Mp4Player}();",
      "        break;",
      "      default:",
      "        throw ArgumentError('Unsupported audio type: \\$audioType');",
      "    }",
      "  }",
      "",
      "  @override",
      "  void play(String audioType, String fileName) {",
      "    switch (audioType.toLowerCase()) {",
      "      case 'vlc':",
      "        _advancedPlayer.playVlc(fileName);",
      "        break;",
      "      case 'mp4':",
      "        _advancedPlayer.playMp4(fileName);",
      "        break;",
      "    }",
      "  }",
      "}",
      "",
      "// Context",
      "class ${6:AudioPlayer} implements ${1:MediaPlayer} {",
      "  ${5:MediaAdapter}? _adapter;",
      "",
      "  @override",
      "  void play(String audioType, String fileName) {",
      "    if (audioType.toLowerCase() == 'mp3') {",
      "      print('Playing mp3 file: \\$fileName');",
      "    } else if (audioType.toLowerCase() == 'vlc' || audioType.toLowerCase() == 'mp4') {",
      "      _adapter = ${5:MediaAdapter}(audioType);",
      "      _adapter!.play(audioType, fileName);",
      "    } else {",
      "      print('\\$audioType format not supported');",
      "    }",
      "  }",
      "}"
    ]
  },

  "State Pattern": {
    "prefix": "dp-state",
    "description": "State pattern for state-dependent behavior",
    "body": [
      "abstract class ${1:State} {",
      "  void handle(${2:Context} context);",
      "}",
      "",
      "class ${3:ConcreteStateA} implements ${1:State} {",
      "  @override",
      "  void handle(${2:Context} context) {",
      "    print('Handling in State A');",
      "    context.setState(${4:ConcreteStateB}());",
      "  }",
      "}",
      "",
      "class ${4:ConcreteStateB} implements ${1:State} {",
      "  @override",
      "  void handle(${2:Context} context) {",
      "    print('Handling in State B');",
      "    context.setState(${3:ConcreteStateA}());",
      "  }",
      "}",
      "",
      "class ${2:Context} {",
      "  ${1:State} _state;",
      "",
      "  ${2:Context}(this._state);",
      "",
      "  void setState(${1:State} state) {",
      "    _state = state;",
      "  }",
      "",
      "  void request() {",
      "    _state.handle(this);",
      "  }",
      "",
      "  ${1:State} get currentState => _state;",
      "}"
    ]
  }
}
