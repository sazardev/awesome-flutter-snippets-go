{
  "Navigation Button": {
    "prefix": "flb-nav",
    "description": "Button with navigation and custom styling",
    "body": [
      "ElevatedButton(",
      "  onPressed: () {",
      "    Navigator.of(context).push(",
      "      MaterialPageRoute(",
      "        builder: (context) => ${1:DestinationPage}(),",
      "      ),",
      "    );",
      "  },",
      "  style: ElevatedButton.styleFrom(",
      "    backgroundColor: Theme.of(context).colorScheme.${2:primary},",
      "    foregroundColor: Theme.of(context).colorScheme.${3:onPrimary},",
      "    elevation: ${4:3.0},",
      "    padding: const EdgeInsets.symmetric(",
      "      horizontal: ${5:24},",
      "      vertical: ${6:12},",
      "    ),",
      "    shape: RoundedRectangleBorder(",
      "      borderRadius: BorderRadius.circular(${7:12}),",
      "    ),",
      "    ${8:// Additional styling}",
      "  ),",
      "  child: Row(",
      "    mainAxisSize: MainAxisSize.min,",
      "    children: [",
      "      ${9:Icon(Icons.arrow_forward),}",
      "      ${10:const SizedBox(width: 8),}",
      "      Text('${11:Navigate}'),",
      "    ],",
      "  ),",
      ")$0"
    ]
  },

  "Replace Navigation Button": {
    "prefix": "flb-replace",
    "description": "Button that replaces current page",
    "body": [
      "FilledButton(",
      "  onPressed: () {",
      "    Navigator.of(context).pushReplacement(",
      "      MaterialPageRoute(",
      "        builder: (context) => ${1:NewPage}(),",
      "      ),",
      "    );",
      "  },",
      "  style: FilledButton.styleFrom(",
      "    backgroundColor: Theme.of(context).colorScheme.${2:secondary},",
      "    foregroundColor: Theme.of(context).colorScheme.${3:onSecondary},",
      "    minimumSize: const Size(${4:120}, ${5:48}),",
      "    shape: RoundedRectangleBorder(",
      "      borderRadius: BorderRadius.circular(${6:8}),",
      "    ),",
      "  ),",
      "  child: Text('${7:Replace}'),",
      ")$0"
    ]
  },

  "Pop Until Button": {
    "prefix": "flb-popuntil",
    "description": "Button that pops until specific route",
    "body": [
      "OutlinedButton(",
      "  onPressed: () {",
      "    Navigator.of(context).popUntil(",
      "      ModalRoute.withName('${1:/home}'),",
      "    );",
      "  },",
      "  style: OutlinedButton.styleFrom(",
      "    side: BorderSide(",
      "      color: Theme.of(context).colorScheme.${2:primary},",
      "      width: ${3:2.0},",
      "    ),",
      "    shape: RoundedRectangleBorder(",
      "      borderRadius: BorderRadius.circular(${4:12}),",
      "    ),",
      "    padding: const EdgeInsets.symmetric(",
      "      horizontal: ${5:20},",
      "      vertical: ${6:10},",
      "    ),",
      "  ),",
      "  child: Row(",
      "    mainAxisSize: MainAxisSize.min,",
      "    children: [",
      "      Icon(",
      "        Icons.${7:home},",
      "        color: Theme.of(context).colorScheme.${2:primary},",
      "      ),",
      "      const SizedBox(width: 8),",
      "      Text('${8:Back to Home}'),",
      "    ],",
      "  ),",
      ")$0"
    ]
  },

  "Named Route Button": {
    "prefix": "flb-named",
    "description": "Button with named route navigation",
    "body": [
      "ElevatedButton.icon(",
      "  onPressed: () {",
      "    Navigator.of(context).pushNamed(",
      "      '${1:/route_name}',",
      "      arguments: ${2:{",
      "        'param1': 'value1',",
      "        'param2': 'value2',",
      "      },}",
      "    );",
      "  },",
      "  style: ElevatedButton.styleFrom(",
      "    backgroundColor: Theme.of(context).colorScheme.${3:primaryContainer},",
      "    foregroundColor: Theme.of(context).colorScheme.${4:onPrimaryContainer},",
      "    elevation: ${5:2.0},",
      "    shape: RoundedRectangleBorder(",
      "      borderRadius: BorderRadius.circular(${6:16}),",
      "    ),",
      "  ),",
      "  icon: Icon(Icons.${7:launch}),",
      "  label: Text('${8:Go to Route}'),",
      ")$0"
    ]
  },

  "Custom Transition Button": {
    "prefix": "flb-transition",
    "description": "Button with custom page transition",
    "body": [
      "Material(",
      "  elevation: ${1:4.0},",
      "  borderRadius: BorderRadius.circular(${2:12}),",
      "  color: Theme.of(context).colorScheme.${3:primary},",
      "  child: InkWell(",
      "    borderRadius: BorderRadius.circular(${2:12}),",
      "    onTap: () {",
      "      Navigator.of(context).push(",
      "        PageRouteBuilder(",
      "          pageBuilder: (context, animation, secondaryAnimation) =>",
      "              ${4:DestinationPage}(),",
      "          transitionsBuilder: (context, animation, secondaryAnimation, child) {",
      "            const begin = Offset(${5:1.0, 0.0});",
      "            const end = Offset.zero;",
      "            const curve = Curves.${6:easeInOut};",
      "",
      "            final tween = Tween(begin: begin, end: end);",
      "            final curvedAnimation = CurvedAnimation(",
      "              parent: animation,",
      "              curve: curve,",
      "            );",
      "",
      "            return SlideTransition(",
      "              position: tween.animate(curvedAnimation),",
      "              child: child,",
      "            );",
      "          },",
      "          transitionDuration: const Duration(milliseconds: ${7:500}),",
      "        ),",
      "      );",
      "    },",
      "    child: Container(",
      "      padding: const EdgeInsets.symmetric(",
      "        horizontal: ${8:24},",
      "        vertical: ${9:16},",
      "      ),",
      "      child: Row(",
      "        mainAxisSize: MainAxisSize.min,",
      "        children: [",
      "          Icon(",
      "            Icons.${10:arrow_forward},",
      "            color: Theme.of(context).colorScheme.${11:onPrimary},",
      "          ),",
      "          const SizedBox(width: 8),",
      "          Text(",
      "            '${12:Custom Transition}',",
      "            style: TextStyle(",
      "              color: Theme.of(context).colorScheme.${11:onPrimary},",
      "              fontWeight: FontWeight.bold,",
      "            ),",
      "          ),",
      "        ],",
      "      ),",
      "    ),",
      "  ),",
      ")$0"
    ]
  },

  "Bottom Sheet Button": {
    "prefix": "flb-sheet",
    "description": "Button that opens bottom sheet",
    "body": [
      "FloatingActionButton.extended(",
      "  onPressed: () {",
      "    showModalBottomSheet(",
      "      context: context,",
      "      isScrollControlled: true,",
      "      backgroundColor: Colors.transparent,",
      "      builder: (context) => Container(",
      "        decoration: BoxDecoration(",
      "          color: Theme.of(context).colorScheme.surface,",
      "          borderRadius: const BorderRadius.vertical(",
      "            top: Radius.circular(${1:20}),",
      "          ),",
      "        ),",
      "        padding: EdgeInsets.only(",
      "          bottom: MediaQuery.of(context).viewInsets.bottom + 16,",
      "          left: 16,",
      "          right: 16,",
      "          top: 16,",
      "        ),",
      "        child: Column(",
      "          mainAxisSize: MainAxisSize.min,",
      "          children: [",
      "            // Handle",
      "            Container(",
      "              width: 40,",
      "              height: 4,",
      "              decoration: BoxDecoration(",
      "                color: Theme.of(context).colorScheme.onSurfaceVariant,",
      "                borderRadius: BorderRadius.circular(2),",
      "              ),",
      "            ),",
      "            const SizedBox(height: 16),",
      "            Text(",
      "              '${2:Bottom Sheet Title}',",
      "              style: Theme.of(context).textTheme.headlineSmall,",
      "            ),",
      "            const SizedBox(height: 16),",
      "            ${3:// Bottom sheet content}",
      "            Text(",
      "              '${4:This is the content of the bottom sheet.}',",
      "              style: Theme.of(context).textTheme.bodyLarge,",
      "            ),",
      "            const SizedBox(height: 24),",
      "            Row(",
      "              mainAxisAlignment: MainAxisAlignment.spaceEvenly,",
      "              children: [",
      "                TextButton(",
      "                  onPressed: () => Navigator.pop(context),",
      "                  child: const Text('${5:Cancel}'),",
      "                ),",
      "                FilledButton(",
      "                  onPressed: () {",
      "                    Navigator.pop(context);",
      "                    ${6:// Action}",
      "                  },",
      "                  child: const Text('${7:Confirm}'),",
      "                ),",
      "              ],",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    );",
      "  },",
      "  backgroundColor: Theme.of(context).colorScheme.${8:secondaryContainer},",
      "  foregroundColor: Theme.of(context).colorScheme.${9:onSecondaryContainer},",
      "  icon: Icon(Icons.${10:add}),",
      "  label: Text('${11:Show Sheet}'),",
      ")$0"
    ]
  },

  "Dialog Button": {
    "prefix": "flb-dialog",
    "description": "Button that opens dialog",
    "body": [
      "ElevatedButton(",
      "  onPressed: () async {",
      "    final result = await showDialog<${1:bool}>(",
      "      context: context,",
      "      builder: (BuildContext context) {",
      "        return AlertDialog(",
      "          icon: Icon(",
      "            Icons.${2:info},",
      "            color: Theme.of(context).colorScheme.primary,",
      "            size: 32,",
      "          ),",
      "          title: const Text('${3:Dialog Title}'),",
      "          content: const Text('${4:Are you sure you want to proceed?}'),",
      "          actions: [",
      "            TextButton(",
      "              onPressed: () => Navigator.of(context).pop(false),",
      "              child: const Text('${5:Cancel}'),",
      "            ),",
      "            FilledButton(",
      "              onPressed: () => Navigator.of(context).pop(true),",
      "              child: const Text('${6:Confirm}'),",
      "            ),",
      "          ],",
      "          shape: RoundedRectangleBorder(",
      "            borderRadius: BorderRadius.circular(16),",
      "          ),",
      "          backgroundColor: Theme.of(context).colorScheme.surface,",
      "        );",
      "      },",
      "    );",
      "",
      "    if (result == true) {",
      "      ${7:// Handle confirm action}",
      "    }",
      "  },",
      "  style: ElevatedButton.styleFrom(",
      "    backgroundColor: Theme.of(context).colorScheme.${8:errorContainer},",
      "    foregroundColor: Theme.of(context).colorScheme.${9:onErrorContainer},",
      "  ),",
      "  child: Row(",
      "    mainAxisSize: MainAxisSize.min,",
      "    children: [",
      "      Icon(Icons.${10:warning}),",
      "      const SizedBox(width: 8),",
      "      Text('${11:Show Dialog}'),",
      "    ],",
      "  ),",
      ")$0"
    ]
  },

  "Loading Button": {
    "prefix": "flb-loading",
    "description": "Button with loading state",
    "body": [
      "class ${1:Loading}Button extends StatefulWidget {",
      "  const ${1:Loading}Button({",
      "    super.key,",
      "    required this.onPressed,",
      "    required this.text,",
      "    this.loadingText = 'Loading...',",
      "    this.icon,",
      "    this.style,",
      "  });",
      "",
      "  final Future<void> Function() onPressed;",
      "  final String text;",
      "  final String loadingText;",
      "  final IconData? icon;",
      "  final ButtonStyle? style;",
      "",
      "  @override",
      "  State<${1:Loading}Button> createState() => _${1:Loading}ButtonState();",
      "}",
      "",
      "class _${1:Loading}ButtonState extends State<${1:Loading}Button> {",
      "  bool _isLoading = false;",
      "",
      "  Future<void> _handlePress() async {",
      "    if (_isLoading) return;",
      "",
      "    setState(() {",
      "      _isLoading = true;",
      "    });",
      "",
      "    try {",
      "      await widget.onPressed();",
      "    } finally {",
      "      if (mounted) {",
      "        setState(() {",
      "          _isLoading = false;",
      "        });",
      "      }",
      "    }",
      "  }",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return FilledButton(",
      "      onPressed: _isLoading ? null : _handlePress,",
      "      style: widget.style ??",
      "          FilledButton.styleFrom(",
      "            minimumSize: const Size(${2:120}, ${3:48}),",
      "            shape: RoundedRectangleBorder(",
      "              borderRadius: BorderRadius.circular(${4:12}),",
      "            ),",
      "          ),",
      "      child: _isLoading",
      "          ? Row(",
      "              mainAxisSize: MainAxisSize.min,",
      "              children: [",
      "                SizedBox(",
      "                  width: 16,",
      "                  height: 16,",
      "                  child: CircularProgressIndicator(",
      "                    strokeWidth: 2,",
      "                    valueColor: AlwaysStoppedAnimation<Color>(",
      "                      Theme.of(context).colorScheme.onPrimary,",
      "                    ),",
      "                  ),",
      "                ),",
      "                const SizedBox(width: 8),",
      "                Text(widget.loadingText),",
      "              ],",
      "            )",
      "          : Row(",
      "              mainAxisSize: MainAxisSize.min,",
      "              children: [",
      "                if (widget.icon != null) ...[",
      "                  Icon(widget.icon),",
      "                  const SizedBox(width: 8),",
      "                ],",
      "                Text(widget.text),",
      "              ],",
      "            ),",
      "    );",
      "  }",
      "}$0"
    ]
  },

  "Social Login Button": {
    "prefix": "flb-social",
    "description": "Social media login button template",
    "body": [
      "Container(",
      "  width: double.infinity,",
      "  height: ${1:56},",
      "  margin: const EdgeInsets.symmetric(vertical: ${2:8}),",
      "  child: ElevatedButton(",
      "    onPressed: () async {",
      "      ${3:// Handle social login}",
      "      try {",
      "        ${4:// Implement OAuth login}",
      "        ",
      "        // Navigate on success",
      "        if (mounted) {",
      "          Navigator.of(context).pushReplacementNamed('${5:/home}');",
      "        }",
      "      } catch (e) {",
      "        if (mounted) {",
      "          ScaffoldMessenger.of(context).showSnackBar(",
      "            SnackBar(",
      "              content: Text('Login failed: \\${e.toString()}'),",
      "              backgroundColor: Theme.of(context).colorScheme.error,",
      "            ),",
      "          );",
      "        }",
      "      }",
      "    },",
      "    style: ElevatedButton.styleFrom(",
      "      backgroundColor: const Color(${6:0xFF4285F4}), // Google Blue",
      "      foregroundColor: Colors.white,",
      "      elevation: ${7:2.0},",
      "      shape: RoundedRectangleBorder(",
      "        borderRadius: BorderRadius.circular(${8:8}),",
      "        side: BorderSide(",
      "          color: Colors.grey.shade300,",
      "          width: 1,",
      "        ),",
      "      ),",
      "    ),",
      "    child: Row(",
      "      mainAxisAlignment: MainAxisAlignment.center,",
      "      children: [",
      "        ${9:// Add social media icon}",
      "        Image.asset(",
      "          '${10:assets/images/google_logo.png}',",
      "          width: 24,",
      "          height: 24,",
      "        ),",
      "        const SizedBox(width: 12),",
      "        Text(",
      "          '${11:Continue with Google}',",
      "          style: const TextStyle(",
      "            fontSize: 16,",
      "            fontWeight: FontWeight.w500,",
      "          ),",
      "        ),",
      "      ],",
      "    ),",
      "  ),",
      ")$0"
    ]
  },

  "Gradient Button": {
    "prefix": "flb-gradient",
    "description": "Button with gradient background",
    "body": [
      "Container(",
      "  decoration: BoxDecoration(",
      "    gradient: LinearGradient(",
      "      colors: [",
      "        ${1:Theme.of(context).colorScheme.primary},",
      "        ${2:Theme.of(context).colorScheme.secondary},",
      "      ],",
      "      begin: Alignment.${3:topLeft},",
      "      end: Alignment.${4:bottomRight},",
      "    ),",
      "    borderRadius: BorderRadius.circular(${5:12}),",
      "    boxShadow: [",
      "      BoxShadow(",
      "        color: ${1:Theme.of(context).colorScheme.primary}.withOpacity(0.3),",
      "        blurRadius: ${6:8},",
      "        offset: const Offset(0, ${7:4}),",
      "      ),",
      "    ],",
      "  ),",
      "  child: Material(",
      "    color: Colors.transparent,",
      "    child: InkWell(",
      "      borderRadius: BorderRadius.circular(${5:12}),",
      "      onTap: () {",
      "        ${8:// Handle tap}",
      "        Navigator.of(context).push(",
      "          MaterialPageRoute(",
      "            builder: (context) => ${9:DestinationPage}(),",
      "          ),",
      "        );",
      "      },",
      "      child: Container(",
      "        padding: const EdgeInsets.symmetric(",
      "          horizontal: ${10:24},",
      "          vertical: ${11:16},",
      "        ),",
      "        child: Row(",
      "          mainAxisSize: MainAxisSize.min,",
      "          mainAxisAlignment: MainAxisAlignment.center,",
      "          children: [",
      "            Icon(",
      "              Icons.${12:star},",
      "              color: Colors.white,",
      "            ),",
      "            const SizedBox(width: 8),",
      "            Text(",
      "              '${13:Gradient Button}',",
      "              style: const TextStyle(",
      "                color: Colors.white,",
      "                fontWeight: FontWeight.bold,",
      "                fontSize: 16,",
      "              ),",
      "            ),",
      "          ],",
      "        ),",
      "      ),",
      "    ),",
      "  ),",
      ")$0"
    ]
  }
}
