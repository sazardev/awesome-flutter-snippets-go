{
  "Repository Implementation": {
    "prefix": "clean-repo-impl",
    "description": "Complete repository implementation with caching and error handling",
    "body": [
      "import 'package:dartz/dartz.dart';",
      "",
      "import '../../domain/entities/${1:user}.dart';",
      "import '../../domain/failures/${2:domain}_failure.dart';",
      "import '../../domain/repositories/${1:user}_repository.dart';",
      "import '../datasources/${1:user}_local_datasource.dart';",
      "import '../datasources/${1:user}_remote_datasource.dart';",
      "import '../mappers/${1:user}_mapper.dart';",
      "import '../models/${1:user}_dto.dart';",
      "",
      "class ${3:User}RepositoryImpl implements ${3:User}Repository {",
      "  final ${3:User}RemoteDataSource _remoteDataSource;",
      "  final ${3:User}LocalDataSource _localDataSource;",
      "",
      "  const ${3:User}RepositoryImpl({",
      "    required ${3:User}RemoteDataSource remoteDataSource,",
      "    required ${3:User}LocalDataSource localDataSource,",
      "  }) : _remoteDataSource = remoteDataSource,",
      "       _localDataSource = localDataSource;",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, ${1:User}>> create(${1:User} ${4:user}) async {",
      "    try {",
      "      // Convert entity to DTO",
      "      final dto = ${3:User}Mapper.entityToDto(${4:user});",
      "",
      "      // Create via remote data source",
      "      final remoteResult = await _remoteDataSource.create(dto);",
      "      return remoteResult.fold(",
      "        (failure) => left(failure),",
      "        (createdDto) async {",
      "          // Convert back to entity",
      "          final entityResult = ${3:User}Mapper.dtoToEntity(createdDto);",
      "          return entityResult.fold(",
      "            (failure) => left(failure),",
      "            (entity) async {",
      "              // Cache the created entity",
      "              await _localDataSource.cache(createdDto);",
      "              return right(entity);",
      "            },",
      "          );",
      "        },",
      "      );",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to create ${4:user}: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, ${1:User}>> getById(String id) async {",
      "    try {",
      "      // Try to get from local cache first",
      "      final cachedResult = await _localDataSource.getById(id);",
      "      ",
      "      return cachedResult.fold(",
      "        // Cache miss or error, try remote",
      "        (cacheFailure) async {",
      "          final remoteResult = await _remoteDataSource.getById(id);",
      "          return remoteResult.fold(",
      "            (failure) => left(failure),",
      "            (dto) async {",
      "              // Cache the result",
      "              await _localDataSource.cache(dto);",
      "              ",
      "              // Convert to entity",
      "              return ${3:User}Mapper.dtoToEntity(dto);",
      "            },",
      "          );",
      "        },",
      "        // Cache hit",
      "        (dto) async {",
      "          // Check if cache is stale (optional)",
      "          if (_isCacheStale(dto)) {",
      "            // Refresh from remote in background",
      "            _refreshCacheInBackground(id);",
      "          }",
      "          ",
      "          return ${3:User}Mapper.dtoToEntity(dto);",
      "        },",
      "      );",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to get ${4:user}: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, List<${1:User}>>> getAll() async {",
      "    try {",
      "      // Try local first for offline support",
      "      final localResult = await _localDataSource.getAll();",
      "      ",
      "      // Always try to refresh from remote",
      "      final remoteResult = await _remoteDataSource.getAll();",
      "      ",
      "      return remoteResult.fold(",
      "        // Remote failed, use local if available",
      "        (remoteFailure) async {",
      "          return localResult.fold(",
      "            (localFailure) => left(remoteFailure), // Return remote failure",
      "            (dtos) => ${3:User}Mapper.dtosToEntities(dtos),",
      "          );",
      "        },",
      "        // Remote succeeded",
      "        (dtos) async {",
      "          // Update local cache",
      "          await _localDataSource.cacheAll(dtos);",
      "          ",
      "          // Convert to entities",
      "          return ${3:User}Mapper.dtosToEntities(dtos);",
      "        },",
      "      );",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to get all ${4:user}s: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, ${1:User}>> update(${1:User} ${4:user}) async {",
      "    try {",
      "      final dto = ${3:User}Mapper.entityToDto(${4:user});",
      "",
      "      final result = await _remoteDataSource.update(dto);",
      "      return result.fold(",
      "        (failure) => left(failure),",
      "        (updatedDto) async {",
      "          // Update local cache",
      "          await _localDataSource.cache(updatedDto);",
      "          ",
      "          // Convert back to entity",
      "          return ${3:User}Mapper.dtoToEntity(updatedDto);",
      "        },",
      "      );",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to update ${4:user}: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, Unit>> delete(String id) async {",
      "    try {",
      "      final result = await _remoteDataSource.delete(id);",
      "      return result.fold(",
      "        (failure) => left(failure),",
      "        (_) async {",
      "          // Remove from local cache",
      "          await _localDataSource.delete(id);",
      "          return right(unit);",
      "        },",
      "      );",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to delete ${4:user}: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, List<${1:User}>>> search({",
      "    String? query,",
      "    Map<String, dynamic>? filters,",
      "    String? sortBy,",
      "    bool ascending = true,",
      "    int? limit,",
      "    int? offset,",
      "  }) async {",
      "    try {",
      "      final result = await _remoteDataSource.search(",
      "        query: query,",
      "        filters: filters,",
      "        sortBy: sortBy,",
      "        ascending: ascending,",
      "        limit: limit,",
      "        offset: offset,",
      "      );",
      "",
      "      return result.fold(",
      "        (failure) => left(failure),",
      "        (dtos) => ${3:User}Mapper.dtosToEntities(dtos),",
      "      );",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to search ${4:user}s: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, ${1:User}?>> findByEmail(String email) async {",
      "    try {",
      "      final result = await _remoteDataSource.findByEmail(email);",
      "      return result.fold(",
      "        (failure) => left(failure),",
      "        (dto) {",
      "          if (dto == null) return right(null);",
      "          return ${3:User}Mapper.dtoToEntity(dto).fold(",
      "            (failure) => left(failure),",
      "            (entity) => right(entity),",
      "          );",
      "        },",
      "      );",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to find ${4:user} by email: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, bool>> exists(String id) async {",
      "    try {",
      "      // Check local cache first",
      "      final localExists = await _localDataSource.exists(id);",
      "      if (localExists) return right(true);",
      "",
      "      // Check remote",
      "      final result = await _remoteDataSource.exists(id);",
      "      return result;",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to check ${4:user} existence: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, bool>> existsByEmail(String email) async {",
      "    try {",
      "      final result = await _remoteDataSource.existsByEmail(email);",
      "      return result;",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to check email existence: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Stream<Either<${2:Domain}Failure, ${1:User}>> watchById(String id) async* {",
      "    // Implementation would depend on your streaming strategy",
      "    // This is a simple polling example",
      "    yield* Stream.periodic(",
      "      const Duration(seconds: 30),",
      "      (_) => getById(id),",
      "    ).asyncMap((future) => await future);",
      "  }",
      "",
      "  @override",
      "  Stream<Either<${2:Domain}Failure, List<${1:User}>>> watchAll() async* {",
      "    yield* Stream.periodic(",
      "      const Duration(seconds: 60),",
      "      (_) => getAll(),",
      "    ).asyncMap((future) => await future);",
      "  }",
      "",
      "  // Private helper methods",
      "  bool _isCacheStale(${3:User}Dto dto) {",
      "    // Simple staleness check - 5 minutes",
      "    if (dto.updatedAt == null) return true;",
      "    ",
      "    final updatedAt = DateTime.tryParse(dto.updatedAt!);",
      "    if (updatedAt == null) return true;",
      "    ",
      "    return DateTime.now().difference(updatedAt).inMinutes > 5;",
      "  }",
      "",
      "  void _refreshCacheInBackground(String id) {",
      "    // Fire and forget cache refresh",
      "    _remoteDataSource.getById(id).then((result) {",
      "      result.fold(",
      "        (_) {}, // Ignore errors in background refresh",
      "        (dto) => _localDataSource.cache(dto),",
      "      );",
      "    });",
      "  }",
      "",
      "  // Additional repository methods from the interface...",
      "  @override",
      "  Future<Either<${2:Domain}Failure, List<${1:User}>>> getActive() async {",
      "    return search(filters: {'active': true});",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, List<${1:User}>>> getRecent({int days = 7}) async {",
      "    final cutoffDate = DateTime.now().subtract(Duration(days: days));",
      "    return search(filters: {'created_after': cutoffDate.toIso8601String()});",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, PaginatedResult<${1:User}>>> getPaginated({",
      "    required int page,",
      "    required int pageSize,",
      "    String? sortBy,",
      "    bool ascending = true,",
      "    Map<String, dynamic>? filters,",
      "  }) async {",
      "    try {",
      "      final result = await _remoteDataSource.getPaginated(",
      "        page: page,",
      "        pageSize: pageSize,",
      "        sortBy: sortBy,",
      "        ascending: ascending,",
      "        filters: filters,",
      "      );",
      "",
      "      return result.fold(",
      "        (failure) => left(failure),",
      "        (paginatedDto) {",
      "          final entitiesResult = ${3:User}Mapper.dtosToEntities(paginatedDto.items);",
      "          return entitiesResult.fold(",
      "            (failure) => left(failure),",
      "            (entities) => right(PaginatedResult(",
      "              items: entities,",
      "              totalCount: paginatedDto.totalCount,",
      "              page: paginatedDto.page,",
      "              pageSize: paginatedDto.pageSize,",
      "            )),",
      "          );",
      "        },",
      "      );",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to get paginated ${4:user}s: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, List<${1:User}>>> createMany(List<${1:User}> ${5:users}) async {",
      "    try {",
      "      final dtos = ${3:User}Mapper.entitiesToDtos(${5:users});",
      "      final result = await _remoteDataSource.createMany(dtos);",
      "",
      "      return result.fold(",
      "        (failure) => left(failure),",
      "        (createdDtos) async {",
      "          // Cache all created entities",
      "          await _localDataSource.cacheAll(createdDtos);",
      "          return ${3:User}Mapper.dtosToEntities(createdDtos);",
      "        },",
      "      );",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to create multiple ${4:user}s: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, Unit>> deleteMany(List<String> ids) async {",
      "    try {",
      "      final result = await _remoteDataSource.deleteMany(ids);",
      "      return result.fold(",
      "        (failure) => left(failure),",
      "        (_) async {",
      "          // Remove all from local cache",
      "          for (final id in ids) {",
      "            await _localDataSource.delete(id);",
      "          }",
      "          return right(unit);",
      "        },",
      "      );",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to delete multiple ${4:user}s: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, List<${1:User}>>> updateMany(List<${1:User}> ${5:users}) async {",
      "    try {",
      "      final dtos = ${3:User}Mapper.entitiesToDtos(${5:users});",
      "      final result = await _remoteDataSource.updateMany(dtos);",
      "",
      "      return result.fold(",
      "        (failure) => left(failure),",
      "        (updatedDtos) async {",
      "          // Update cache",
      "          await _localDataSource.cacheAll(updatedDtos);",
      "          return ${3:User}Mapper.dtosToEntities(updatedDtos);",
      "        },",
      "      );",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to update multiple ${4:user}s: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Stream<Either<${2:Domain}Failure, List<${1:User}>>> watchActive() async* {",
      "    yield* Stream.periodic(",
      "      const Duration(seconds: 60),",
      "      (_) => getActive(),",
      "    ).asyncMap((future) => await future);",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, int>> count([Map<String, dynamic>? filters]) async {",
      "    try {",
      "      final result = await _remoteDataSource.count(filters);",
      "      return result;",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to count ${4:user}s: \\$e'));",
      "    }",
      "  }",
      "",
      "  @override",
      "  Future<Either<${2:Domain}Failure, Map<String, int>>> getStatistics() async {",
      "    try {",
      "      final result = await _remoteDataSource.getStatistics();",
      "      return result;",
      "    } catch (e) {",
      "      return left(${2:Domain}Failure.unexpected('Failed to get ${4:user} statistics: \\$e'));",
      "    }",
      "  }",
      "}",
      "$0"
    ]
  },

  "Remote Data Source Interface": {
    "prefix": "clean-datasource-remote",
    "description": "Remote data source interface with comprehensive API methods",
    "body": [
      "import 'package:dartz/dartz.dart';",
      "",
      "import '../../domain/failures/${1:domain}_failure.dart';",
      "import '../models/${2:user}_dto.dart';",
      "",
      "abstract class ${3:User}RemoteDataSource {",
      "  // CRUD Operations",
      "  Future<Either<${1:Domain}Failure, ${2:User}Dto>> create(${2:User}Dto ${4:user}Dto);",
      "  Future<Either<${1:Domain}Failure, ${2:User}Dto>> getById(String id);",
      "  Future<Either<${1:Domain}Failure, List<${2:User}Dto>>> getAll();",
      "  Future<Either<${1:Domain}Failure, ${2:User}Dto>> update(${2:User}Dto ${4:user}Dto);",
      "  Future<Either<${1:Domain}Failure, Unit>> delete(String id);",
      "",
      "  // Query Operations",
      "  Future<Either<${1:Domain}Failure, List<${2:User}Dto>>> search({",
      "    String? query,",
      "    Map<String, dynamic>? filters,",
      "    String? sortBy,",
      "    bool ascending = true,",
      "    int? limit,",
      "    int? offset,",
      "  });",
      "",
      "  Future<Either<${1:Domain}Failure, ${2:User}Dto?>> findByEmail(String email);",
      "  Future<Either<${1:Domain}Failure, List<${2:User}Dto>>> getActive();",
      "  Future<Either<${1:Domain}Failure, List<${2:User}Dto>>> getRecent({int days = 7});",
      "",
      "  // Pagination",
      "  Future<Either<${1:Domain}Failure, PaginatedDtoResult<${2:User}Dto>>> getPaginated({",
      "    required int page,",
      "    required int pageSize,",
      "    String? sortBy,",
      "    bool ascending = true,",
      "    Map<String, dynamic>? filters,",
      "  });",
      "",
      "  // Batch Operations",
      "  Future<Either<${1:Domain}Failure, List<${2:User}Dto>>> createMany(List<${2:User}Dto> ${5:users});",
      "  Future<Either<${1:Domain}Failure, Unit>> deleteMany(List<String> ids);",
      "  Future<Either<${1:Domain}Failure, List<${2:User}Dto>>> updateMany(List<${2:User}Dto> ${5:users});",
      "",
      "  // Existence checks",
      "  Future<Either<${1:Domain}Failure, bool>> exists(String id);",
      "  Future<Either<${1:Domain}Failure, bool>> existsByEmail(String email);",
      "",
      "  // Statistics and aggregations",
      "  Future<Either<${1:Domain}Failure, int>> count([Map<String, dynamic>? filters]);",
      "  Future<Either<${1:Domain}Failure, Map<String, int>>> getStatistics();",
      "",
      "  // File operations (if applicable)",
      "  Future<Either<${1:Domain}Failure, String>> uploadProfileImage(",
      "    String ${4:user}Id,",
      "    String imagePath,",
      "  );",
      "",
      "  Future<Either<${1:Domain}Failure, Unit>> deleteProfileImage(String ${4:user}Id);",
      "",
      "  // Authentication related (if applicable)",
      "  Future<Either<${1:Domain}Failure, ${2:User}Dto>> authenticate(",
      "    String email,",
      "    String password,",
      "  );",
      "",
      "  Future<Either<${1:Domain}Failure, Unit>> resetPassword(String email);",
      "",
      "  Future<Either<${1:Domain}Failure, Unit>> verifyEmail(String token);",
      "",
      "  // Real-time subscriptions (if using WebSocket/SSE)",
      "  Stream<Either<${1:Domain}Failure, ${2:User}Dto>> subscribeToUpdates(String id);",
      "  Stream<Either<${1:Domain}Failure, List<${2:User}Dto>>> subscribeToAll();",
      "",
      "  // Health check",
      "  Future<Either<${1:Domain}Failure, bool>> healthCheck();",
      "}",
      "",
      "class PaginatedDtoResult<T> {",
      "  final List<T> items;",
      "  final int totalCount;",
      "  final int page;",
      "  final int pageSize;",
      "  final int totalPages;",
      "  final bool hasNextPage;",
      "  final bool hasPreviousPage;",
      "",
      "  const PaginatedDtoResult({",
      "    required this.items,",
      "    required this.totalCount,",
      "    required this.page,",
      "    required this.pageSize,",
      "  }) : totalPages = (totalCount / pageSize).ceil(),",
      "       hasNextPage = page < (totalCount / pageSize).ceil(),",
      "       hasPreviousPage = page > 1;",
      "}",
      "$0"
    ]
  },

  "Local Data Source Interface": {
    "prefix": "clean-datasource-local",
    "description": "Local data source interface for caching and offline support",
    "body": [
      "import 'package:dartz/dartz.dart';",
      "",
      "import '../../domain/failures/${1:domain}_failure.dart';",
      "import '../models/${2:user}_dto.dart';",
      "",
      "abstract class ${3:User}LocalDataSource {",
      "  // Cache Operations",
      "  Future<Either<${1:Domain}Failure, Unit>> cache(${2:User}Dto ${4:user}Dto);",
      "  Future<Either<${1:Domain}Failure, Unit>> cacheAll(List<${2:User}Dto> ${5:users});",
      "",
      "  // Retrieval Operations",
      "  Future<Either<${1:Domain}Failure, ${2:User}Dto>> getById(String id);",
      "  Future<Either<${1:Domain}Failure, List<${2:User}Dto>>> getAll();",
      "  Future<Either<${1:Domain}Failure, List<${2:User}Dto>>> getAllActive();",
      "",
      "  // Search Operations",
      "  Future<Either<${1:Domain}Failure, List<${2:User}Dto>>> search({",
      "    String? query,",
      "    Map<String, dynamic>? filters,",
      "    String? sortBy,",
      "    bool ascending = true,",
      "    int? limit,",
      "    int? offset,",
      "  });",
      "",
      "  Future<Either<${1:Domain}Failure, ${2:User}Dto?>> findByEmail(String email);",
      "",
      "  // Deletion Operations",
      "  Future<Either<${1:Domain}Failure, Unit>> delete(String id);",
      "  Future<Either<${1:Domain}Failure, Unit>> deleteAll();",
      "  Future<Either<${1:Domain}Failure, Unit>> deleteMany(List<String> ids);",
      "",
      "  // Existence checks",
      "  Future<bool> exists(String id);",
      "  Future<bool> existsByEmail(String email);",
      "",
      "  // Cache management",
      "  Future<Either<${1:Domain}Failure, Unit>> clearCache();",
      "  Future<Either<${1:Domain}Failure, Unit>> clearExpiredCache();",
      "  Future<Either<${1:Domain}Failure, int>> getCacheSize();",
      "  Future<Either<${1:Domain}Failure, DateTime?>> getLastCacheUpdate(String id);",
      "",
      "  // Statistics",
      "  Future<Either<${1:Domain}Failure, int>> count([Map<String, dynamic>? filters]);",
      "  Future<Either<${1:Domain}Failure, Map<String, int>>> getCacheStatistics();",
      "",
      "  // Offline support",
      "  Future<Either<${1:Domain}Failure, List<${2:User}Dto>>> getPendingSync();",
      "  Future<Either<${1:Domain}Failure, Unit>> markAsSynced(String id);",
      "  Future<Either<${1:Domain}Failure, Unit>> markForSync(${2:User}Dto ${4:user}Dto);",
      "",
      "  // Backup and restore",
      "  Future<Either<${1:Domain}Failure, String>> exportData();",
      "  Future<Either<${1:Domain}Failure, Unit>> importData(String data);",
      "",
      "  // Migration support",
      "  Future<Either<${1:Domain}Failure, Unit>> migrate(int fromVersion, int toVersion);",
      "  Future<Either<${1:Domain}Failure, int>> getCurrentVersion();",
      "}",
      "$0"
    ]
  }
}
