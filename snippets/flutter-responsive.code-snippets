{
  "Responsive Builder": {
    "prefix": "flr-builder",
    "description": "Responsive builder widget for different screen sizes",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:ResponsiveBuilder} extends StatelessWidget {",
      "  const ${1:ResponsiveBuilder}({",
      "    super.key,",
      "    required this.mobile,",
      "    this.tablet,",
      "    this.desktop,",
      "  });",
      "",
      "  final Widget mobile;",
      "  final Widget? tablet;",
      "  final Widget? desktop;",
      "",
      "  static bool isMobile(BuildContext context) =>",
      "      MediaQuery.of(context).size.width < 650;",
      "",
      "  static bool isTablet(BuildContext context) =>",
      "      MediaQuery.of(context).size.width >= 650 &&",
      "      MediaQuery.of(context).size.width < 1100;",
      "",
      "  static bool isDesktop(BuildContext context) =>",
      "      MediaQuery.of(context).size.width >= 1100;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    final Size size = MediaQuery.of(context).size;",
      "    ",
      "    if (size.width >= 1100) {",
      "      return desktop ?? tablet ?? mobile;",
      "    } else if (size.width >= 650) {",
      "      return tablet ?? mobile;",
      "    } else {",
      "      return mobile;",
      "    }",
      "  }",
      "}$0"
    ]
  },

  "Responsive Layout": {
    "prefix": "flr-layout",
    "description": "Responsive layout with breakpoints",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:ResponsiveLayout} extends StatelessWidget {",
      "  const ${1:ResponsiveLayout}({",
      "    super.key,",
      "    required this.body,",
      "    this.drawer,",
      "    this.endDrawer,",
      "    this.appBar,",
      "    this.bottomNavigationBar,",
      "    this.floatingActionButton,",
      "  });",
      "",
      "  final Widget body;",
      "  final Widget? drawer;",
      "  final Widget? endDrawer;",
      "  final PreferredSizeWidget? appBar;",
      "  final Widget? bottomNavigationBar;",
      "  final Widget? floatingActionButton;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return LayoutBuilder(",
      "      builder: (context, constraints) {",
      "        if (constraints.maxWidth >= 1200) {",
      "          // Desktop Layout",
      "          return _buildDesktopLayout(context);",
      "        } else if (constraints.maxWidth >= 600) {",
      "          // Tablet Layout",
      "          return _buildTabletLayout(context);",
      "        } else {",
      "          // Mobile Layout",
      "          return _buildMobileLayout(context);",
      "        }",
      "      },",
      "    );",
      "  }",
      "",
      "  Widget _buildMobileLayout(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: appBar,",
      "      drawer: drawer,",
      "      endDrawer: endDrawer,",
      "      body: body,",
      "      bottomNavigationBar: bottomNavigationBar,",
      "      floatingActionButton: floatingActionButton,",
      "    );",
      "  }",
      "",
      "  Widget _buildTabletLayout(BuildContext context) {",
      "    return Scaffold(",
      "      appBar: appBar,",
      "      body: Row(",
      "        children: [",
      "          if (drawer != null)",
      "            SizedBox(",
      "              width: 280,",
      "              child: drawer!,",
      "            ),",
      "          Expanded(child: body),",
      "          if (endDrawer != null)",
      "            SizedBox(",
      "              width: 280,",
      "              child: endDrawer!,",
      "            ),",
      "        ],",
      "      ),",
      "      bottomNavigationBar: bottomNavigationBar,",
      "      floatingActionButton: floatingActionButton,",
      "    );",
      "  }",
      "",
      "  Widget _buildDesktopLayout(BuildContext context) {",
      "    return Scaffold(",
      "      body: Column(",
      "        children: [",
      "          if (appBar != null) appBar!,",
      "          Expanded(",
      "            child: Row(",
      "              children: [",
      "                if (drawer != null)",
      "                  SizedBox(",
      "                    width: 300,",
      "                    child: drawer!,",
      "                  ),",
      "                Expanded(",
      "                  child: Container(",
      "                    margin: const EdgeInsets.symmetric(horizontal: 16),",
      "                    child: body,",
      "                  ),",
      "                ),",
      "                if (endDrawer != null)",
      "                  SizedBox(",
      "                    width: 300,",
      "                    child: endDrawer!,",
      "                  ),",
      "              ],",
      "            ),",
      "          ),",
      "        ],",
      "      ),",
      "      floatingActionButton: floatingActionButton,",
      "    );",
      "  }",
      "}$0"
    ]
  },

  "Responsive Grid": {
    "prefix": "flr-grid",
    "description": "Responsive grid with dynamic columns",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:ResponsiveGrid} extends StatelessWidget {",
      "  const ${1:ResponsiveGrid}({",
      "    super.key,",
      "    required this.children,",
      "    this.spacing = 16,",
      "    this.runSpacing = 16,",
      "    this.minItemWidth = 250,",
      "    this.maxItemWidth = 400,",
      "  });",
      "",
      "  final List<Widget> children;",
      "  final double spacing;",
      "  final double runSpacing;",
      "  final double minItemWidth;",
      "  final double maxItemWidth;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return LayoutBuilder(",
      "      builder: (context, constraints) {",
      "        final availableWidth = constraints.maxWidth;",
      "        ",
      "        // Calculate number of columns",
      "        int columns = (availableWidth / minItemWidth).floor();",
      "        columns = columns < 1 ? 1 : columns;",
      "        ",
      "        // Calculate item width",
      "        final totalSpacing = spacing * (columns - 1);",
      "        final itemWidth = (availableWidth - totalSpacing) / columns;",
      "        ",
      "        // Adjust columns if item width exceeds maximum",
      "        if (itemWidth > maxItemWidth) {",
      "          columns = (availableWidth / maxItemWidth).floor();",
      "          columns = columns < 1 ? 1 : columns;",
      "        }",
      "        ",
      "        return GridView.builder(",
      "          padding: EdgeInsets.zero,",
      "          shrinkWrap: true,",
      "          physics: const NeverScrollableScrollPhysics(),",
      "          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(",
      "            crossAxisCount: columns,",
      "            crossAxisSpacing: spacing,",
      "            mainAxisSpacing: runSpacing,",
      "            childAspectRatio: _calculateAspectRatio(columns),",
      "          ),",
      "          itemCount: children.length,",
      "          itemBuilder: (context, index) => children[index],",
      "        );",
      "      },",
      "    );",
      "  }",
      "",
      "  double _calculateAspectRatio(int columns) {",
      "    // Adjust aspect ratio based on screen size",
      "    if (columns == 1) return 1.2;",
      "    if (columns == 2) return 1.0;",
      "    if (columns == 3) return 0.8;",
      "    return 0.7;",
      "  }",
      "}$0"
    ]
  },

  "Responsive Container": {
    "prefix": "flr-container",
    "description": "Responsive container with adaptive padding and margins",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:ResponsiveContainer} extends StatelessWidget {",
      "  const ${1:ResponsiveContainer}({",
      "    super.key,",
      "    required this.child,",
      "    this.maxWidth = 1200,",
      "    this.mobilePadding = const EdgeInsets.all(16),",
      "    this.tabletPadding = const EdgeInsets.all(24),",
      "    this.desktopPadding = const EdgeInsets.all(32),",
      "    this.alignment = Alignment.center,",
      "  });",
      "",
      "  final Widget child;",
      "  final double maxWidth;",
      "  final EdgeInsets mobilePadding;",
      "  final EdgeInsets tabletPadding;",
      "  final EdgeInsets desktopPadding;",
      "  final Alignment alignment;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return LayoutBuilder(",
      "      builder: (context, constraints) {",
      "        EdgeInsets padding;",
      "        ",
      "        if (constraints.maxWidth < 600) {",
      "          padding = mobilePadding;",
      "        } else if (constraints.maxWidth < 1200) {",
      "          padding = tabletPadding;",
      "        } else {",
      "          padding = desktopPadding;",
      "        }",
      "        ",
      "        return Align(",
      "          alignment: alignment,",
      "          child: Container(",
      "            width: constraints.maxWidth > maxWidth ? maxWidth : null,",
      "            padding: padding,",
      "            child: child,",
      "          ),",
      "        );",
      "      },",
      "    );",
      "  }",
      "}$0"
    ]
  },

  "Responsive Text": {
    "prefix": "flr-text",
    "description": "Responsive text that adapts to screen size",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:ResponsiveText} extends StatelessWidget {",
      "  const ${1:ResponsiveText}(",
      "    this.text, {",
      "    super.key,",
      "    this.mobileStyle,",
      "    this.tabletStyle,",
      "    this.desktopStyle,",
      "    this.textAlign,",
      "    this.maxLines,",
      "    this.overflow,",
      "  });",
      "",
      "  final String text;",
      "  final TextStyle? mobileStyle;",
      "  final TextStyle? tabletStyle;",
      "  final TextStyle? desktopStyle;",
      "  final TextAlign? textAlign;",
      "  final int? maxLines;",
      "  final TextOverflow? overflow;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return LayoutBuilder(",
      "      builder: (context, constraints) {",
      "        TextStyle? style;",
      "        ",
      "        if (constraints.maxWidth < 600) {",
      "          style = mobileStyle ?? Theme.of(context).textTheme.bodyMedium;",
      "        } else if (constraints.maxWidth < 1200) {",
      "          style = tabletStyle ?? Theme.of(context).textTheme.bodyLarge;",
      "        } else {",
      "          style = desktopStyle ?? Theme.of(context).textTheme.headlineSmall;",
      "        }",
      "        ",
      "        return Text(",
      "          text,",
      "          style: style,",
      "          textAlign: textAlign,",
      "          maxLines: maxLines,",
      "          overflow: overflow,",
      "        );",
      "      },",
      "    );",
      "  }",
      "}$0"
    ]
  },

  "Breakpoint Helper": {
    "prefix": "flr-breakpoints",
    "description": "Breakpoint helper class for responsive design",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:Breakpoints} {",
      "  static const double mobile = 600;",
      "  static const double tablet = 1200;",
      "  static const double desktop = 1200;",
      "",
      "  static bool isMobile(BuildContext context) {",
      "    return MediaQuery.of(context).size.width < mobile;",
      "  }",
      "",
      "  static bool isTablet(BuildContext context) {",
      "    final width = MediaQuery.of(context).size.width;",
      "    return width >= mobile && width < desktop;",
      "  }",
      "",
      "  static bool isDesktop(BuildContext context) {",
      "    return MediaQuery.of(context).size.width >= desktop;",
      "  }",
      "",
      "  static T responsive<T>(",
      "    BuildContext context, {",
      "    required T mobile,",
      "    T? tablet,",
      "    T? desktop,",
      "  }) {",
      "    if (isDesktop(context)) {",
      "      return desktop ?? tablet ?? mobile;",
      "    } else if (isTablet(context)) {",
      "      return tablet ?? mobile;",
      "    } else {",
      "      return mobile;",
      "    }",
      "  }",
      "",
      "  static double getScreenWidth(BuildContext context) {",
      "    return MediaQuery.of(context).size.width;",
      "  }",
      "",
      "  static double getScreenHeight(BuildContext context) {",
      "    return MediaQuery.of(context).size.height;",
      "  }",
      "",
      "  static EdgeInsets getResponsivePadding(BuildContext context) {",
      "    return responsive(",
      "      context,",
      "      mobile: const EdgeInsets.all(16),",
      "      tablet: const EdgeInsets.all(24),",
      "      desktop: const EdgeInsets.all(32),",
      "    );",
      "  }",
      "",
      "  static double getResponsiveFontSize(",
      "    BuildContext context, {",
      "    required double mobile,",
      "    double? tablet,",
      "    double? desktop,",
      "  }) {",
      "    return responsive(",
      "      context,",
      "      mobile: mobile,",
      "      tablet: tablet,",
      "      desktop: desktop,",
      "    );",
      "  }",
      "",
      "  static int getResponsiveColumns(BuildContext context) {",
      "    return responsive(",
      "      context,",
      "      mobile: 1,",
      "      tablet: 2,",
      "      desktop: 3,",
      "    );",
      "  }",
      "}$0"
    ]
  },

  "Adaptive Navigation": {
    "prefix": "flr-navigation",
    "description": "Adaptive navigation for different screen sizes",
    "body": [
      "import 'package:flutter/material.dart';",
      "",
      "class ${1:AdaptiveNavigation} extends StatelessWidget {",
      "  const ${1:AdaptiveNavigation}({",
      "    super.key,",
      "    required this.destinations,",
      "    required this.selectedIndex,",
      "    required this.onDestinationSelected,",
      "    this.leading,",
      "    this.trailing,",
      "  });",
      "",
      "  final List<NavigationDestination> destinations;",
      "  final int selectedIndex;",
      "  final ValueChanged<int> onDestinationSelected;",
      "  final Widget? leading;",
      "  final List<Widget>? trailing;",
      "",
      "  @override",
      "  Widget build(BuildContext context) {",
      "    return LayoutBuilder(",
      "      builder: (context, constraints) {",
      "        if (constraints.maxWidth < 600) {",
      "          // Mobile: Bottom Navigation",
      "          return NavigationBar(",
      "            selectedIndex: selectedIndex,",
      "            onDestinationSelected: onDestinationSelected,",
      "            destinations: destinations,",
      "          );",
      "        } else if (constraints.maxWidth < 1200) {",
      "          // Tablet: Navigation Rail",
      "          return NavigationRail(",
      "            selectedIndex: selectedIndex,",
      "            onDestinationSelected: onDestinationSelected,",
      "            labelType: NavigationRailLabelType.selected,",
      "            leading: leading,",
      "            trailing: trailing != null",
      "                ? Column(",
      "                    mainAxisAlignment: MainAxisAlignment.end,",
      "                    children: trailing!,",
      "                  )",
      "                : null,",
      "            destinations: destinations",
      "                .map((destination) => NavigationRailDestination(",
      "                      icon: destination.icon,",
      "                      selectedIcon: destination.selectedIcon,",
      "                      label: Text(destination.label),",
      "                    ))",
      "                .toList(),",
      "          );",
      "        } else {",
      "          // Desktop: Navigation Drawer",
      "          return NavigationDrawer(",
      "            selectedIndex: selectedIndex,",
      "            onDestinationSelected: onDestinationSelected,",
      "            children: [",
      "              if (leading != null) ...[",
      "                Padding(",
      "                  padding: const EdgeInsets.all(16),",
      "                  child: leading!,",
      "                ),",
      "                const Divider(),",
      "              ],",
      "              ...destinations.asMap().entries.map(",
      "                (entry) => NavigationDrawerDestination(",
      "                  icon: entry.value.icon,",
      "                  selectedIcon: entry.value.selectedIcon,",
      "                  label: Text(entry.value.label),",
      "                ),",
      "              ),",
      "              if (trailing != null) ...[",
      "                const Divider(),",
      "                ...trailing!.map(",
      "                  (widget) => Padding(",
      "                    padding: const EdgeInsets.symmetric(",
      "                      horizontal: 16,",
      "                      vertical: 8,",
      "                    ),",
      "                    child: widget,",
      "                  ),",
      "                ),",
      "              ],",
      "            ],",
      "          );",
      "        }",
      "      },",
      "    );",
      "  }",
      "}$0"
    ]
  }
}
